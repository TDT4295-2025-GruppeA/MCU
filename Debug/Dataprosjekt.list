
Dataprosjekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e50  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000617  08008088  08008088  00009088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080086a0  080086a0  000096a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080086a8  080086a8  000096a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080086ac  080086ac  000096ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  20000000  080086b0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000344  20000070  08008720  0000a070  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200003b4  08008720  0000a3b4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012fca  00000000  00000000  0000a0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000025e2  00000000  00000000  0001d070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ea0  00000000  00000000  0001f658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b46  00000000  00000000  000204f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00003079  00000000  00000000  0002103e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000125da  00000000  00000000  000240b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00120065  00000000  00000000  00036691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001566f6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000041b8  00000000  00000000  0015673c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  0015a8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000070 	.word	0x20000070
 8000254:	00000000 	.word	0x00000000
 8000258:	08008070 	.word	0x08008070

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000074 	.word	0x20000074
 8000274:	08008070 	.word	0x08008070

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000298:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800029c:	f000 b9b0 	b.w	8000600 <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002bc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002be:	4688      	mov	r8, r1
 80002c0:	4604      	mov	r4, r0
 80002c2:	468e      	mov	lr, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14a      	bne.n	800035e <__udivmoddi4+0xa6>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	4617      	mov	r7, r2
 80002cc:	d95f      	bls.n	800038e <__udivmoddi4+0xd6>
 80002ce:	fab2 f682 	clz	r6, r2
 80002d2:	b14e      	cbz	r6, 80002e8 <__udivmoddi4+0x30>
 80002d4:	f1c6 0320 	rsb	r3, r6, #32
 80002d8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002dc:	40b7      	lsls	r7, r6
 80002de:	40b4      	lsls	r4, r6
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002e8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002ec:	fa1f fc87 	uxth.w	ip, r7
 80002f0:	0c23      	lsrs	r3, r4, #16
 80002f2:	fbbe f1f8 	udiv	r1, lr, r8
 80002f6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002fa:	fb01 f20c 	mul.w	r2, r1, ip
 80002fe:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x5e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x5c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 8154 	bhi.w	80005bc <__udivmoddi4+0x304>
 8000314:	4601      	mov	r1, r0
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	b2a2      	uxth	r2, r4
 800031a:	fbb3 f0f8 	udiv	r0, r3, r8
 800031e:	fb08 3310 	mls	r3, r8, r0, r3
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800032a:	4594      	cmp	ip, r2
 800032c:	d90b      	bls.n	8000346 <__udivmoddi4+0x8e>
 800032e:	18ba      	adds	r2, r7, r2
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000334:	bf2c      	ite	cs
 8000336:	2401      	movcs	r4, #1
 8000338:	2400      	movcc	r4, #0
 800033a:	4594      	cmp	ip, r2
 800033c:	d902      	bls.n	8000344 <__udivmoddi4+0x8c>
 800033e:	2c00      	cmp	r4, #0
 8000340:	f000 813f 	beq.w	80005c2 <__udivmoddi4+0x30a>
 8000344:	4618      	mov	r0, r3
 8000346:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034a:	eba2 020c 	sub.w	r2, r2, ip
 800034e:	2100      	movs	r1, #0
 8000350:	b11d      	cbz	r5, 800035a <__udivmoddi4+0xa2>
 8000352:	40f2      	lsrs	r2, r6
 8000354:	2300      	movs	r3, #0
 8000356:	e9c5 2300 	strd	r2, r3, [r5]
 800035a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d905      	bls.n	800036e <__udivmoddi4+0xb6>
 8000362:	b10d      	cbz	r5, 8000368 <__udivmoddi4+0xb0>
 8000364:	e9c5 0100 	strd	r0, r1, [r5]
 8000368:	2100      	movs	r1, #0
 800036a:	4608      	mov	r0, r1
 800036c:	e7f5      	b.n	800035a <__udivmoddi4+0xa2>
 800036e:	fab3 f183 	clz	r1, r3
 8000372:	2900      	cmp	r1, #0
 8000374:	d14e      	bne.n	8000414 <__udivmoddi4+0x15c>
 8000376:	4543      	cmp	r3, r8
 8000378:	f0c0 8112 	bcc.w	80005a0 <__udivmoddi4+0x2e8>
 800037c:	4282      	cmp	r2, r0
 800037e:	f240 810f 	bls.w	80005a0 <__udivmoddi4+0x2e8>
 8000382:	4608      	mov	r0, r1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e8      	beq.n	800035a <__udivmoddi4+0xa2>
 8000388:	e9c5 4e00 	strd	r4, lr, [r5]
 800038c:	e7e5      	b.n	800035a <__udivmoddi4+0xa2>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f000 80ac 	beq.w	80004ec <__udivmoddi4+0x234>
 8000394:	fab2 f682 	clz	r6, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	f040 80bb 	bne.w	8000514 <__udivmoddi4+0x25c>
 800039e:	1a8b      	subs	r3, r1, r2
 80003a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003a4:	b2bc      	uxth	r4, r7
 80003a6:	2101      	movs	r1, #1
 80003a8:	0c02      	lsrs	r2, r0, #16
 80003aa:	b280      	uxth	r0, r0
 80003ac:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003b8:	fb04 f20c 	mul.w	r2, r4, ip
 80003bc:	429a      	cmp	r2, r3
 80003be:	d90e      	bls.n	80003de <__udivmoddi4+0x126>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c6:	bf2c      	ite	cs
 80003c8:	f04f 0901 	movcs.w	r9, #1
 80003cc:	f04f 0900 	movcc.w	r9, #0
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d903      	bls.n	80003dc <__udivmoddi4+0x124>
 80003d4:	f1b9 0f00 	cmp.w	r9, #0
 80003d8:	f000 80ec 	beq.w	80005b4 <__udivmoddi4+0x2fc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003e4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003e8:	fb04 f408 	mul.w	r4, r4, r8
 80003ec:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x154>
 80003f4:	18ba      	adds	r2, r7, r2
 80003f6:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80003fa:	bf2c      	ite	cs
 80003fc:	2001      	movcs	r0, #1
 80003fe:	2000      	movcc	r0, #0
 8000400:	4294      	cmp	r4, r2
 8000402:	d902      	bls.n	800040a <__udivmoddi4+0x152>
 8000404:	2800      	cmp	r0, #0
 8000406:	f000 80d1 	beq.w	80005ac <__udivmoddi4+0x2f4>
 800040a:	4698      	mov	r8, r3
 800040c:	1b12      	subs	r2, r2, r4
 800040e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000412:	e79d      	b.n	8000350 <__udivmoddi4+0x98>
 8000414:	f1c1 0620 	rsb	r6, r1, #32
 8000418:	408b      	lsls	r3, r1
 800041a:	fa08 f401 	lsl.w	r4, r8, r1
 800041e:	fa00 f901 	lsl.w	r9, r0, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa28 f806 	lsr.w	r8, r8, r6
 800042a:	408a      	lsls	r2, r1
 800042c:	431f      	orrs	r7, r3
 800042e:	fa20 f306 	lsr.w	r3, r0, r6
 8000432:	0c38      	lsrs	r0, r7, #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fa1f fc87 	uxth.w	ip, r7
 800043a:	0c1c      	lsrs	r4, r3, #16
 800043c:	fbb8 fef0 	udiv	lr, r8, r0
 8000440:	fb00 881e 	mls	r8, r0, lr, r8
 8000444:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000448:	fb0e f80c 	mul.w	r8, lr, ip
 800044c:	45a0      	cmp	r8, r4
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a0      	cmp	r8, r4
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b4>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 80b8 	beq.w	80005dc <__udivmoddi4+0x324>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba4 0408 	sub.w	r4, r4, r8
 8000472:	fa1f f883 	uxth.w	r8, r3
 8000476:	fbb4 f3f0 	udiv	r3, r4, r0
 800047a:	fb00 4413 	mls	r4, r0, r3, r4
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000486:	45a4      	cmp	ip, r4
 8000488:	d90e      	bls.n	80004a8 <__udivmoddi4+0x1f0>
 800048a:	193c      	adds	r4, r7, r4
 800048c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000490:	bf2c      	ite	cs
 8000492:	f04f 0801 	movcs.w	r8, #1
 8000496:	f04f 0800 	movcc.w	r8, #0
 800049a:	45a4      	cmp	ip, r4
 800049c:	d903      	bls.n	80004a6 <__udivmoddi4+0x1ee>
 800049e:	f1b8 0f00 	cmp.w	r8, #0
 80004a2:	f000 809f 	beq.w	80005e4 <__udivmoddi4+0x32c>
 80004a6:	4603      	mov	r3, r0
 80004a8:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004ac:	eba4 040c 	sub.w	r4, r4, ip
 80004b0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004b4:	4564      	cmp	r4, ip
 80004b6:	4673      	mov	r3, lr
 80004b8:	46e0      	mov	r8, ip
 80004ba:	d302      	bcc.n	80004c2 <__udivmoddi4+0x20a>
 80004bc:	d107      	bne.n	80004ce <__udivmoddi4+0x216>
 80004be:	45f1      	cmp	r9, lr
 80004c0:	d205      	bcs.n	80004ce <__udivmoddi4+0x216>
 80004c2:	ebbe 0302 	subs.w	r3, lr, r2
 80004c6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	46e0      	mov	r8, ip
 80004ce:	b15d      	cbz	r5, 80004e8 <__udivmoddi4+0x230>
 80004d0:	ebb9 0203 	subs.w	r2, r9, r3
 80004d4:	eb64 0408 	sbc.w	r4, r4, r8
 80004d8:	fa04 f606 	lsl.w	r6, r4, r6
 80004dc:	fa22 f301 	lsr.w	r3, r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	431e      	orrs	r6, r3
 80004e4:	e9c5 6400 	strd	r6, r4, [r5]
 80004e8:	2100      	movs	r1, #0
 80004ea:	e736      	b.n	800035a <__udivmoddi4+0xa2>
 80004ec:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f0:	0c01      	lsrs	r1, r0, #16
 80004f2:	4614      	mov	r4, r2
 80004f4:	b280      	uxth	r0, r0
 80004f6:	4696      	mov	lr, r2
 80004f8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004fc:	2620      	movs	r6, #32
 80004fe:	4690      	mov	r8, r2
 8000500:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000504:	4610      	mov	r0, r2
 8000506:	fbb1 f1f2 	udiv	r1, r1, r2
 800050a:	eba3 0308 	sub.w	r3, r3, r8
 800050e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000512:	e74b      	b.n	80003ac <__udivmoddi4+0xf4>
 8000514:	40b7      	lsls	r7, r6
 8000516:	f1c6 0320 	rsb	r3, r6, #32
 800051a:	fa01 f206 	lsl.w	r2, r1, r6
 800051e:	fa21 f803 	lsr.w	r8, r1, r3
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	fa20 f303 	lsr.w	r3, r0, r3
 800052a:	b2bc      	uxth	r4, r7
 800052c:	40b0      	lsls	r0, r6
 800052e:	4313      	orrs	r3, r2
 8000530:	0c02      	lsrs	r2, r0, #16
 8000532:	0c19      	lsrs	r1, r3, #16
 8000534:	b280      	uxth	r0, r0
 8000536:	fbb8 f9fe 	udiv	r9, r8, lr
 800053a:	fb0e 8819 	mls	r8, lr, r9, r8
 800053e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	4588      	cmp	r8, r1
 8000548:	d951      	bls.n	80005ee <__udivmoddi4+0x336>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 8000550:	bf2c      	ite	cs
 8000552:	f04f 0a01 	movcs.w	sl, #1
 8000556:	f04f 0a00 	movcc.w	sl, #0
 800055a:	4588      	cmp	r8, r1
 800055c:	d902      	bls.n	8000564 <__udivmoddi4+0x2ac>
 800055e:	f1ba 0f00 	cmp.w	sl, #0
 8000562:	d031      	beq.n	80005c8 <__udivmoddi4+0x310>
 8000564:	eba1 0108 	sub.w	r1, r1, r8
 8000568:	fbb1 f9fe 	udiv	r9, r1, lr
 800056c:	fb09 f804 	mul.w	r8, r9, r4
 8000570:	fb0e 1119 	mls	r1, lr, r9, r1
 8000574:	b29b      	uxth	r3, r3
 8000576:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800057a:	4543      	cmp	r3, r8
 800057c:	d235      	bcs.n	80005ea <__udivmoddi4+0x332>
 800057e:	18fb      	adds	r3, r7, r3
 8000580:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000584:	bf2c      	ite	cs
 8000586:	f04f 0a01 	movcs.w	sl, #1
 800058a:	f04f 0a00 	movcc.w	sl, #0
 800058e:	4543      	cmp	r3, r8
 8000590:	d2bb      	bcs.n	800050a <__udivmoddi4+0x252>
 8000592:	f1ba 0f00 	cmp.w	sl, #0
 8000596:	d1b8      	bne.n	800050a <__udivmoddi4+0x252>
 8000598:	f1a9 0102 	sub.w	r1, r9, #2
 800059c:	443b      	add	r3, r7
 800059e:	e7b4      	b.n	800050a <__udivmoddi4+0x252>
 80005a0:	1a84      	subs	r4, r0, r2
 80005a2:	eb68 0203 	sbc.w	r2, r8, r3
 80005a6:	2001      	movs	r0, #1
 80005a8:	4696      	mov	lr, r2
 80005aa:	e6eb      	b.n	8000384 <__udivmoddi4+0xcc>
 80005ac:	443a      	add	r2, r7
 80005ae:	f1a8 0802 	sub.w	r8, r8, #2
 80005b2:	e72b      	b.n	800040c <__udivmoddi4+0x154>
 80005b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b8:	443b      	add	r3, r7
 80005ba:	e710      	b.n	80003de <__udivmoddi4+0x126>
 80005bc:	3902      	subs	r1, #2
 80005be:	443b      	add	r3, r7
 80005c0:	e6a9      	b.n	8000316 <__udivmoddi4+0x5e>
 80005c2:	443a      	add	r2, r7
 80005c4:	3802      	subs	r0, #2
 80005c6:	e6be      	b.n	8000346 <__udivmoddi4+0x8e>
 80005c8:	eba7 0808 	sub.w	r8, r7, r8
 80005cc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005d0:	4441      	add	r1, r8
 80005d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d6:	fb09 f804 	mul.w	r8, r9, r4
 80005da:	e7c9      	b.n	8000570 <__udivmoddi4+0x2b8>
 80005dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005e0:	443c      	add	r4, r7
 80005e2:	e744      	b.n	800046e <__udivmoddi4+0x1b6>
 80005e4:	3b02      	subs	r3, #2
 80005e6:	443c      	add	r4, r7
 80005e8:	e75e      	b.n	80004a8 <__udivmoddi4+0x1f0>
 80005ea:	4649      	mov	r1, r9
 80005ec:	e78d      	b.n	800050a <__udivmoddi4+0x252>
 80005ee:	eba1 0108 	sub.w	r1, r1, r8
 80005f2:	46cc      	mov	ip, r9
 80005f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f8:	fb09 f804 	mul.w	r8, r9, r4
 80005fc:	e7b8      	b.n	8000570 <__udivmoddi4+0x2b8>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 ff8d 	bl	8001528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 800060e:	f000 fb12 	bl	8000c36 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 fac7 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 fb9d 	bl	8000d54 <MX_GPIO_Init>
  MX_ICACHE_Init();
 800061a:	f000 fb18 	bl	8000c4e <MX_ICACHE_Init>
  MX_SPI1_Init();
 800061e:	f000 fb29 	bl	8000c74 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000622:	f000 fa5f 	bl	8000ae4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8000626:	2000      	movs	r0, #0
 8000628:	f000 fd96 	bl	8001158 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800062c:	2101      	movs	r1, #1
 800062e:	2000      	movs	r0, #0
 8000630:	f000 fe28 	bl	8001284 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000634:	4b2b      	ldr	r3, [pc, #172]	@ (80006e4 <main+0xe0>)
 8000636:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800063a:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800063c:	4b29      	ldr	r3, [pc, #164]	@ (80006e4 <main+0xe0>)
 800063e:	2200      	movs	r2, #0
 8000640:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000642:	4b28      	ldr	r3, [pc, #160]	@ (80006e4 <main+0xe0>)
 8000644:	2200      	movs	r2, #0
 8000646:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000648:	4b26      	ldr	r3, [pc, #152]	@ (80006e4 <main+0xe0>)
 800064a:	2200      	movs	r2, #0
 800064c:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800064e:	4b25      	ldr	r3, [pc, #148]	@ (80006e4 <main+0xe0>)
 8000650:	2200      	movs	r2, #0
 8000652:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000654:	4923      	ldr	r1, [pc, #140]	@ (80006e4 <main+0xe0>)
 8000656:	2000      	movs	r0, #0
 8000658:	f000 fea2 	bl	80013a0 <BSP_COM_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <main+0x62>
  {
    Error_Handler();
 8000662:	f000 fb91 	bl	8000d88 <Error_Handler>
  }

  /* Send startup message */
  UART_Printf("\r\n==================================\r\n");
 8000666:	4820      	ldr	r0, [pc, #128]	@ (80006e8 <main+0xe4>)
 8000668:	f000 fa6c 	bl	8000b44 <UART_Printf>
  UART_Printf("STM32U5 SPI Test Program Started!\r\n");
 800066c:	481f      	ldr	r0, [pc, #124]	@ (80006ec <main+0xe8>)
 800066e:	f000 fa69 	bl	8000b44 <UART_Printf>
  UART_Printf("==================================\r\n\r\n");
 8000672:	481f      	ldr	r0, [pc, #124]	@ (80006f0 <main+0xec>)
 8000674:	f000 fa66 	bl	8000b44 <UART_Printf>
  UART_Printf("Press USER button to cycle through tests:\r\n");
 8000678:	481e      	ldr	r0, [pc, #120]	@ (80006f4 <main+0xf0>)
 800067a:	f000 fa63 	bl	8000b44 <UART_Printf>
  UART_Printf("1. SPI Loopback Test (connect MOSI to MISO)\r\n");
 800067e:	481e      	ldr	r0, [pc, #120]	@ (80006f8 <main+0xf4>)
 8000680:	f000 fa60 	bl	8000b44 <UART_Printf>
  UART_Printf("2. SPI Basic Transmission Test\r\n");
 8000684:	481d      	ldr	r0, [pc, #116]	@ (80006fc <main+0xf8>)
 8000686:	f000 fa5d 	bl	8000b44 <UART_Printf>
  UART_Printf("3. FPGA Command Test\r\n\r\n");
 800068a:	481d      	ldr	r0, [pc, #116]	@ (8000700 <main+0xfc>)
 800068c:	f000 fa5a 	bl	8000b44 <UART_Printf>

  uint32_t last_test_time = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]

  while (1)
     {
         uint32_t current_time = HAL_GetTick();
 8000694:	f001 f802 	bl	800169c <HAL_GetTick>
 8000698:	6038      	str	r0, [r7, #0]

         // Run test every 2 seconds if in test mode
         if(test_mode > 0 && (current_time - last_test_time) >= 2000)
 800069a:	4b1a      	ldr	r3, [pc, #104]	@ (8000704 <main+0x100>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d01b      	beq.n	80006da <main+0xd6>
 80006a2:	683a      	ldr	r2, [r7, #0]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80006ac:	d315      	bcc.n	80006da <main+0xd6>
         {
             last_test_time = current_time;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	607b      	str	r3, [r7, #4]

             switch(test_mode)
 80006b2:	4b14      	ldr	r3, [pc, #80]	@ (8000704 <main+0x100>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b03      	cmp	r3, #3
 80006b8:	d00c      	beq.n	80006d4 <main+0xd0>
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	dc0d      	bgt.n	80006da <main+0xd6>
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d002      	beq.n	80006c8 <main+0xc4>
 80006c2:	2b02      	cmp	r3, #2
 80006c4:	d003      	beq.n	80006ce <main+0xca>
 80006c6:	e008      	b.n	80006da <main+0xd6>
             {
                 case 1:
                     Test_SPI_Loopback();
 80006c8:	f000 f874 	bl	80007b4 <Test_SPI_Loopback>
                     break;
 80006cc:	e005      	b.n	80006da <main+0xd6>
                 case 2:
                     Test_SPI_Basic();
 80006ce:	f000 f909 	bl	80008e4 <Test_SPI_Basic>
                     break;
 80006d2:	e002      	b.n	80006da <main+0xd6>
                 case 3:
                     Test_FPGA_Commands();
 80006d4:	f000 f974 	bl	80009c0 <Test_FPGA_Commands>
                     break;
 80006d8:	bf00      	nop
             }
         }

         HAL_Delay(10);
 80006da:	200a      	movs	r0, #10
 80006dc:	f000 ffea 	bl	80016b4 <HAL_Delay>
     {
 80006e0:	e7d8      	b.n	8000694 <main+0x90>
 80006e2:	bf00      	nop
 80006e4:	200001b0 	.word	0x200001b0
 80006e8:	08008088 	.word	0x08008088
 80006ec:	080080b0 	.word	0x080080b0
 80006f0:	080080d4 	.word	0x080080d4
 80006f4:	080080fc 	.word	0x080080fc
 80006f8:	08008128 	.word	0x08008128
 80006fc:	08008158 	.word	0x08008158
 8000700:	0800817c 	.word	0x0800817c
 8000704:	200001c0 	.word	0x200001c0

08000708 <BSP_PB_Callback>:
     }
}

/* Button callback - cycles through test modes */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
    if (Button == BUTTON_USER)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d13b      	bne.n	8000790 <BSP_PB_Callback+0x88>
    {
        button_press_count++;
 8000718:	4b1f      	ldr	r3, [pc, #124]	@ (8000798 <BSP_PB_Callback+0x90>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	3301      	adds	r3, #1
 800071e:	b2da      	uxtb	r2, r3
 8000720:	4b1d      	ldr	r3, [pc, #116]	@ (8000798 <BSP_PB_Callback+0x90>)
 8000722:	701a      	strb	r2, [r3, #0]
        test_mode = (test_mode + 1) % 4;  // Cycle through 0,1,2,3
 8000724:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <BSP_PB_Callback+0x94>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	3301      	adds	r3, #1
 800072a:	425a      	negs	r2, r3
 800072c:	f003 0303 	and.w	r3, r3, #3
 8000730:	f002 0203 	and.w	r2, r2, #3
 8000734:	bf58      	it	pl
 8000736:	4253      	negpl	r3, r2
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b18      	ldr	r3, [pc, #96]	@ (800079c <BSP_PB_Callback+0x94>)
 800073c:	701a      	strb	r2, [r3, #0]

        BSP_LED_Toggle(LED_GREEN);
 800073e:	2000      	movs	r0, #0
 8000740:	f000 fd82 	bl	8001248 <BSP_LED_Toggle>

        switch(test_mode)
 8000744:	4b15      	ldr	r3, [pc, #84]	@ (800079c <BSP_PB_Callback+0x94>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b03      	cmp	r3, #3
 800074a:	d821      	bhi.n	8000790 <BSP_PB_Callback+0x88>
 800074c:	a201      	add	r2, pc, #4	@ (adr r2, 8000754 <BSP_PB_Callback+0x4c>)
 800074e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000752:	bf00      	nop
 8000754:	08000765 	.word	0x08000765
 8000758:	08000773 	.word	0x08000773
 800075c:	08000781 	.word	0x08000781
 8000760:	08000789 	.word	0x08000789
        {
            case 0:
                UART_Printf("\n[BUTTON] Test Mode: OFF\r\n");
 8000764:	480e      	ldr	r0, [pc, #56]	@ (80007a0 <BSP_PB_Callback+0x98>)
 8000766:	f000 f9ed 	bl	8000b44 <UART_Printf>
                BSP_LED_Off(LED_GREEN);
 800076a:	2000      	movs	r0, #0
 800076c:	f000 fd4e 	bl	800120c <BSP_LED_Off>
                break;
 8000770:	e00e      	b.n	8000790 <BSP_PB_Callback+0x88>
            case 1:
                UART_Printf("\n[BUTTON] Test Mode: SPI LOOPBACK\r\n");
 8000772:	480c      	ldr	r0, [pc, #48]	@ (80007a4 <BSP_PB_Callback+0x9c>)
 8000774:	f000 f9e6 	bl	8000b44 <UART_Printf>
                UART_Printf("Connect MOSI (PA7) to MISO (PA6) for loopback test\r\n");
 8000778:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <BSP_PB_Callback+0xa0>)
 800077a:	f000 f9e3 	bl	8000b44 <UART_Printf>
                break;
 800077e:	e007      	b.n	8000790 <BSP_PB_Callback+0x88>
            case 2:
                UART_Printf("\n[BUTTON] Test Mode: SPI BASIC\r\n");
 8000780:	480a      	ldr	r0, [pc, #40]	@ (80007ac <BSP_PB_Callback+0xa4>)
 8000782:	f000 f9df 	bl	8000b44 <UART_Printf>
                break;
 8000786:	e003      	b.n	8000790 <BSP_PB_Callback+0x88>
            case 3:
                UART_Printf("\n[BUTTON] Test Mode: FPGA COMMANDS\r\n");
 8000788:	4809      	ldr	r0, [pc, #36]	@ (80007b0 <BSP_PB_Callback+0xa8>)
 800078a:	f000 f9db 	bl	8000b44 <UART_Printf>
                break;
 800078e:	bf00      	nop
        }
    }
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200001c1 	.word	0x200001c1
 800079c:	200001c0 	.word	0x200001c0
 80007a0:	08008198 	.word	0x08008198
 80007a4:	080081b4 	.word	0x080081b4
 80007a8:	080081d8 	.word	0x080081d8
 80007ac:	08008210 	.word	0x08008210
 80007b0:	08008234 	.word	0x08008234

080007b4 <Test_SPI_Loopback>:

/* Test 1: SPI Loopback Test */
void Test_SPI_Loopback(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	@ 0x30
 80007b8:	af02      	add	r7, sp, #8
    UART_Printf("\n--- SPI Loopback Test ---\r\n");
 80007ba:	4840      	ldr	r0, [pc, #256]	@ (80008bc <Test_SPI_Loopback+0x108>)
 80007bc:	f000 f9c2 	bl	8000b44 <UART_Printf>

    uint8_t tx_data[] = {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF};
 80007c0:	4a3f      	ldr	r2, [pc, #252]	@ (80008c0 <Test_SPI_Loopback+0x10c>)
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007ca:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t rx_data[8] = {0};
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]

    // For loopback test, we need to use TransmitReceive
    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 8, 100);
 80007d6:	1d3a      	adds	r2, r7, #4
 80007d8:	f107 010c 	add.w	r1, r7, #12
 80007dc:	2364      	movs	r3, #100	@ 0x64
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2308      	movs	r3, #8
 80007e2:	4838      	ldr	r0, [pc, #224]	@ (80008c4 <Test_SPI_Loopback+0x110>)
 80007e4:	f005 fe58 	bl	8006498 <HAL_SPI_TransmitReceive>
 80007e8:	4603      	mov	r3, r0
 80007ea:	75fb      	strb	r3, [r7, #23]

    if(status == HAL_OK)
 80007ec:	7dfb      	ldrb	r3, [r7, #23]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d15b      	bne.n	80008aa <Test_SPI_Loopback+0xf6>
    {
        UART_Printf("TX: ");
 80007f2:	4835      	ldr	r0, [pc, #212]	@ (80008c8 <Test_SPI_Loopback+0x114>)
 80007f4:	f000 f9a6 	bl	8000b44 <UART_Printf>
        for(int i = 0; i < 8; i++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80007fc:	e00b      	b.n	8000816 <Test_SPI_Loopback+0x62>
            UART_Printf("%02X ", tx_data[i]);
 80007fe:	f107 020c 	add.w	r2, r7, #12
 8000802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000804:	4413      	add	r3, r2
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	4830      	ldr	r0, [pc, #192]	@ (80008cc <Test_SPI_Loopback+0x118>)
 800080c:	f000 f99a 	bl	8000b44 <UART_Printf>
        for(int i = 0; i < 8; i++)
 8000810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000812:	3301      	adds	r3, #1
 8000814:	627b      	str	r3, [r7, #36]	@ 0x24
 8000816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000818:	2b07      	cmp	r3, #7
 800081a:	ddf0      	ble.n	80007fe <Test_SPI_Loopback+0x4a>
        UART_Printf("\r\n");
 800081c:	482c      	ldr	r0, [pc, #176]	@ (80008d0 <Test_SPI_Loopback+0x11c>)
 800081e:	f000 f991 	bl	8000b44 <UART_Printf>

        UART_Printf("RX: ");
 8000822:	482c      	ldr	r0, [pc, #176]	@ (80008d4 <Test_SPI_Loopback+0x120>)
 8000824:	f000 f98e 	bl	8000b44 <UART_Printf>
        for(int i = 0; i < 8; i++)
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	e00a      	b.n	8000844 <Test_SPI_Loopback+0x90>
            UART_Printf("%02X ", rx_data[i]);
 800082e:	1d3a      	adds	r2, r7, #4
 8000830:	6a3b      	ldr	r3, [r7, #32]
 8000832:	4413      	add	r3, r2
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	4619      	mov	r1, r3
 8000838:	4824      	ldr	r0, [pc, #144]	@ (80008cc <Test_SPI_Loopback+0x118>)
 800083a:	f000 f983 	bl	8000b44 <UART_Printf>
        for(int i = 0; i < 8; i++)
 800083e:	6a3b      	ldr	r3, [r7, #32]
 8000840:	3301      	adds	r3, #1
 8000842:	623b      	str	r3, [r7, #32]
 8000844:	6a3b      	ldr	r3, [r7, #32]
 8000846:	2b07      	cmp	r3, #7
 8000848:	ddf1      	ble.n	800082e <Test_SPI_Loopback+0x7a>
        UART_Printf("\r\n");
 800084a:	4821      	ldr	r0, [pc, #132]	@ (80008d0 <Test_SPI_Loopback+0x11c>)
 800084c:	f000 f97a 	bl	8000b44 <UART_Printf>

        // Check if data matches
        uint8_t match = 1;
 8000850:	2301      	movs	r3, #1
 8000852:	77fb      	strb	r3, [r7, #31]
        for(int i = 0; i < 8; i++)
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
 8000858:	e010      	b.n	800087c <Test_SPI_Loopback+0xc8>
        {
            if(tx_data[i] != rx_data[i])
 800085a:	f107 020c 	add.w	r2, r7, #12
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	4413      	add	r3, r2
 8000862:	781a      	ldrb	r2, [r3, #0]
 8000864:	1d39      	adds	r1, r7, #4
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	440b      	add	r3, r1
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	429a      	cmp	r2, r3
 800086e:	d002      	beq.n	8000876 <Test_SPI_Loopback+0xc2>
            {
                match = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	77fb      	strb	r3, [r7, #31]
                break;
 8000874:	e005      	b.n	8000882 <Test_SPI_Loopback+0xce>
        for(int i = 0; i < 8; i++)
 8000876:	69bb      	ldr	r3, [r7, #24]
 8000878:	3301      	adds	r3, #1
 800087a:	61bb      	str	r3, [r7, #24]
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	2b07      	cmp	r3, #7
 8000880:	ddeb      	ble.n	800085a <Test_SPI_Loopback+0xa6>
            }
        }

        if(match)
 8000882:	7ffb      	ldrb	r3, [r7, #31]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d00c      	beq.n	80008a2 <Test_SPI_Loopback+0xee>
        {
            UART_Printf("SUCCESS: Data matches! SPI is working.\r\n");
 8000888:	4813      	ldr	r0, [pc, #76]	@ (80008d8 <Test_SPI_Loopback+0x124>)
 800088a:	f000 f95b 	bl	8000b44 <UART_Printf>
            BSP_LED_On(LED_GREEN);
 800088e:	2000      	movs	r0, #0
 8000890:	f000 fc9e 	bl	80011d0 <BSP_LED_On>
            HAL_Delay(100);
 8000894:	2064      	movs	r0, #100	@ 0x64
 8000896:	f000 ff0d 	bl	80016b4 <HAL_Delay>
            BSP_LED_Off(LED_GREEN);
 800089a:	2000      	movs	r0, #0
 800089c:	f000 fcb6 	bl	800120c <BSP_LED_Off>
    }
    else
    {
        UART_Printf("ERROR: SPI TransmitReceive failed (status=%d)\r\n", status);
    }
}
 80008a0:	e008      	b.n	80008b4 <Test_SPI_Loopback+0x100>
            UART_Printf("FAIL: Data mismatch. Check MOSI-MISO connection.\r\n");
 80008a2:	480e      	ldr	r0, [pc, #56]	@ (80008dc <Test_SPI_Loopback+0x128>)
 80008a4:	f000 f94e 	bl	8000b44 <UART_Printf>
}
 80008a8:	e004      	b.n	80008b4 <Test_SPI_Loopback+0x100>
        UART_Printf("ERROR: SPI TransmitReceive failed (status=%d)\r\n", status);
 80008aa:	7dfb      	ldrb	r3, [r7, #23]
 80008ac:	4619      	mov	r1, r3
 80008ae:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <Test_SPI_Loopback+0x12c>)
 80008b0:	f000 f948 	bl	8000b44 <UART_Printf>
}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	@ 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	0800825c 	.word	0x0800825c
 80008c0:	08008328 	.word	0x08008328
 80008c4:	2000008c 	.word	0x2000008c
 80008c8:	0800827c 	.word	0x0800827c
 80008cc:	08008284 	.word	0x08008284
 80008d0:	0800828c 	.word	0x0800828c
 80008d4:	08008290 	.word	0x08008290
 80008d8:	08008298 	.word	0x08008298
 80008dc:	080082c4 	.word	0x080082c4
 80008e0:	080082f8 	.word	0x080082f8

080008e4 <Test_SPI_Basic>:

/* Test 2: Basic SPI Transmission (monitor with oscilloscope/logic analyzer) */
void Test_SPI_Basic(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
    UART_Printf("\n--- SPI Basic Transmission Test ---\r\n");
 80008ea:	4829      	ldr	r0, [pc, #164]	@ (8000990 <Test_SPI_Basic+0xac>)
 80008ec:	f000 f92a 	bl	8000b44 <UART_Printf>

    // Test pattern that's easy to see on scope
    uint8_t test_pattern[] = {0xAA, 0x55, 0xF0, 0x0F, 0xFF, 0x00};
 80008f0:	4a28      	ldr	r2, [pc, #160]	@ (8000994 <Test_SPI_Basic+0xb0>)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008f8:	6018      	str	r0, [r3, #0]
 80008fa:	3304      	adds	r3, #4
 80008fc:	8019      	strh	r1, [r3, #0]

    UART_Printf("Sending: ");
 80008fe:	4826      	ldr	r0, [pc, #152]	@ (8000998 <Test_SPI_Basic+0xb4>)
 8000900:	f000 f920 	bl	8000b44 <UART_Printf>
    for(int i = 0; i < 6; i++)
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	e00a      	b.n	8000920 <Test_SPI_Basic+0x3c>
        UART_Printf("%02X ", test_pattern[i]);
 800090a:	1d3a      	adds	r2, r7, #4
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4413      	add	r3, r2
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	4619      	mov	r1, r3
 8000914:	4821      	ldr	r0, [pc, #132]	@ (800099c <Test_SPI_Basic+0xb8>)
 8000916:	f000 f915 	bl	8000b44 <UART_Printf>
    for(int i = 0; i < 6; i++)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	3301      	adds	r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2b05      	cmp	r3, #5
 8000924:	ddf1      	ble.n	800090a <Test_SPI_Basic+0x26>
    UART_Printf("\r\n");
 8000926:	481e      	ldr	r0, [pc, #120]	@ (80009a0 <Test_SPI_Basic+0xbc>)
 8000928:	f000 f90c 	bl	8000b44 <UART_Printf>

    // Manual CS control for testing
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // CS Low
 800092c:	2200      	movs	r2, #0
 800092e:	2110      	movs	r1, #16
 8000930:	481c      	ldr	r0, [pc, #112]	@ (80009a4 <Test_SPI_Basic+0xc0>)
 8000932:	f001 fadf 	bl	8001ef4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000936:	2001      	movs	r0, #1
 8000938:	f000 febc 	bl	80016b4 <HAL_Delay>

    HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi1, test_pattern, 6, 100);
 800093c:	1d39      	adds	r1, r7, #4
 800093e:	2364      	movs	r3, #100	@ 0x64
 8000940:	2206      	movs	r2, #6
 8000942:	4819      	ldr	r0, [pc, #100]	@ (80009a8 <Test_SPI_Basic+0xc4>)
 8000944:	f005 fb94 	bl	8006070 <HAL_SPI_Transmit>
 8000948:	4603      	mov	r3, r0
 800094a:	72fb      	strb	r3, [r7, #11]

    HAL_Delay(1);
 800094c:	2001      	movs	r0, #1
 800094e:	f000 feb1 	bl	80016b4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);    // CS High
 8000952:	2201      	movs	r2, #1
 8000954:	2110      	movs	r1, #16
 8000956:	4813      	ldr	r0, [pc, #76]	@ (80009a4 <Test_SPI_Basic+0xc0>)
 8000958:	f001 facc 	bl	8001ef4 <HAL_GPIO_WritePin>

    if(status == HAL_OK)
 800095c:	7afb      	ldrb	r3, [r7, #11]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d10c      	bne.n	800097c <Test_SPI_Basic+0x98>
    {
        UART_Printf("Transmission complete! Check with scope:\r\n");
 8000962:	4812      	ldr	r0, [pc, #72]	@ (80009ac <Test_SPI_Basic+0xc8>)
 8000964:	f000 f8ee 	bl	8000b44 <UART_Printf>
        UART_Printf("  - SCK (PA5): Should show clock pulses\r\n");
 8000968:	4811      	ldr	r0, [pc, #68]	@ (80009b0 <Test_SPI_Basic+0xcc>)
 800096a:	f000 f8eb 	bl	8000b44 <UART_Printf>
        UART_Printf("  - MOSI (PA7): Should show data pattern\r\n");
 800096e:	4811      	ldr	r0, [pc, #68]	@ (80009b4 <Test_SPI_Basic+0xd0>)
 8000970:	f000 f8e8 	bl	8000b44 <UART_Printf>
        UART_Printf("  - CS (PA4): Should pulse low\r\n");
 8000974:	4810      	ldr	r0, [pc, #64]	@ (80009b8 <Test_SPI_Basic+0xd4>)
 8000976:	f000 f8e5 	bl	8000b44 <UART_Printf>
    }
    else
    {
        UART_Printf("Transmission failed (status=%d)\r\n", status);
    }
}
 800097a:	e004      	b.n	8000986 <Test_SPI_Basic+0xa2>
        UART_Printf("Transmission failed (status=%d)\r\n", status);
 800097c:	7afb      	ldrb	r3, [r7, #11]
 800097e:	4619      	mov	r1, r3
 8000980:	480e      	ldr	r0, [pc, #56]	@ (80009bc <Test_SPI_Basic+0xd8>)
 8000982:	f000 f8df 	bl	8000b44 <UART_Printf>
}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	08008330 	.word	0x08008330
 8000994:	08008430 	.word	0x08008430
 8000998:	08008358 	.word	0x08008358
 800099c:	08008284 	.word	0x08008284
 80009a0:	0800828c 	.word	0x0800828c
 80009a4:	42020000 	.word	0x42020000
 80009a8:	2000008c 	.word	0x2000008c
 80009ac:	08008364 	.word	0x08008364
 80009b0:	08008390 	.word	0x08008390
 80009b4:	080083bc 	.word	0x080083bc
 80009b8:	080083e8 	.word	0x080083e8
 80009bc:	0800840c 	.word	0x0800840c

080009c0 <Test_FPGA_Commands>:

/* Test 3: FPGA-style Commands */
void Test_FPGA_Commands(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	@ 0x28
 80009c4:	af04      	add	r7, sp, #16
    UART_Printf("\n--- FPGA Command Test ---\r\n");
 80009c6:	483c      	ldr	r0, [pc, #240]	@ (8000ab8 <Test_FPGA_Commands+0xf8>)
 80009c8:	f000 f8bc 	bl	8000b44 <UART_Printf>
        uint8_t r;
        uint8_t g;
        uint8_t b;
    } DrawPixelCommand;

    DrawPixelCommand cmd = {
 80009cc:	4a3b      	ldr	r2, [pc, #236]	@ (8000abc <Test_FPGA_Commands+0xfc>)
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009d6:	e883 0003 	stmia.w	r3, {r0, r1}
        .r = 255,
        .g = 0,
        .b = 128
    };

    UART_Printf("Sending DRAW_PIXEL command:\r\n");
 80009da:	4839      	ldr	r0, [pc, #228]	@ (8000ac0 <Test_FPGA_Commands+0x100>)
 80009dc:	f000 f8b2 	bl	8000b44 <UART_Printf>
    UART_Printf("  Cmd=0x%02X, X=%d, Y=%d, RGB=(%d,%d,%d)\r\n",
                cmd.command, 100, 200, cmd.r, cmd.g, cmd.b);
 80009e0:	7a3b      	ldrb	r3, [r7, #8]
    UART_Printf("  Cmd=0x%02X, X=%d, Y=%d, RGB=(%d,%d,%d)\r\n",
 80009e2:	4618      	mov	r0, r3
                cmd.command, 100, 200, cmd.r, cmd.g, cmd.b);
 80009e4:	7b7b      	ldrb	r3, [r7, #13]
 80009e6:	7bba      	ldrb	r2, [r7, #14]
 80009e8:	7bf9      	ldrb	r1, [r7, #15]
    UART_Printf("  Cmd=0x%02X, X=%d, Y=%d, RGB=(%d,%d,%d)\r\n",
 80009ea:	9102      	str	r1, [sp, #8]
 80009ec:	9201      	str	r2, [sp, #4]
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	23c8      	movs	r3, #200	@ 0xc8
 80009f2:	2264      	movs	r2, #100	@ 0x64
 80009f4:	4601      	mov	r1, r0
 80009f6:	4833      	ldr	r0, [pc, #204]	@ (8000ac4 <Test_FPGA_Commands+0x104>)
 80009f8:	f000 f8a4 	bl	8000b44 <UART_Printf>

    // Send command with CS control
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // CS Low
 80009fc:	2200      	movs	r2, #0
 80009fe:	2110      	movs	r1, #16
 8000a00:	4831      	ldr	r0, [pc, #196]	@ (8000ac8 <Test_FPGA_Commands+0x108>)
 8000a02:	f001 fa77 	bl	8001ef4 <HAL_GPIO_WritePin>

    HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi1, (uint8_t*)&cmd, sizeof(cmd), 100);
 8000a06:	f107 0108 	add.w	r1, r7, #8
 8000a0a:	2364      	movs	r3, #100	@ 0x64
 8000a0c:	2208      	movs	r2, #8
 8000a0e:	482f      	ldr	r0, [pc, #188]	@ (8000acc <Test_FPGA_Commands+0x10c>)
 8000a10:	f005 fb2e 	bl	8006070 <HAL_SPI_Transmit>
 8000a14:	4603      	mov	r3, r0
 8000a16:	74fb      	strb	r3, [r7, #19]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);    // CS High
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2110      	movs	r1, #16
 8000a1c:	482a      	ldr	r0, [pc, #168]	@ (8000ac8 <Test_FPGA_Commands+0x108>)
 8000a1e:	f001 fa69 	bl	8001ef4 <HAL_GPIO_WritePin>

    if(status == HAL_OK)
 8000a22:	7cfb      	ldrb	r3, [r7, #19]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d115      	bne.n	8000a54 <Test_FPGA_Commands+0x94>
    {
        UART_Printf("Command sent successfully!\r\n");
 8000a28:	4829      	ldr	r0, [pc, #164]	@ (8000ad0 <Test_FPGA_Commands+0x110>)
 8000a2a:	f000 f88b 	bl	8000b44 <UART_Printf>

        // Flash LED to indicate transmission
        for(int i = 0; i < 3; i++)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	e008      	b.n	8000a46 <Test_FPGA_Commands+0x86>
        {
            BSP_LED_Toggle(LED_GREEN);
 8000a34:	2000      	movs	r0, #0
 8000a36:	f000 fc07 	bl	8001248 <BSP_LED_Toggle>
            HAL_Delay(50);
 8000a3a:	2032      	movs	r0, #50	@ 0x32
 8000a3c:	f000 fe3a 	bl	80016b4 <HAL_Delay>
        for(int i = 0; i < 3; i++)
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	3301      	adds	r3, #1
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	ddf3      	ble.n	8000a34 <Test_FPGA_Commands+0x74>
        }
        BSP_LED_Off(LED_GREEN);
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f000 fbdd 	bl	800120c <BSP_LED_Off>
 8000a52:	e004      	b.n	8000a5e <Test_FPGA_Commands+0x9e>
    }
    else
    {
        UART_Printf("Command failed (status=%d)\r\n", status);
 8000a54:	7cfb      	ldrb	r3, [r7, #19]
 8000a56:	4619      	mov	r1, r3
 8000a58:	481e      	ldr	r0, [pc, #120]	@ (8000ad4 <Test_FPGA_Commands+0x114>)
 8000a5a:	f000 f873 	bl	8000b44 <UART_Printf>
    }

    // Test different commands
    static uint8_t cmd_counter = 0;
    cmd_counter++;
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <Test_FPGA_Commands+0x118>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	3301      	adds	r3, #1
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <Test_FPGA_Commands+0x118>)
 8000a68:	701a      	strb	r2, [r3, #0]

    if(cmd_counter % 3 == 1)
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <Test_FPGA_Commands+0x118>)
 8000a6c:	781a      	ldrb	r2, [r3, #0]
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <Test_FPGA_Commands+0x11c>)
 8000a70:	fba3 1302 	umull	r1, r3, r3, r2
 8000a74:	0859      	lsrs	r1, r3, #1
 8000a76:	460b      	mov	r3, r1
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	440b      	add	r3, r1
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d114      	bne.n	8000aae <Test_FPGA_Commands+0xee>
    {
        // Clear screen command
        uint8_t clear_cmd[] = {0x01, 0x00, 0x00, 0x00};  // CMD_CLEAR_SCREEN
 8000a84:	2301      	movs	r3, #1
 8000a86:	607b      	str	r3, [r7, #4]
        UART_Printf("Sending CLEAR_SCREEN command\r\n");
 8000a88:	4815      	ldr	r0, [pc, #84]	@ (8000ae0 <Test_FPGA_Commands+0x120>)
 8000a8a:	f000 f85b 	bl	8000b44 <UART_Printf>

        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2110      	movs	r1, #16
 8000a92:	480d      	ldr	r0, [pc, #52]	@ (8000ac8 <Test_FPGA_Commands+0x108>)
 8000a94:	f001 fa2e 	bl	8001ef4 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi1, clear_cmd, 4, 100);
 8000a98:	1d39      	adds	r1, r7, #4
 8000a9a:	2364      	movs	r3, #100	@ 0x64
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	480b      	ldr	r0, [pc, #44]	@ (8000acc <Test_FPGA_Commands+0x10c>)
 8000aa0:	f005 fae6 	bl	8006070 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2110      	movs	r1, #16
 8000aa8:	4807      	ldr	r0, [pc, #28]	@ (8000ac8 <Test_FPGA_Commands+0x108>)
 8000aaa:	f001 fa23 	bl	8001ef4 <HAL_GPIO_WritePin>
    }
}
 8000aae:	bf00      	nop
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	08008438 	.word	0x08008438
 8000abc:	08008504 	.word	0x08008504
 8000ac0:	08008458 	.word	0x08008458
 8000ac4:	08008478 	.word	0x08008478
 8000ac8:	42020000 	.word	0x42020000
 8000acc:	2000008c 	.word	0x2000008c
 8000ad0:	080084a4 	.word	0x080084a4
 8000ad4:	080084c4 	.word	0x080084c4
 8000ad8:	200001c2 	.word	0x200001c2
 8000adc:	aaaaaaab 	.word	0xaaaaaaab
 8000ae0:	080084e4 	.word	0x080084e4

08000ae4 <MX_USART1_UART_Init>:


static void MX_USART1_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <MX_USART1_UART_Init+0x58>)
 8000aea:	4a15      	ldr	r2, [pc, #84]	@ (8000b40 <MX_USART1_UART_Init+0x5c>)
 8000aec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aee:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <MX_USART1_UART_Init+0x58>)
 8000af0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000af4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <MX_USART1_UART_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <MX_USART1_UART_Init+0x58>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <MX_USART1_UART_Init+0x58>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <MX_USART1_UART_Init+0x58>)
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b3c <MX_USART1_UART_Init+0x58>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b14:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <MX_USART1_UART_Init+0x58>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <MX_USART1_UART_Init+0x58>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b20:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <MX_USART1_UART_Init+0x58>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b26:	4805      	ldr	r0, [pc, #20]	@ (8000b3c <MX_USART1_UART_Init+0x58>)
 8000b28:	f006 f940 	bl	8006dac <HAL_UART_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b32:	f000 f929 	bl	8000d88 <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2000011c 	.word	0x2000011c
 8000b40:	40013800 	.word	0x40013800

08000b44 <UART_Printf>:

/* UART Printf implementation */
void UART_Printf(const char* format, ...)
{
 8000b44:	b40f      	push	{r0, r1, r2, r3}
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b0c2      	sub	sp, #264	@ 0x108
 8000b4a:	af00      	add	r7, sp, #0
    char buffer[256];
    va_list args;
    va_start(args, format);
 8000b4c:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8000b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000b54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b58:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000b5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b62:	f107 0008 	add.w	r0, r7, #8
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000b6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b70:	f006 fde0 	bl	8007734 <vsniprintf>
    va_end(args);

    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 8000b74:	f107 0308 	add.w	r3, r7, #8
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fb7d 	bl	8000278 <strlen>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	f107 0108 	add.w	r1, r7, #8
 8000b86:	2364      	movs	r3, #100	@ 0x64
 8000b88:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <UART_Printf+0x5c>)
 8000b8a:	f006 f95f 	bl	8006e4c <HAL_UART_Transmit>
}
 8000b8e:	bf00      	nop
 8000b90:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000b94:	46bd      	mov	sp, r7
 8000b96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b9a:	b004      	add	sp, #16
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	2000011c 	.word	0x2000011c

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b09e      	sub	sp, #120	@ 0x78
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0318 	add.w	r3, r7, #24
 8000bae:	2260      	movs	r2, #96	@ 0x60
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f006 fdcc 	bl	8007750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]
 8000bc6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f001 f9f5 	bl	8001fb8 <HAL_PWREx_ControlVoltageScaling>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bd4:	f000 f8d8 	bl	8000d88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000bd8:	2310      	movs	r3, #16
 8000bda:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000be0:	2310      	movs	r3, #16
 8000be2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000be4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bee:	f107 0318 	add.w	r3, r7, #24
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 fabc 	bl	8002170 <HAL_RCC_OscConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000bfe:	f000 f8c3 	bl	8000d88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c02:	231f      	movs	r3, #31
 8000c04:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f002 f982 	bl	8002f28 <HAL_RCC_ClockConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c2a:	f000 f8ad 	bl	8000d88 <Error_Handler>
  }
}
 8000c2e:	bf00      	nop
 8000c30:	3778      	adds	r7, #120	@ 0x78
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000c3a:	2002      	movs	r0, #2
 8000c3c:	f001 fa48 	bl	80020d0 <HAL_PWREx_ConfigSupply>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemPower_Config+0x14>
  {
    Error_Handler();
 8000c46:	f000 f89f 	bl	8000d88 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000c52:	2000      	movs	r0, #0
 8000c54:	f001 f980 	bl	8001f58 <HAL_ICACHE_ConfigAssociativityMode>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000c5e:	f000 f893 	bl	8000d88 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000c62:	f001 f999 	bl	8001f98 <HAL_ICACHE_Enable>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000c6c:	f000 f88c 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c84:	4b31      	ldr	r3, [pc, #196]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000c86:	4a32      	ldr	r2, [pc, #200]	@ (8000d50 <MX_SPI1_Init+0xdc>)
 8000c88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c8a:	4b30      	ldr	r3, [pc, #192]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000c8c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c92:	4b2e      	ldr	r3, [pc, #184]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c98:	4b2c      	ldr	r3, [pc, #176]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000c9a:	2207      	movs	r2, #7
 8000c9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca4:	4b29      	ldr	r3, [pc, #164]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000caa:	4b28      	ldr	r3, [pc, #160]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000cac:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000cb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000cb2:	4b26      	ldr	r3, [pc, #152]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000cb4:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000cb8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cba:	4b24      	ldr	r3, [pc, #144]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000cce:	2207      	movs	r2, #7
 8000cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000cd4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cd8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cec:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000d04:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000d0a:	4b10      	ldr	r3, [pc, #64]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d10:	480e      	ldr	r0, [pc, #56]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000d12:	f005 f897 	bl	8005e44 <HAL_SPI_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 8000d1c:	f000 f834 	bl	8000d88 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000d24:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d28:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	@ (8000d4c <MX_SPI1_Init+0xd8>)
 8000d34:	f005 fff9 	bl	8006d2a <HAL_SPIEx_SetConfigAutonomousMode>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 8000d3e:	f000 f823 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2000008c 	.word	0x2000008c
 8000d50:	40013000 	.word	0x40013000

08000d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <MX_GPIO_Init+0x30>)
 8000d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d60:	4a08      	ldr	r2, [pc, #32]	@ (8000d84 <MX_GPIO_Init+0x30>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <MX_GPIO_Init+0x30>)
 8000d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	46020c00 	.word	0x46020c00

08000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
}
 8000d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <Error_Handler+0x8>

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <HAL_MspInit+0x30>)
 8000d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000da0:	4a08      	ldr	r2, [pc, #32]	@ (8000dc4 <HAL_MspInit+0x30>)
 8000da2:	f043 0304 	orr.w	r3, r3, #4
 8000da6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <HAL_MspInit+0x30>)
 8000dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	46020c00 	.word	0x46020c00

08000dc8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b0ba      	sub	sp, #232	@ 0xe8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	22c0      	movs	r2, #192	@ 0xc0
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f006 fcb1 	bl	8007750 <memset>
  if(hspi->Instance==SPI1)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a27      	ldr	r2, [pc, #156]	@ (8000e90 <HAL_SPI_MspInit+0xc8>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d146      	bne.n	8000e86 <HAL_SPI_MspInit+0xbe>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000df8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8000e04:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4618      	mov	r0, r3
 8000e12:	f002 fc59 	bl	80036c8 <HAL_RCCEx_PeriphCLKConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8000e1c:	f7ff ffb4 	bl	8000d88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e20:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <HAL_SPI_MspInit+0xcc>)
 8000e22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e26:	4a1b      	ldr	r2, [pc, #108]	@ (8000e94 <HAL_SPI_MspInit+0xcc>)
 8000e28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e2c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000e30:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <HAL_SPI_MspInit+0xcc>)
 8000e32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <HAL_SPI_MspInit+0xcc>)
 8000e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e44:	4a13      	ldr	r2, [pc, #76]	@ (8000e94 <HAL_SPI_MspInit+0xcc>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e4e:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <HAL_SPI_MspInit+0xcc>)
 8000e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000e5c:	23c2      	movs	r3, #194	@ 0xc2
 8000e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e74:	2305      	movs	r3, #5
 8000e76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4805      	ldr	r0, [pc, #20]	@ (8000e98 <HAL_SPI_MspInit+0xd0>)
 8000e82:	f000 fe57 	bl	8001b34 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e86:	bf00      	nop
 8000e88:	37e8      	adds	r7, #232	@ 0xe8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40013000 	.word	0x40013000
 8000e94:	46020c00 	.word	0x46020c00
 8000e98:	42020000 	.word	0x42020000

08000e9c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b0bc      	sub	sp, #240	@ 0xf0
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb4:	f107 0318 	add.w	r3, r7, #24
 8000eb8:	22c0      	movs	r2, #192	@ 0xc0
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f006 fc47 	bl	8007750 <memset>
  if(huart->Instance==USART3)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a39      	ldr	r2, [pc, #228]	@ (8000fac <HAL_UART_MspInit+0x110>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d16a      	bne.n	8000fa2 <HAL_UART_MspInit+0x106>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ecc:	f04f 0204 	mov.w	r2, #4
 8000ed0:	f04f 0300 	mov.w	r3, #0
 8000ed4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000edc:	f107 0318 	add.w	r3, r7, #24
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f002 fbf1 	bl	80036c8 <HAL_RCCEx_PeriphCLKConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000eec:	f7ff ff4c 	bl	8000d88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb0 <HAL_UART_MspInit+0x114>)
 8000ef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ef6:	4a2e      	ldr	r2, [pc, #184]	@ (8000fb0 <HAL_UART_MspInit+0x114>)
 8000ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000efc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000f00:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb0 <HAL_UART_MspInit+0x114>)
 8000f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	4b28      	ldr	r3, [pc, #160]	@ (8000fb0 <HAL_UART_MspInit+0x114>)
 8000f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f14:	4a26      	ldr	r2, [pc, #152]	@ (8000fb0 <HAL_UART_MspInit+0x114>)
 8000f16:	f043 0302 	orr.w	r3, r3, #2
 8000f1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f1e:	4b24      	ldr	r3, [pc, #144]	@ (8000fb0 <HAL_UART_MspInit+0x114>)
 8000f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2c:	4b20      	ldr	r3, [pc, #128]	@ (8000fb0 <HAL_UART_MspInit+0x114>)
 8000f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f32:	4a1f      	ldr	r2, [pc, #124]	@ (8000fb0 <HAL_UART_MspInit+0x114>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb0 <HAL_UART_MspInit+0x114>)
 8000f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f64:	2307      	movs	r3, #7
 8000f66:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4810      	ldr	r0, [pc, #64]	@ (8000fb4 <HAL_UART_MspInit+0x118>)
 8000f72:	f000 fddf 	bl	8001b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f76:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f90:	2307      	movs	r3, #7
 8000f92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f96:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4806      	ldr	r0, [pc, #24]	@ (8000fb8 <HAL_UART_MspInit+0x11c>)
 8000f9e:	f000 fdc9 	bl	8001b34 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000fa2:	bf00      	nop
 8000fa4:	37f0      	adds	r7, #240	@ 0xf0
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40004800 	.word	0x40004800
 8000fb0:	46020c00 	.word	0x46020c00
 8000fb4:	42020400 	.word	0x42020400
 8000fb8:	42020800 	.word	0x42020800

08000fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <NMI_Handler+0x4>

08000fc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001012:	f000 fb2f 	bl	8001674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}

0800101a <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800101e:	2000      	movs	r0, #0
 8001020:	f000 f9a8 	bl	8001374 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001030:	4a14      	ldr	r2, [pc, #80]	@ (8001084 <_sbrk+0x5c>)
 8001032:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <_sbrk+0x60>)
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800103c:	4b13      	ldr	r3, [pc, #76]	@ (800108c <_sbrk+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <_sbrk+0x64>)
 8001046:	4a12      	ldr	r2, [pc, #72]	@ (8001090 <_sbrk+0x68>)
 8001048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	429a      	cmp	r2, r3
 8001056:	d207      	bcs.n	8001068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001058:	f006 fb82 	bl	8007760 <__errno>
 800105c:	4603      	mov	r3, r0
 800105e:	220c      	movs	r2, #12
 8001060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001062:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001066:	e009      	b.n	800107c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001068:	4b08      	ldr	r3, [pc, #32]	@ (800108c <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	4a05      	ldr	r2, [pc, #20]	@ (800108c <_sbrk+0x64>)
 8001078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107a:	68fb      	ldr	r3, [r7, #12]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20040000 	.word	0x20040000
 8001088:	00000400 	.word	0x00000400
 800108c:	200001c4 	.word	0x200001c4
 8001090:	200003b8 	.word	0x200003b8

08001094 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001098:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <SystemInit+0x68>)
 800109a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800109e:	4a17      	ldr	r2, [pc, #92]	@ (80010fc <SystemInit+0x68>)
 80010a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80010a8:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <SystemInit+0x6c>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80010ae:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <SystemInit+0x6c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <SystemInit+0x6c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80010ba:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <SystemInit+0x6c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80010c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <SystemInit+0x6c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001100 <SystemInit+0x6c>)
 80010c6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80010ca:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80010ce:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80010d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <SystemInit+0x6c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80010d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <SystemInit+0x6c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a09      	ldr	r2, [pc, #36]	@ (8001100 <SystemInit+0x6c>)
 80010dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <SystemInit+0x6c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010e8:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <SystemInit+0x68>)
 80010ea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010ee:	609a      	str	r2, [r3, #8]
  #endif
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00
 8001100:	46020c00 	.word	0x46020c00

08001104 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001104:	480d      	ldr	r0, [pc, #52]	@ (800113c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001106:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001108:	f7ff ffc4 	bl	8001094 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800110c:	480c      	ldr	r0, [pc, #48]	@ (8001140 <LoopForever+0x6>)
  ldr r1, =_edata
 800110e:	490d      	ldr	r1, [pc, #52]	@ (8001144 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001110:	4a0d      	ldr	r2, [pc, #52]	@ (8001148 <LoopForever+0xe>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001114:	e002      	b.n	800111c <LoopCopyDataInit>

08001116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111a:	3304      	adds	r3, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800111c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001120:	d3f9      	bcc.n	8001116 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001122:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001124:	4c0a      	ldr	r4, [pc, #40]	@ (8001150 <LoopForever+0x16>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001128:	e001      	b.n	800112e <LoopFillZerobss>

0800112a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800112c:	3204      	adds	r2, #4

0800112e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001130:	d3fb      	bcc.n	800112a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001132:	f006 fb1b 	bl	800776c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001136:	f7ff fa65 	bl	8000604 <main>

0800113a <LoopForever>:

LoopForever:
    b LoopForever
 800113a:	e7fe      	b.n	800113a <LoopForever>
  ldr   r0, =_estack
 800113c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001144:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001148:	080086b0 	.word	0x080086b0
  ldr r2, =_sbss
 800114c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001150:	200003b4 	.word	0x200003b4

08001154 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC1_IRQHandler>
	...

08001158 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	@ 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <BSP_LED_Init+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800116c:	f06f 0301 	mvn.w	r3, #1
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
 8001172:	e023      	b.n	80011bc <BSP_LED_Init+0x64>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10e      	bne.n	8001198 <BSP_LED_Init+0x40>
    {
      LED2_GPIO_CLK_ENABLE();
 800117a:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <BSP_LED_Init+0x70>)
 800117c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001180:	4a11      	ldr	r2, [pc, #68]	@ (80011c8 <BSP_LED_Init+0x70>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800118a:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <BSP_LED_Init+0x70>)
 800118c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]

      LED3_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001198:	2320      	movs	r3, #32
 800119a:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	4a08      	ldr	r2, [pc, #32]	@ (80011cc <BSP_LED_Init+0x74>)
 80011ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b0:	f107 0210 	add.w	r2, r7, #16
 80011b4:	4611      	mov	r1, r2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 fcbc 	bl	8001b34 <HAL_GPIO_Init>
  }

  return ret;
 80011bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3728      	adds	r7, #40	@ 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	46020c00 	.word	0x46020c00
 80011cc:	20000008 	.word	0x20000008

080011d0 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <BSP_LED_On+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80011e4:	f06f 0301 	mvn.w	r3, #1
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	e008      	b.n	80011fe <BSP_LED_On+0x2e>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	4a06      	ldr	r2, [pc, #24]	@ (8001208 <BSP_LED_On+0x38>)
 80011f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f4:	2120      	movs	r1, #32
 80011f6:	2201      	movs	r2, #1
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fe7b 	bl	8001ef4 <HAL_GPIO_WritePin>
  }

  return ret;
 80011fe:	68fb      	ldr	r3, [r7, #12]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000008 	.word	0x20000008

0800120c <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <BSP_LED_Off+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001220:	f06f 0301 	mvn.w	r3, #1
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	e008      	b.n	800123a <BSP_LED_Off+0x2e>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	4a06      	ldr	r2, [pc, #24]	@ (8001244 <BSP_LED_Off+0x38>)
 800122c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001230:	2120      	movs	r1, #32
 8001232:	2200      	movs	r2, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f000 fe5d 	bl	8001ef4 <HAL_GPIO_WritePin>
  }

  return ret;
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000008 	.word	0x20000008

08001248 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <BSP_LED_Toggle+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800125c:	f06f 0301 	mvn.w	r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	e008      	b.n	8001276 <BSP_LED_Toggle+0x2e>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	4a06      	ldr	r2, [pc, #24]	@ (8001280 <BSP_LED_Toggle+0x38>)
 8001268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126c:	2220      	movs	r2, #32
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f000 fe57 	bl	8001f24 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001276:	68fb      	ldr	r3, [r7, #12]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000008 	.word	0x20000008

08001284 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	460a      	mov	r2, r1
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	4613      	mov	r3, r2
 8001292:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001294:	4b30      	ldr	r3, [pc, #192]	@ (8001358 <BSP_PB_Init+0xd4>)
 8001296:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800129a:	4a2f      	ldr	r2, [pc, #188]	@ (8001358 <BSP_PB_Init+0xd4>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001358 <BSP_PB_Init+0xd4>)
 80012a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80012b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012b6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80012b8:	2302      	movs	r3, #2
 80012ba:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80012bc:	2302      	movs	r3, #2
 80012be:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80012c0:	79bb      	ldrb	r3, [r7, #6]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10c      	bne.n	80012e0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	4a23      	ldr	r2, [pc, #140]	@ (800135c <BSP_PB_Init+0xd8>)
 80012ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d2:	f107 020c 	add.w	r2, r7, #12
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fc2b 	bl	8001b34 <HAL_GPIO_Init>
 80012de:	e036      	b.n	800134e <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80012e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001360 <BSP_PB_Init+0xdc>)
 80012e2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	4a1d      	ldr	r2, [pc, #116]	@ (800135c <BSP_PB_Init+0xd8>)
 80012e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ec:	f107 020c 	add.w	r2, r7, #12
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 fc1e 	bl	8001b34 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80012f8:	79fa      	ldrb	r2, [r7, #7]
 80012fa:	4613      	mov	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4a18      	ldr	r2, [pc, #96]	@ (8001364 <BSP_PB_Init+0xe0>)
 8001304:	441a      	add	r2, r3
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	4917      	ldr	r1, [pc, #92]	@ (8001368 <BSP_PB_Init+0xe4>)
 800130a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800130e:	4619      	mov	r1, r3
 8001310:	4610      	mov	r0, r2
 8001312:	f000 fbb3 	bl	8001a7c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001316:	79fa      	ldrb	r2, [r7, #7]
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4a10      	ldr	r2, [pc, #64]	@ (8001364 <BSP_PB_Init+0xe0>)
 8001322:	1898      	adds	r0, r3, r2
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	4a11      	ldr	r2, [pc, #68]	@ (800136c <BSP_PB_Init+0xe8>)
 8001328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132c:	461a      	mov	r2, r3
 800132e:	2100      	movs	r1, #0
 8001330:	f000 fb78 	bl	8001a24 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001334:	2018      	movs	r0, #24
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	4a0d      	ldr	r2, [pc, #52]	@ (8001370 <BSP_PB_Init+0xec>)
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	2200      	movs	r2, #0
 8001340:	4619      	mov	r1, r3
 8001342:	f000 fa93 	bl	800186c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001346:	2318      	movs	r3, #24
 8001348:	4618      	mov	r0, r3
 800134a:	f000 faa9 	bl	80018a0 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3720      	adds	r7, #32
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	46020c00 	.word	0x46020c00
 800135c:	2000000c 	.word	0x2000000c
 8001360:	10110000 	.word	0x10110000
 8001364:	200001c8 	.word	0x200001c8
 8001368:	080085d0 	.word	0x080085d0
 800136c:	20000010 	.word	0x20000010
 8001370:	20000014 	.word	0x20000014

08001374 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800137e:	79fa      	ldrb	r2, [r7, #7]
 8001380:	4613      	mov	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4a04      	ldr	r2, [pc, #16]	@ (800139c <BSP_PB_IRQHandler+0x28>)
 800138a:	4413      	add	r3, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f000 fb89 	bl	8001aa4 <HAL_EXTI_IRQHandler>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200001c8 	.word	0x200001c8

080013a0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80013b6:	f06f 0301 	mvn.w	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	e018      	b.n	80013f0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2294      	movs	r2, #148	@ 0x94
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	4a0d      	ldr	r2, [pc, #52]	@ (80013fc <BSP_COM_Init+0x5c>)
 80013c8:	4413      	add	r3, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 f854 	bl	8001478 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	2294      	movs	r2, #148	@ 0x94
 80013d4:	fb02 f303 	mul.w	r3, r2, r3
 80013d8:	4a08      	ldr	r2, [pc, #32]	@ (80013fc <BSP_COM_Init+0x5c>)
 80013da:	4413      	add	r3, r2
 80013dc:	6839      	ldr	r1, [r7, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f80e 	bl	8001400 <MX_USART1_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d002      	beq.n	80013f0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80013ea:	f06f 0303 	mvn.w	r3, #3
 80013ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80013f0:	68fb      	ldr	r3, [r7, #12]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200001d4 	.word	0x200001d4

08001400 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 800140a:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <MX_USART1_Init+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	220c      	movs	r2, #12
 800141e:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	895b      	ldrh	r3, [r3, #10]
 8001424:	461a      	mov	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	891b      	ldrh	r3, [r3, #8]
 8001436:	461a      	mov	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	899b      	ldrh	r3, [r3, #12]
 8001440:	461a      	mov	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800144c:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f005 fca9 	bl	8006dac <HAL_UART_Init>
 800145a:	4603      	mov	r3, r0
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000004 	.word	0x20000004

08001468 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800146c:	2000      	movs	r0, #0
 800146e:	f7ff f94b 	bl	8000708 <BSP_PB_Callback>
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	@ 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001480:	4b27      	ldr	r3, [pc, #156]	@ (8001520 <COM1_MspInit+0xa8>)
 8001482:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001486:	4a26      	ldr	r2, [pc, #152]	@ (8001520 <COM1_MspInit+0xa8>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001490:	4b23      	ldr	r3, [pc, #140]	@ (8001520 <COM1_MspInit+0xa8>)
 8001492:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800149e:	4b20      	ldr	r3, [pc, #128]	@ (8001520 <COM1_MspInit+0xa8>)
 80014a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001520 <COM1_MspInit+0xa8>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001520 <COM1_MspInit+0xa8>)
 80014b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80014bc:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <COM1_MspInit+0xa8>)
 80014be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014c2:	4a17      	ldr	r2, [pc, #92]	@ (8001520 <COM1_MspInit+0xa8>)
 80014c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014c8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80014cc:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <COM1_MspInit+0xa8>)
 80014ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80014da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014de:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80014e4:	2302      	movs	r3, #2
 80014e6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80014e8:	2301      	movs	r3, #1
 80014ea:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80014ec:	2307      	movs	r3, #7
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	480b      	ldr	r0, [pc, #44]	@ (8001524 <COM1_MspInit+0xac>)
 80014f8:	f000 fb1c 	bl	8001b34 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 80014fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001500:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001506:	2307      	movs	r3, #7
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	4804      	ldr	r0, [pc, #16]	@ (8001524 <COM1_MspInit+0xac>)
 8001512:	f000 fb0f 	bl	8001b34 <HAL_GPIO_Init>
}
 8001516:	bf00      	nop
 8001518:	3728      	adds	r7, #40	@ 0x28
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	46020c00 	.word	0x46020c00
 8001524:	42020000 	.word	0x42020000

08001528 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800152c:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <HAL_Init+0x50>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a11      	ldr	r2, [pc, #68]	@ (8001578 <HAL_Init+0x50>)
 8001532:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001536:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001538:	2003      	movs	r0, #3
 800153a:	f000 f98c 	bl	8001856 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800153e:	f001 fee5 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8001542:	4602      	mov	r2, r0
 8001544:	4b0d      	ldr	r3, [pc, #52]	@ (800157c <HAL_Init+0x54>)
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	f003 030f 	and.w	r3, r3, #15
 800154c:	490c      	ldr	r1, [pc, #48]	@ (8001580 <HAL_Init+0x58>)
 800154e:	5ccb      	ldrb	r3, [r1, r3]
 8001550:	fa22 f303 	lsr.w	r3, r2, r3
 8001554:	4a0b      	ldr	r2, [pc, #44]	@ (8001584 <HAL_Init+0x5c>)
 8001556:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001558:	2004      	movs	r0, #4
 800155a:	f000 f9d1 	bl	8001900 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800155e:	200f      	movs	r0, #15
 8001560:	f000 f812 	bl	8001588 <HAL_InitTick>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e002      	b.n	8001574 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800156e:	f7ff fc11 	bl	8000d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40022000 	.word	0x40022000
 800157c:	46020c00 	.word	0x46020c00
 8001580:	08008578 	.word	0x08008578
 8001584:	20000000 	.word	0x20000000

08001588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001594:	4b33      	ldr	r3, [pc, #204]	@ (8001664 <HAL_InitTick+0xdc>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e05c      	b.n	800165a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80015a0:	4b31      	ldr	r3, [pc, #196]	@ (8001668 <HAL_InitTick+0xe0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d10c      	bne.n	80015c6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80015ac:	4b2f      	ldr	r3, [pc, #188]	@ (800166c <HAL_InitTick+0xe4>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001664 <HAL_InitTick+0xdc>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	e037      	b.n	8001636 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80015c6:	f000 f9f3 	bl	80019b0 <HAL_SYSTICK_GetCLKSourceConfig>
 80015ca:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d023      	beq.n	800161a <HAL_InitTick+0x92>
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d82d      	bhi.n	8001634 <HAL_InitTick+0xac>
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_InitTick+0x5e>
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d00d      	beq.n	8001600 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80015e4:	e026      	b.n	8001634 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80015e6:	4b21      	ldr	r3, [pc, #132]	@ (800166c <HAL_InitTick+0xe4>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001664 <HAL_InitTick+0xdc>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	4619      	mov	r1, r3
 80015f0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80015f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fc:	60fb      	str	r3, [r7, #12]
        break;
 80015fe:	e01a      	b.n	8001636 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001600:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <HAL_InitTick+0xdc>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800160a:	fbb3 f3f2 	udiv	r3, r3, r2
 800160e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	60fb      	str	r3, [r7, #12]
        break;
 8001618:	e00d      	b.n	8001636 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800161a:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <HAL_InitTick+0xdc>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001624:	fbb3 f3f2 	udiv	r3, r3, r2
 8001628:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800162c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001630:	60fb      	str	r3, [r7, #12]
        break;
 8001632:	e000      	b.n	8001636 <HAL_InitTick+0xae>
        break;
 8001634:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f000 f940 	bl	80018bc <HAL_SYSTICK_Config>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e009      	b.n	800165a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001646:	2200      	movs	r2, #0
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800164e:	f000 f90d 	bl	800186c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001652:	4a07      	ldr	r2, [pc, #28]	@ (8001670 <HAL_InitTick+0xe8>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	2000001c 	.word	0x2000001c
 8001668:	e000e010 	.word	0xe000e010
 800166c:	20000000 	.word	0x20000000
 8001670:	20000018 	.word	0x20000018

08001674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_IncTick+0x20>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <HAL_IncTick+0x24>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4413      	add	r3, r2
 8001684:	4a04      	ldr	r2, [pc, #16]	@ (8001698 <HAL_IncTick+0x24>)
 8001686:	6013      	str	r3, [r2, #0]
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	2000001c 	.word	0x2000001c
 8001698:	20000268 	.word	0x20000268

0800169c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return uwTick;
 80016a0:	4b03      	ldr	r3, [pc, #12]	@ (80016b0 <HAL_GetTick+0x14>)
 80016a2:	681b      	ldr	r3, [r3, #0]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	20000268 	.word	0x20000268

080016b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016bc:	f7ff ffee 	bl	800169c <HAL_GetTick>
 80016c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016cc:	d005      	beq.n	80016da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ce:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <HAL_Delay+0x44>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	461a      	mov	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4413      	add	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016da:	bf00      	nop
 80016dc:	f7ff ffde 	bl	800169c <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d8f7      	bhi.n	80016dc <HAL_Delay+0x28>
  {
  }
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2000001c 	.word	0x2000001c

080016fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <__NVIC_SetPriorityGrouping+0x44>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001718:	4013      	ands	r3, r2
 800171a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001724:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800172c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172e:	4a04      	ldr	r2, [pc, #16]	@ (8001740 <__NVIC_SetPriorityGrouping+0x44>)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	60d3      	str	r3, [r2, #12]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001748:	4b04      	ldr	r3, [pc, #16]	@ (800175c <__NVIC_GetPriorityGrouping+0x18>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	0a1b      	lsrs	r3, r3, #8
 800174e:	f003 0307 	and.w	r3, r3, #7
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	2b00      	cmp	r3, #0
 8001770:	db0b      	blt.n	800178a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	f003 021f 	and.w	r2, r3, #31
 8001778:	4907      	ldr	r1, [pc, #28]	@ (8001798 <__NVIC_EnableIRQ+0x38>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	095b      	lsrs	r3, r3, #5
 8001780:	2001      	movs	r0, #1
 8001782:	fa00 f202 	lsl.w	r2, r0, r2
 8001786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000e100 	.word	0xe000e100

0800179c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	db0a      	blt.n	80017c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	490c      	ldr	r1, [pc, #48]	@ (80017e8 <__NVIC_SetPriority+0x4c>)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	0112      	lsls	r2, r2, #4
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	440b      	add	r3, r1
 80017c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c4:	e00a      	b.n	80017dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4908      	ldr	r1, [pc, #32]	@ (80017ec <__NVIC_SetPriority+0x50>)
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	3b04      	subs	r3, #4
 80017d4:	0112      	lsls	r2, r2, #4
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	440b      	add	r3, r1
 80017da:	761a      	strb	r2, [r3, #24]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000e100 	.word	0xe000e100
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	@ 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f1c3 0307 	rsb	r3, r3, #7
 800180a:	2b04      	cmp	r3, #4
 800180c:	bf28      	it	cs
 800180e:	2304      	movcs	r3, #4
 8001810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3304      	adds	r3, #4
 8001816:	2b06      	cmp	r3, #6
 8001818:	d902      	bls.n	8001820 <NVIC_EncodePriority+0x30>
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3b03      	subs	r3, #3
 800181e:	e000      	b.n	8001822 <NVIC_EncodePriority+0x32>
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43da      	mvns	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	401a      	ands	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001838:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	43d9      	mvns	r1, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	4313      	orrs	r3, r2
         );
}
 800184a:	4618      	mov	r0, r3
 800184c:	3724      	adds	r7, #36	@ 0x24
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ff4c 	bl	80016fc <__NVIC_SetPriorityGrouping>
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800187a:	f7ff ff63 	bl	8001744 <__NVIC_GetPriorityGrouping>
 800187e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	68b9      	ldr	r1, [r7, #8]
 8001884:	6978      	ldr	r0, [r7, #20]
 8001886:	f7ff ffb3 	bl	80017f0 <NVIC_EncodePriority>
 800188a:	4602      	mov	r2, r0
 800188c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001890:	4611      	mov	r1, r2
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff ff82 	bl	800179c <__NVIC_SetPriority>
}
 8001898:	bf00      	nop
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ff56 	bl	8001760 <__NVIC_EnableIRQ>
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018cc:	d301      	bcc.n	80018d2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00d      	b.n	80018ee <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80018d2:	4a0a      	ldr	r2, [pc, #40]	@ (80018fc <HAL_SYSTICK_Config+0x40>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80018da:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <HAL_SYSTICK_Config+0x40>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <HAL_SYSTICK_Config+0x40>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a05      	ldr	r2, [pc, #20]	@ (80018fc <HAL_SYSTICK_Config+0x40>)
 80018e6:	f043 0303 	orr.w	r3, r3, #3
 80018ea:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e010 	.word	0xe000e010

08001900 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b04      	cmp	r3, #4
 800190c:	d844      	bhi.n	8001998 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800190e:	a201      	add	r2, pc, #4	@ (adr r2, 8001914 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	08001937 	.word	0x08001937
 8001918:	08001955 	.word	0x08001955
 800191c:	08001977 	.word	0x08001977
 8001920:	08001999 	.word	0x08001999
 8001924:	08001929 	.word	0x08001929
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001928:	4b1f      	ldr	r3, [pc, #124]	@ (80019a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a1e      	ldr	r2, [pc, #120]	@ (80019a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800192e:	f043 0304 	orr.w	r3, r3, #4
 8001932:	6013      	str	r3, [r2, #0]
      break;
 8001934:	e031      	b.n	800199a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001936:	4b1c      	ldr	r3, [pc, #112]	@ (80019a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a1b      	ldr	r2, [pc, #108]	@ (80019a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800193c:	f023 0304 	bic.w	r3, r3, #4
 8001940:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001942:	4b1a      	ldr	r3, [pc, #104]	@ (80019ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001948:	4a18      	ldr	r2, [pc, #96]	@ (80019ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800194a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800194e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001952:	e022      	b.n	800199a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001954:	4b14      	ldr	r3, [pc, #80]	@ (80019a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a13      	ldr	r2, [pc, #76]	@ (80019a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800195a:	f023 0304 	bic.w	r3, r3, #4
 800195e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001960:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001966:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800196a:	4a10      	ldr	r2, [pc, #64]	@ (80019ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800196c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001970:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001974:	e011      	b.n	800199a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001976:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a0b      	ldr	r2, [pc, #44]	@ (80019a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800197c:	f023 0304 	bic.w	r3, r3, #4
 8001980:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001982:	4b0a      	ldr	r3, [pc, #40]	@ (80019ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001988:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800198c:	4a07      	ldr	r2, [pc, #28]	@ (80019ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800198e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001992:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001996:	e000      	b.n	800199a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001998:	bf00      	nop
  }
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000e010 	.word	0xe000e010
 80019ac:	46020c00 	.word	0x46020c00

080019b0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80019b6:	4b19      	ldr	r3, [pc, #100]	@ (8001a1c <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80019c2:	2304      	movs	r3, #4
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	e021      	b.n	8001a0c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80019c8:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80019ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ce:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80019d2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80019da:	d011      	beq.n	8001a00 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80019e2:	d810      	bhi.n	8001a06 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d004      	beq.n	80019f4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019f0:	d003      	beq.n	80019fa <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80019f2:	e008      	b.n	8001a06 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80019f4:	2300      	movs	r3, #0
 80019f6:	607b      	str	r3, [r7, #4]
        break;
 80019f8:	e008      	b.n	8001a0c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80019fa:	2301      	movs	r3, #1
 80019fc:	607b      	str	r3, [r7, #4]
        break;
 80019fe:	e005      	b.n	8001a0c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001a00:	2302      	movs	r3, #2
 8001a02:	607b      	str	r3, [r7, #4]
        break;
 8001a04:	e002      	b.n	8001a0c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
        break;
 8001a0a:	bf00      	nop
    }
  }
  return systick_source;
 8001a0c:	687b      	ldr	r3, [r7, #4]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000e010 	.word	0xe000e010
 8001a20:	46020c00 	.word	0x46020c00

08001a24 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001a24:	b480      	push	{r7}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	607a      	str	r2, [r7, #4]
 8001a30:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001a36:	7afb      	ldrb	r3, [r7, #11]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d011      	beq.n	8001a60 <HAL_EXTI_RegisterCallback+0x3c>
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	dc13      	bgt.n	8001a68 <HAL_EXTI_RegisterCallback+0x44>
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <HAL_EXTI_RegisterCallback+0x26>
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d007      	beq.n	8001a58 <HAL_EXTI_RegisterCallback+0x34>
 8001a48:	e00e      	b.n	8001a68 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	609a      	str	r2, [r3, #8]
      break;
 8001a56:	e00a      	b.n	8001a6e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	605a      	str	r2, [r3, #4]
      break;
 8001a5e:	e006      	b.n	8001a6e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	609a      	str	r2, [r3, #8]
      break;
 8001a66:	e002      	b.n	8001a6e <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8001a6c:	bf00      	nop
  }

  return status;
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	371c      	adds	r7, #28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e003      	b.n	8001a98 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001a96:	2300      	movs	r3, #0
  }
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	0c1b      	lsrs	r3, r3, #16
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 031f 	and.w	r3, r3, #31
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	015a      	lsls	r2, r3, #5
 8001acc:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <HAL_EXTI_IRQHandler+0x88>)
 8001ace:	4413      	add	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d009      	beq.n	8001af6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d002      	beq.n	8001af6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	015a      	lsls	r2, r3, #5
 8001afa:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <HAL_EXTI_IRQHandler+0x8c>)
 8001afc:	4413      	add	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d009      	beq.n	8001b24 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	4798      	blx	r3
    }
  }
}
 8001b24:	bf00      	nop
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	4602200c 	.word	0x4602200c
 8001b30:	46022010 	.word	0x46022010

08001b34 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	@ 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001b46:	e1c2      	b.n	8001ece <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	fa01 f303 	lsl.w	r3, r1, r3
 8001b54:	4013      	ands	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 81b2 	beq.w	8001ec8 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a55      	ldr	r2, [pc, #340]	@ (8001cbc <HAL_GPIO_Init+0x188>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d15d      	bne.n	8001c28 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001b72:	2201      	movs	r2, #1
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69fa      	ldr	r2, [r7, #28]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0201 	and.w	r2, r3, #1
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69fa      	ldr	r2, [r7, #28]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69fa      	ldr	r2, [r7, #28]
 8001b9a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001b9c:	4a48      	ldr	r2, [pc, #288]	@ (8001cc0 <HAL_GPIO_Init+0x18c>)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001ba4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001ba6:	4a46      	ldr	r2, [pc, #280]	@ (8001cc0 <HAL_GPIO_Init+0x18c>)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4413      	add	r3, r2
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	08da      	lsrs	r2, r3, #3
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	3208      	adds	r2, #8
 8001bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bbe:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	220f      	movs	r2, #15
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69fa      	ldr	r2, [r7, #28]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	220b      	movs	r2, #11
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69fa      	ldr	r2, [r7, #28]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	08da      	lsrs	r2, r3, #3
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	3208      	adds	r2, #8
 8001bf2:	69f9      	ldr	r1, [r7, #28]
 8001bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	2203      	movs	r2, #3
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	2202      	movs	r2, #2
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	69fa      	ldr	r2, [r7, #28]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	e067      	b.n	8001cf8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x104>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b12      	cmp	r3, #18
 8001c36:	d145      	bne.n	8001cc4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	08da      	lsrs	r2, r3, #3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3208      	adds	r2, #8
 8001c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c44:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	220f      	movs	r2, #15
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	f003 020f 	and.w	r2, r3, #15
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69fa      	ldr	r2, [r7, #28]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	08da      	lsrs	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3208      	adds	r2, #8
 8001c7e:	69f9      	ldr	r1, [r7, #28]
 8001c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	2203      	movs	r2, #3
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69fa      	ldr	r2, [r7, #28]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0203 	and.w	r2, r3, #3
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69fa      	ldr	r2, [r7, #28]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	69fa      	ldr	r2, [r7, #28]
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	e01e      	b.n	8001cf8 <HAL_GPIO_Init+0x1c4>
 8001cba:	bf00      	nop
 8001cbc:	46020000 	.word	0x46020000
 8001cc0:	080085d4 	.word	0x080085d4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	2203      	movs	r2, #3
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0203 	and.w	r2, r3, #3
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	69fa      	ldr	r2, [r7, #28]
 8001cf6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d00b      	beq.n	8001d18 <HAL_GPIO_Init+0x1e4>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d007      	beq.n	8001d18 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d0c:	2b11      	cmp	r3, #17
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b12      	cmp	r3, #18
 8001d16:	d130      	bne.n	8001d7a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	2203      	movs	r2, #3
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69fa      	ldr	r2, [r7, #28]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69fa      	ldr	r2, [r7, #28]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	69fa      	ldr	r2, [r7, #28]
 8001d46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001d4e:	2201      	movs	r2, #1
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69fa      	ldr	r2, [r7, #28]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	091b      	lsrs	r3, r3, #4
 8001d64:	f003 0201 	and.w	r2, r3, #1
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d107      	bne.n	8001d92 <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d11b      	bne.n	8001dc2 <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d017      	beq.n	8001dc2 <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69fa      	ldr	r2, [r7, #28]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	69fa      	ldr	r2, [r7, #28]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	69fa      	ldr	r2, [r7, #28]
 8001dc0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d07c      	beq.n	8001ec8 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001dce:	4a47      	ldr	r2, [pc, #284]	@ (8001eec <HAL_GPIO_Init+0x3b8>)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	3318      	adds	r3, #24
 8001dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dda:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	220f      	movs	r2, #15
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69fa      	ldr	r2, [r7, #28]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	0a9a      	lsrs	r2, r3, #10
 8001df6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ef0 <HAL_GPIO_Init+0x3bc>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	f002 0203 	and.w	r2, r2, #3
 8001e00:	00d2      	lsls	r2, r2, #3
 8001e02:	4093      	lsls	r3, r2
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001e0a:	4938      	ldr	r1, [pc, #224]	@ (8001eec <HAL_GPIO_Init+0x3b8>)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	3318      	adds	r3, #24
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001e18:	4b34      	ldr	r3, [pc, #208]	@ (8001eec <HAL_GPIO_Init+0x3b8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 8001e34:	69fa      	ldr	r2, [r7, #28]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001e3c:	4a2b      	ldr	r2, [pc, #172]	@ (8001eec <HAL_GPIO_Init+0x3b8>)
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001e42:	4b2a      	ldr	r3, [pc, #168]	@ (8001eec <HAL_GPIO_Init+0x3b8>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001e66:	4a21      	ldr	r2, [pc, #132]	@ (8001eec <HAL_GPIO_Init+0x3b8>)
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001eec <HAL_GPIO_Init+0x3b8>)
 8001e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e72:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69fa      	ldr	r2, [r7, #28]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001e92:	4a16      	ldr	r2, [pc, #88]	@ (8001eec <HAL_GPIO_Init+0x3b8>)
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001e9a:	4b14      	ldr	r3, [pc, #80]	@ (8001eec <HAL_GPIO_Init+0x3b8>)
 8001e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ea0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69fa      	ldr	r2, [r7, #28]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 8001eb8:	69fa      	ldr	r2, [r7, #28]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8001eec <HAL_GPIO_Init+0x3b8>)
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f47f ae35 	bne.w	8001b48 <HAL_GPIO_Init+0x14>
  }
}
 8001ede:	bf00      	nop
 8001ee0:	bf00      	nop
 8001ee2:	3724      	adds	r7, #36	@ 0x24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	46022000 	.word	0x46022000
 8001ef0:	002f7f7f 	.word	0x002f7f7f

08001ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	807b      	strh	r3, [r7, #2]
 8001f00:	4613      	mov	r3, r2
 8001f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f04:	787b      	ldrb	r3, [r7, #1]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f0a:	887a      	ldrh	r2, [r7, #2]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001f10:	e002      	b.n	8001f18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001f12:	887a      	ldrh	r2, [r7, #2]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	041a      	lsls	r2, r3, #16
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	43d9      	mvns	r1, r3
 8001f42:	887b      	ldrh	r3, [r7, #2]
 8001f44:	400b      	ands	r3, r1
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	619a      	str	r2, [r3, #24]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001f64:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	e007      	b.n	8001f86 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001f76:	4b07      	ldr	r3, [pc, #28]	@ (8001f94 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 0204 	bic.w	r2, r3, #4
 8001f7e:	4905      	ldr	r1, [pc, #20]	@ (8001f94 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	40030400 	.word	0x40030400

08001f98 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001f9c:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <HAL_ICACHE_Enable+0x1c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a04      	ldr	r2, [pc, #16]	@ (8001fb4 <HAL_ICACHE_Enable+0x1c>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	40030400 	.word	0x40030400

08001fb8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001fc0:	4b39      	ldr	r3, [pc, #228]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fc8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d10b      	bne.n	8001fea <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fd8:	d905      	bls.n	8001fe6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001fda:	4b33      	ldr	r3, [pc, #204]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	4a32      	ldr	r2, [pc, #200]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001fe0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fe4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e057      	b.n	800209a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ff0:	d90a      	bls.n	8002008 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8001ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	4a2a      	ldr	r2, [pc, #168]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002000:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002004:	60d3      	str	r3, [r2, #12]
 8002006:	e007      	b.n	8002018 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002008:	4b27      	ldr	r3, [pc, #156]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002010:	4925      	ldr	r1, [pc, #148]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4313      	orrs	r3, r2
 8002016:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002018:	4b24      	ldr	r3, [pc, #144]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a24      	ldr	r2, [pc, #144]	@ (80020b0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	099b      	lsrs	r3, r3, #6
 8002024:	2232      	movs	r2, #50	@ 0x32
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	4a21      	ldr	r2, [pc, #132]	@ (80020b0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800202c:	fba2 2303 	umull	r2, r3, r2, r3
 8002030:	099b      	lsrs	r3, r3, #6
 8002032:	3301      	adds	r3, #1
 8002034:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002036:	e002      	b.n	800203e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	3b01      	subs	r3, #1
 800203c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800203e:	4b1a      	ldr	r3, [pc, #104]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d102      	bne.n	8002050 <HAL_PWREx_ControlVoltageScaling+0x98>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f3      	bne.n	8002038 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d01b      	beq.n	800208e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002056:	4b15      	ldr	r3, [pc, #84]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a15      	ldr	r2, [pc, #84]	@ (80020b0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800205c:	fba2 2303 	umull	r2, r3, r2, r3
 8002060:	099b      	lsrs	r3, r3, #6
 8002062:	2232      	movs	r2, #50	@ 0x32
 8002064:	fb02 f303 	mul.w	r3, r2, r3
 8002068:	4a11      	ldr	r2, [pc, #68]	@ (80020b0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	099b      	lsrs	r3, r3, #6
 8002070:	3301      	adds	r3, #1
 8002072:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002074:	e002      	b.n	800207c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	3b01      	subs	r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800207c:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800207e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002080:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d102      	bne.n	800208e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f3      	bne.n	8002076 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e000      	b.n	800209a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	46020800 	.word	0x46020800
 80020ac:	20000000 	.word	0x20000000
 80020b0:	10624dd3 	.word	0x10624dd3

080020b4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80020b8:	4b04      	ldr	r3, [pc, #16]	@ (80020cc <HAL_PWREx_GetVoltageRange+0x18>)
 80020ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	46020800 	.word	0x46020800

080020d0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80020d8:	4b22      	ldr	r3, [pc, #136]	@ (8002164 <HAL_PWREx_ConfigSupply+0x94>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a22      	ldr	r2, [pc, #136]	@ (8002168 <HAL_PWREx_ConfigSupply+0x98>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	099b      	lsrs	r3, r3, #6
 80020e4:	2232      	movs	r2, #50	@ 0x32
 80020e6:	fb02 f303 	mul.w	r3, r2, r3
 80020ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002168 <HAL_PWREx_ConfigSupply+0x98>)
 80020ec:	fba2 2303 	umull	r2, r3, r2, r3
 80020f0:	099b      	lsrs	r3, r3, #6
 80020f2:	3301      	adds	r3, #1
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d113      	bne.n	8002124 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80020fc:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <HAL_PWREx_ConfigSupply+0x9c>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4a1a      	ldr	r2, [pc, #104]	@ (800216c <HAL_PWREx_ConfigSupply+0x9c>)
 8002102:	f023 0302 	bic.w	r3, r3, #2
 8002106:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002108:	e002      	b.n	8002110 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3b01      	subs	r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002110:	4b16      	ldr	r3, [pc, #88]	@ (800216c <HAL_PWREx_ConfigSupply+0x9c>)
 8002112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b02      	cmp	r3, #2
 800211a:	d116      	bne.n	800214a <HAL_PWREx_ConfigSupply+0x7a>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f3      	bne.n	800210a <HAL_PWREx_ConfigSupply+0x3a>
 8002122:	e012      	b.n	800214a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002124:	4b11      	ldr	r3, [pc, #68]	@ (800216c <HAL_PWREx_ConfigSupply+0x9c>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	4a10      	ldr	r2, [pc, #64]	@ (800216c <HAL_PWREx_ConfigSupply+0x9c>)
 800212a:	f043 0302 	orr.w	r3, r3, #2
 800212e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002130:	e002      	b.n	8002138 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3b01      	subs	r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002138:	4b0c      	ldr	r3, [pc, #48]	@ (800216c <HAL_PWREx_ConfigSupply+0x9c>)
 800213a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d102      	bne.n	800214a <HAL_PWREx_ConfigSupply+0x7a>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f3      	bne.n	8002132 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e000      	b.n	8002156 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000000 	.word	0x20000000
 8002168:	10624dd3 	.word	0x10624dd3
 800216c:	46020800 	.word	0x46020800

08002170 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08e      	sub	sp, #56	@ 0x38
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002178:	2300      	movs	r3, #0
 800217a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d102      	bne.n	800218a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	f000 bec8 	b.w	8002f1a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800218a:	4b99      	ldr	r3, [pc, #612]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002194:	4b96      	ldr	r3, [pc, #600]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0310 	and.w	r3, r3, #16
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 816c 	beq.w	8002484 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80021ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d007      	beq.n	80021c2 <HAL_RCC_OscConfig+0x52>
 80021b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b4:	2b0c      	cmp	r3, #12
 80021b6:	f040 80de 	bne.w	8002376 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021bc:	2b01      	cmp	r3, #1
 80021be:	f040 80da 	bne.w	8002376 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d102      	bne.n	80021d0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	f000 bea5 	b.w	8002f1a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021d4:	4b86      	ldr	r3, [pc, #536]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d004      	beq.n	80021ea <HAL_RCC_OscConfig+0x7a>
 80021e0:	4b83      	ldr	r3, [pc, #524]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80021e8:	e005      	b.n	80021f6 <HAL_RCC_OscConfig+0x86>
 80021ea:	4b81      	ldr	r3, [pc, #516]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 80021ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021f0:	041b      	lsls	r3, r3, #16
 80021f2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d255      	bcs.n	80022a6 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80021fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10a      	bne.n	8002216 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002204:	4618      	mov	r0, r3
 8002206:	f001 f9d9 	bl	80035bc <RCC_SetFlashLatencyFromMSIRange>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	f000 be82 	b.w	8002f1a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002216:	4b76      	ldr	r3, [pc, #472]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	4a75      	ldr	r2, [pc, #468]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 800221c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002220:	6093      	str	r3, [r2, #8]
 8002222:	4b73      	ldr	r3, [pc, #460]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222e:	4970      	ldr	r1, [pc, #448]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002230:	4313      	orrs	r3, r2
 8002232:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800223c:	d309      	bcc.n	8002252 <HAL_RCC_OscConfig+0xe2>
 800223e:	4b6c      	ldr	r3, [pc, #432]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f023 021f 	bic.w	r2, r3, #31
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4969      	ldr	r1, [pc, #420]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 800224c:	4313      	orrs	r3, r2
 800224e:	60cb      	str	r3, [r1, #12]
 8002250:	e07e      	b.n	8002350 <HAL_RCC_OscConfig+0x1e0>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002256:	2b00      	cmp	r3, #0
 8002258:	da0a      	bge.n	8002270 <HAL_RCC_OscConfig+0x100>
 800225a:	4b65      	ldr	r3, [pc, #404]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	015b      	lsls	r3, r3, #5
 8002268:	4961      	ldr	r1, [pc, #388]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 800226a:	4313      	orrs	r3, r2
 800226c:	60cb      	str	r3, [r1, #12]
 800226e:	e06f      	b.n	8002350 <HAL_RCC_OscConfig+0x1e0>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002278:	d30a      	bcc.n	8002290 <HAL_RCC_OscConfig+0x120>
 800227a:	4b5d      	ldr	r3, [pc, #372]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	029b      	lsls	r3, r3, #10
 8002288:	4959      	ldr	r1, [pc, #356]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 800228a:	4313      	orrs	r3, r2
 800228c:	60cb      	str	r3, [r1, #12]
 800228e:	e05f      	b.n	8002350 <HAL_RCC_OscConfig+0x1e0>
 8002290:	4b57      	ldr	r3, [pc, #348]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	03db      	lsls	r3, r3, #15
 800229e:	4954      	ldr	r1, [pc, #336]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	60cb      	str	r3, [r1, #12]
 80022a4:	e054      	b.n	8002350 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80022a6:	4b52      	ldr	r3, [pc, #328]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	4a51      	ldr	r2, [pc, #324]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 80022ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022b0:	6093      	str	r3, [r2, #8]
 80022b2:	4b4f      	ldr	r3, [pc, #316]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022be:	494c      	ldr	r1, [pc, #304]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80022cc:	d309      	bcc.n	80022e2 <HAL_RCC_OscConfig+0x172>
 80022ce:	4b48      	ldr	r3, [pc, #288]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f023 021f 	bic.w	r2, r3, #31
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	4945      	ldr	r1, [pc, #276]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	60cb      	str	r3, [r1, #12]
 80022e0:	e028      	b.n	8002334 <HAL_RCC_OscConfig+0x1c4>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	da0a      	bge.n	8002300 <HAL_RCC_OscConfig+0x190>
 80022ea:	4b41      	ldr	r3, [pc, #260]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	015b      	lsls	r3, r3, #5
 80022f8:	493d      	ldr	r1, [pc, #244]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	60cb      	str	r3, [r1, #12]
 80022fe:	e019      	b.n	8002334 <HAL_RCC_OscConfig+0x1c4>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002308:	d30a      	bcc.n	8002320 <HAL_RCC_OscConfig+0x1b0>
 800230a:	4b39      	ldr	r3, [pc, #228]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	029b      	lsls	r3, r3, #10
 8002318:	4935      	ldr	r1, [pc, #212]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 800231a:	4313      	orrs	r3, r2
 800231c:	60cb      	str	r3, [r1, #12]
 800231e:	e009      	b.n	8002334 <HAL_RCC_OscConfig+0x1c4>
 8002320:	4b33      	ldr	r3, [pc, #204]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	03db      	lsls	r3, r3, #15
 800232e:	4930      	ldr	r1, [pc, #192]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002330:	4313      	orrs	r3, r2
 8002332:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10a      	bne.n	8002350 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233e:	4618      	mov	r0, r3
 8002340:	f001 f93c 	bl	80035bc <RCC_SetFlashLatencyFromMSIRange>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	f000 bde5 	b.w	8002f1a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002350:	f001 f8de 	bl	8003510 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002354:	4b27      	ldr	r3, [pc, #156]	@ (80023f4 <HAL_RCC_OscConfig+0x284>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff f915 	bl	8001588 <HAL_InitTick>
 800235e:	4603      	mov	r3, r0
 8002360:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8002364:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 808a 	beq.w	8002482 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800236e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002372:	f000 bdd2 	b.w	8002f1a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d066      	beq.n	800244c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800237e:	4b1c      	ldr	r3, [pc, #112]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a1b      	ldr	r2, [pc, #108]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800238a:	f7ff f987 	bl	800169c <HAL_GetTick>
 800238e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002390:	e009      	b.n	80023a6 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002392:	f7ff f983 	bl	800169c <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d902      	bls.n	80023a6 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	f000 bdba 	b.w	8002f1a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80023a6:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0ef      	beq.n	8002392 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80023b2:	4b0f      	ldr	r3, [pc, #60]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	4a0e      	ldr	r2, [pc, #56]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 80023b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023bc:	6093      	str	r3, [r2, #8]
 80023be:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ca:	4909      	ldr	r1, [pc, #36]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80023d8:	d30e      	bcc.n	80023f8 <HAL_RCC_OscConfig+0x288>
 80023da:	4b05      	ldr	r3, [pc, #20]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f023 021f 	bic.w	r2, r3, #31
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4902      	ldr	r1, [pc, #8]	@ (80023f0 <HAL_RCC_OscConfig+0x280>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60cb      	str	r3, [r1, #12]
 80023ec:	e04a      	b.n	8002484 <HAL_RCC_OscConfig+0x314>
 80023ee:	bf00      	nop
 80023f0:	46020c00 	.word	0x46020c00
 80023f4:	20000018 	.word	0x20000018
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	da0a      	bge.n	8002416 <HAL_RCC_OscConfig+0x2a6>
 8002400:	4b98      	ldr	r3, [pc, #608]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	015b      	lsls	r3, r3, #5
 800240e:	4995      	ldr	r1, [pc, #596]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002410:	4313      	orrs	r3, r2
 8002412:	60cb      	str	r3, [r1, #12]
 8002414:	e036      	b.n	8002484 <HAL_RCC_OscConfig+0x314>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800241e:	d30a      	bcc.n	8002436 <HAL_RCC_OscConfig+0x2c6>
 8002420:	4b90      	ldr	r3, [pc, #576]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	029b      	lsls	r3, r3, #10
 800242e:	498d      	ldr	r1, [pc, #564]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002430:	4313      	orrs	r3, r2
 8002432:	60cb      	str	r3, [r1, #12]
 8002434:	e026      	b.n	8002484 <HAL_RCC_OscConfig+0x314>
 8002436:	4b8b      	ldr	r3, [pc, #556]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	03db      	lsls	r3, r3, #15
 8002444:	4987      	ldr	r1, [pc, #540]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002446:	4313      	orrs	r3, r2
 8002448:	60cb      	str	r3, [r1, #12]
 800244a:	e01b      	b.n	8002484 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800244c:	4b85      	ldr	r3, [pc, #532]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a84      	ldr	r2, [pc, #528]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002458:	f7ff f920 	bl	800169c <HAL_GetTick>
 800245c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800245e:	e009      	b.n	8002474 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002460:	f7ff f91c 	bl	800169c <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d902      	bls.n	8002474 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	f000 bd53 	b.w	8002f1a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002474:	4b7b      	ldr	r3, [pc, #492]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1ef      	bne.n	8002460 <HAL_RCC_OscConfig+0x2f0>
 8002480:	e000      	b.n	8002484 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002482:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 808b 	beq.w	80025a8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002494:	2b08      	cmp	r3, #8
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_OscConfig+0x334>
 8002498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800249a:	2b0c      	cmp	r3, #12
 800249c:	d109      	bne.n	80024b2 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800249e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d106      	bne.n	80024b2 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d17d      	bne.n	80025a8 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f000 bd34 	b.w	8002f1a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024ba:	d106      	bne.n	80024ca <HAL_RCC_OscConfig+0x35a>
 80024bc:	4b69      	ldr	r3, [pc, #420]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a68      	ldr	r2, [pc, #416]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	e041      	b.n	800254e <HAL_RCC_OscConfig+0x3de>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024d2:	d112      	bne.n	80024fa <HAL_RCC_OscConfig+0x38a>
 80024d4:	4b63      	ldr	r3, [pc, #396]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a62      	ldr	r2, [pc, #392]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	4b60      	ldr	r3, [pc, #384]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a5f      	ldr	r2, [pc, #380]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024e6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4b5d      	ldr	r3, [pc, #372]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a5c      	ldr	r2, [pc, #368]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	e029      	b.n	800254e <HAL_RCC_OscConfig+0x3de>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002502:	d112      	bne.n	800252a <HAL_RCC_OscConfig+0x3ba>
 8002504:	4b57      	ldr	r3, [pc, #348]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a56      	ldr	r2, [pc, #344]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 800250a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	4b54      	ldr	r3, [pc, #336]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a53      	ldr	r2, [pc, #332]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002516:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b51      	ldr	r3, [pc, #324]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a50      	ldr	r2, [pc, #320]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002522:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	e011      	b.n	800254e <HAL_RCC_OscConfig+0x3de>
 800252a:	4b4e      	ldr	r3, [pc, #312]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a4d      	ldr	r2, [pc, #308]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	4b4b      	ldr	r3, [pc, #300]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a4a      	ldr	r2, [pc, #296]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 800253c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	4b48      	ldr	r3, [pc, #288]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a47      	ldr	r2, [pc, #284]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002548:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800254c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d014      	beq.n	8002580 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8002556:	f7ff f8a1 	bl	800169c <HAL_GetTick>
 800255a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800255c:	e009      	b.n	8002572 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800255e:	f7ff f89d 	bl	800169c <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b64      	cmp	r3, #100	@ 0x64
 800256a:	d902      	bls.n	8002572 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	f000 bcd4 	b.w	8002f1a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002572:	4b3c      	ldr	r3, [pc, #240]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0ef      	beq.n	800255e <HAL_RCC_OscConfig+0x3ee>
 800257e:	e013      	b.n	80025a8 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002580:	f7ff f88c 	bl	800169c <HAL_GetTick>
 8002584:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002586:	e009      	b.n	800259c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002588:	f7ff f888 	bl	800169c <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	@ 0x64
 8002594:	d902      	bls.n	800259c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	f000 bcbf 	b.w	8002f1a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800259c:	4b31      	ldr	r3, [pc, #196]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1ef      	bne.n	8002588 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d05f      	beq.n	8002674 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80025b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d005      	beq.n	80025c6 <HAL_RCC_OscConfig+0x456>
 80025ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025bc:	2b0c      	cmp	r3, #12
 80025be:	d114      	bne.n	80025ea <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d111      	bne.n	80025ea <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d102      	bne.n	80025d4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	f000 bca3 	b.w	8002f1a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80025d4:	4b23      	ldr	r3, [pc, #140]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	041b      	lsls	r3, r3, #16
 80025e2:	4920      	ldr	r1, [pc, #128]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80025e8:	e044      	b.n	8002674 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d024      	beq.n	800263c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80025f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80025f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025fc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80025fe:	f7ff f84d 	bl	800169c <HAL_GetTick>
 8002602:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002604:	e009      	b.n	800261a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002606:	f7ff f849 	bl	800169c <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d902      	bls.n	800261a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	f000 bc80 	b.w	8002f1a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800261a:	4b12      	ldr	r3, [pc, #72]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0ef      	beq.n	8002606 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002626:	4b0f      	ldr	r3, [pc, #60]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	041b      	lsls	r3, r3, #16
 8002634:	490b      	ldr	r1, [pc, #44]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002636:	4313      	orrs	r3, r2
 8002638:	610b      	str	r3, [r1, #16]
 800263a:	e01b      	b.n	8002674 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800263c:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a08      	ldr	r2, [pc, #32]	@ (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002642:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002646:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002648:	f7ff f828 	bl	800169c <HAL_GetTick>
 800264c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800264e:	e00b      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002650:	f7ff f824 	bl	800169c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d904      	bls.n	8002668 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	f000 bc5b 	b.w	8002f1a <HAL_RCC_OscConfig+0xdaa>
 8002664:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002668:	4baf      	ldr	r3, [pc, #700]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1ed      	bne.n	8002650 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80c8 	beq.w	8002812 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002688:	4ba7      	ldr	r3, [pc, #668]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 800268a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b00      	cmp	r3, #0
 8002694:	d111      	bne.n	80026ba <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002696:	4ba4      	ldr	r3, [pc, #656]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 8002698:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800269c:	4aa2      	ldr	r2, [pc, #648]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 800269e:	f043 0304 	orr.w	r3, r3, #4
 80026a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80026a6:	4ba0      	ldr	r3, [pc, #640]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 80026a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80026b4:	2301      	movs	r3, #1
 80026b6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80026ba:	4b9c      	ldr	r3, [pc, #624]	@ (800292c <HAL_RCC_OscConfig+0x7bc>)
 80026bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d119      	bne.n	80026fa <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80026c6:	4b99      	ldr	r3, [pc, #612]	@ (800292c <HAL_RCC_OscConfig+0x7bc>)
 80026c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ca:	4a98      	ldr	r2, [pc, #608]	@ (800292c <HAL_RCC_OscConfig+0x7bc>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d2:	f7fe ffe3 	bl	800169c <HAL_GetTick>
 80026d6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80026d8:	e009      	b.n	80026ee <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026da:	f7fe ffdf 	bl	800169c <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d902      	bls.n	80026ee <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	f000 bc16 	b.w	8002f1a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80026ee:	4b8f      	ldr	r3, [pc, #572]	@ (800292c <HAL_RCC_OscConfig+0x7bc>)
 80026f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0ef      	beq.n	80026da <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d05f      	beq.n	80027c2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002702:	4b89      	ldr	r3, [pc, #548]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 8002704:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002708:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002714:	429a      	cmp	r2, r3
 8002716:	d037      	beq.n	8002788 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d006      	beq.n	8002730 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e3f4      	b.n	8002f1a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d01b      	beq.n	8002772 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800273a:	4b7b      	ldr	r3, [pc, #492]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 800273c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002740:	4a79      	ldr	r2, [pc, #484]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 8002742:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002746:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800274a:	f7fe ffa7 	bl	800169c <HAL_GetTick>
 800274e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002752:	f7fe ffa3 	bl	800169c <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b05      	cmp	r3, #5
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e3da      	b.n	8002f1a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002764:	4b70      	ldr	r3, [pc, #448]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 8002766:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800276a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1ef      	bne.n	8002752 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002772:	4b6d      	ldr	r3, [pc, #436]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 8002774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002778:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	4969      	ldr	r1, [pc, #420]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002788:	4b67      	ldr	r3, [pc, #412]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 800278a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800278e:	4a66      	ldr	r2, [pc, #408]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 8002790:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002794:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002798:	f7fe ff80 	bl	800169c <HAL_GetTick>
 800279c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a0:	f7fe ff7c 	bl	800169c <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b05      	cmp	r3, #5
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e3b3      	b.n	8002f1a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80027b2:	4b5d      	ldr	r3, [pc, #372]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 80027b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0ef      	beq.n	80027a0 <HAL_RCC_OscConfig+0x630>
 80027c0:	e01b      	b.n	80027fa <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80027c2:	4b59      	ldr	r3, [pc, #356]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 80027c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027c8:	4a57      	ldr	r2, [pc, #348]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 80027ca:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80027ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80027d2:	f7fe ff63 	bl	800169c <HAL_GetTick>
 80027d6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027da:	f7fe ff5f 	bl	800169c <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e396      	b.n	8002f1a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80027ec:	4b4e      	ldr	r3, [pc, #312]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 80027ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1ef      	bne.n	80027da <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027fa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d107      	bne.n	8002812 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002802:	4b49      	ldr	r3, [pc, #292]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 8002804:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002808:	4a47      	ldr	r2, [pc, #284]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 800280a:	f023 0304 	bic.w	r3, r3, #4
 800280e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 8111 	beq.w	8002a42 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002820:	2300      	movs	r3, #0
 8002822:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002826:	4b40      	ldr	r3, [pc, #256]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 8002828:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d111      	bne.n	8002858 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002834:	4b3c      	ldr	r3, [pc, #240]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 8002836:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800283a:	4a3b      	ldr	r2, [pc, #236]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 800283c:	f043 0304 	orr.w	r3, r3, #4
 8002840:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002844:	4b38      	ldr	r3, [pc, #224]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 8002846:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002852:	2301      	movs	r3, #1
 8002854:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002858:	4b34      	ldr	r3, [pc, #208]	@ (800292c <HAL_RCC_OscConfig+0x7bc>)
 800285a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d118      	bne.n	8002896 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002864:	4b31      	ldr	r3, [pc, #196]	@ (800292c <HAL_RCC_OscConfig+0x7bc>)
 8002866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002868:	4a30      	ldr	r2, [pc, #192]	@ (800292c <HAL_RCC_OscConfig+0x7bc>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002870:	f7fe ff14 	bl	800169c <HAL_GetTick>
 8002874:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002878:	f7fe ff10 	bl	800169c <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e347      	b.n	8002f1a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800288a:	4b28      	ldr	r3, [pc, #160]	@ (800292c <HAL_RCC_OscConfig+0x7bc>)
 800288c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d01f      	beq.n	80028e2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d010      	beq.n	80028d0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80028ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 80028b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 80028b6:	f043 0304 	orr.w	r3, r3, #4
 80028ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80028be:	4b1a      	ldr	r3, [pc, #104]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 80028c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028c4:	4a18      	ldr	r2, [pc, #96]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028ce:	e018      	b.n	8002902 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80028d0:	4b15      	ldr	r3, [pc, #84]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 80028d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028d6:	4a14      	ldr	r2, [pc, #80]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028e0:	e00f      	b.n	8002902 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80028e2:	4b11      	ldr	r3, [pc, #68]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 80028e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 80028ea:	f023 0301 	bic.w	r3, r3, #1
 80028ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80028f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 80028f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002928 <HAL_RCC_OscConfig+0x7b8>)
 80028fa:	f023 0304 	bic.w	r3, r3, #4
 80028fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d057      	beq.n	80029ba <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800290a:	f7fe fec7 	bl	800169c <HAL_GetTick>
 800290e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002910:	e00e      	b.n	8002930 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7fe fec3 	bl	800169c <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002920:	4293      	cmp	r3, r2
 8002922:	d905      	bls.n	8002930 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e2f8      	b.n	8002f1a <HAL_RCC_OscConfig+0xdaa>
 8002928:	46020c00 	.word	0x46020c00
 800292c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002930:	4b9c      	ldr	r3, [pc, #624]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002932:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0e9      	beq.n	8002912 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002946:	2b00      	cmp	r3, #0
 8002948:	d01b      	beq.n	8002982 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800294a:	4b96      	ldr	r3, [pc, #600]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 800294c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002950:	4a94      	ldr	r2, [pc, #592]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002956:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800295a:	e00a      	b.n	8002972 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295c:	f7fe fe9e 	bl	800169c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800296a:	4293      	cmp	r3, r2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e2d3      	b.n	8002f1a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002972:	4b8c      	ldr	r3, [pc, #560]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002978:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0ed      	beq.n	800295c <HAL_RCC_OscConfig+0x7ec>
 8002980:	e053      	b.n	8002a2a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002982:	4b88      	ldr	r3, [pc, #544]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002988:	4a86      	ldr	r2, [pc, #536]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 800298a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800298e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002992:	e00a      	b.n	80029aa <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002994:	f7fe fe82 	bl	800169c <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e2b7      	b.n	8002f1a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80029aa:	4b7e      	ldr	r3, [pc, #504]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 80029ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1ed      	bne.n	8002994 <HAL_RCC_OscConfig+0x824>
 80029b8:	e037      	b.n	8002a2a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80029ba:	f7fe fe6f 	bl	800169c <HAL_GetTick>
 80029be:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029c0:	e00a      	b.n	80029d8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c2:	f7fe fe6b 	bl	800169c <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e2a0      	b.n	8002f1a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029d8:	4b72      	ldr	r3, [pc, #456]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 80029da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1ed      	bne.n	80029c2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80029e6:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 80029e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d01a      	beq.n	8002a2a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80029f4:	4b6b      	ldr	r3, [pc, #428]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 80029f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029fa:	4a6a      	ldr	r2, [pc, #424]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 80029fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7fe fe49 	bl	800169c <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e27e      	b.n	8002f1a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a1c:	4b61      	ldr	r3, [pc, #388]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002a1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1ed      	bne.n	8002a06 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a2a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a32:	4b5c      	ldr	r3, [pc, #368]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a38:	4a5a      	ldr	r2, [pc, #360]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002a3a:	f023 0304 	bic.w	r3, r3, #4
 8002a3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0320 	and.w	r3, r3, #32
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d036      	beq.n	8002abc <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d019      	beq.n	8002a8a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002a56:	4b53      	ldr	r3, [pc, #332]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a52      	ldr	r2, [pc, #328]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002a5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a60:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002a62:	f7fe fe1b 	bl	800169c <HAL_GetTick>
 8002a66:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a6a:	f7fe fe17 	bl	800169c <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e24e      	b.n	8002f1a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002a7c:	4b49      	ldr	r3, [pc, #292]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x8fa>
 8002a88:	e018      	b.n	8002abc <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002a8a:	4b46      	ldr	r3, [pc, #280]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a45      	ldr	r2, [pc, #276]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002a90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a94:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002a96:	f7fe fe01 	bl	800169c <HAL_GetTick>
 8002a9a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a9e:	f7fe fdfd 	bl	800169c <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e234      	b.n	8002f1a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002ab0:	4b3c      	ldr	r3, [pc, #240]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1f0      	bne.n	8002a9e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d036      	beq.n	8002b36 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d019      	beq.n	8002b04 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002ad0:	4b34      	ldr	r3, [pc, #208]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a33      	ldr	r2, [pc, #204]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002ad6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ada:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002adc:	f7fe fdde 	bl	800169c <HAL_GetTick>
 8002ae0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002ae4:	f7fe fdda 	bl	800169c <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e211      	b.n	8002f1a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002af6:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x974>
 8002b02:	e018      	b.n	8002b36 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002b04:	4b27      	ldr	r3, [pc, #156]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a26      	ldr	r2, [pc, #152]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002b0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b0e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002b10:	f7fe fdc4 	bl	800169c <HAL_GetTick>
 8002b14:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002b18:	f7fe fdc0 	bl	800169c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e1f7      	b.n	8002f1a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d07f      	beq.n	8002c42 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d062      	beq.n	8002c10 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002b4a:	4b16      	ldr	r3, [pc, #88]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	4a15      	ldr	r2, [pc, #84]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002b50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b54:	6093      	str	r3, [r2, #8]
 8002b56:	4b13      	ldr	r3, [pc, #76]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b62:	4910      	ldr	r1, [pc, #64]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002b70:	d309      	bcc.n	8002b86 <HAL_RCC_OscConfig+0xa16>
 8002b72:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f023 021f 	bic.w	r2, r3, #31
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	4909      	ldr	r1, [pc, #36]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60cb      	str	r3, [r1, #12]
 8002b84:	e02a      	b.n	8002bdc <HAL_RCC_OscConfig+0xa6c>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	da0c      	bge.n	8002ba8 <HAL_RCC_OscConfig+0xa38>
 8002b8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	015b      	lsls	r3, r3, #5
 8002b9c:	4901      	ldr	r1, [pc, #4]	@ (8002ba4 <HAL_RCC_OscConfig+0xa34>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60cb      	str	r3, [r1, #12]
 8002ba2:	e01b      	b.n	8002bdc <HAL_RCC_OscConfig+0xa6c>
 8002ba4:	46020c00 	.word	0x46020c00
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb0:	d30a      	bcc.n	8002bc8 <HAL_RCC_OscConfig+0xa58>
 8002bb2:	4ba1      	ldr	r3, [pc, #644]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	029b      	lsls	r3, r3, #10
 8002bc0:	499d      	ldr	r1, [pc, #628]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60cb      	str	r3, [r1, #12]
 8002bc6:	e009      	b.n	8002bdc <HAL_RCC_OscConfig+0xa6c>
 8002bc8:	4b9b      	ldr	r3, [pc, #620]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	03db      	lsls	r3, r3, #15
 8002bd6:	4998      	ldr	r1, [pc, #608]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002bdc:	4b96      	ldr	r3, [pc, #600]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a95      	ldr	r2, [pc, #596]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002be2:	f043 0310 	orr.w	r3, r3, #16
 8002be6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002be8:	f7fe fd58 	bl	800169c <HAL_GetTick>
 8002bec:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002bf0:	f7fe fd54 	bl	800169c <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e18b      	b.n	8002f1a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002c02:	4b8d      	ldr	r3, [pc, #564]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0xa80>
 8002c0e:	e018      	b.n	8002c42 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002c10:	4b89      	ldr	r3, [pc, #548]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a88      	ldr	r2, [pc, #544]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002c16:	f023 0310 	bic.w	r3, r3, #16
 8002c1a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002c1c:	f7fe fd3e 	bl	800169c <HAL_GetTick>
 8002c20:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002c24:	f7fe fd3a 	bl	800169c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e171      	b.n	8002f1a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002c36:	4b80      	ldr	r3, [pc, #512]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 8166 	beq.w	8002f18 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c52:	4b79      	ldr	r3, [pc, #484]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b0c      	cmp	r3, #12
 8002c5c:	f000 80f2 	beq.w	8002e44 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	f040 80c5 	bne.w	8002df4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002c6a:	4b73      	ldr	r3, [pc, #460]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a72      	ldr	r2, [pc, #456]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002c70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c74:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002c76:	f7fe fd11 	bl	800169c <HAL_GetTick>
 8002c7a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7e:	f7fe fd0d 	bl	800169c <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e144      	b.n	8002f1a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002c90:	4b69      	ldr	r3, [pc, #420]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1f0      	bne.n	8002c7e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9c:	4b66      	ldr	r3, [pc, #408]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d111      	bne.n	8002cce <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002caa:	4b63      	ldr	r3, [pc, #396]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cb0:	4a61      	ldr	r2, [pc, #388]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002cb2:	f043 0304 	orr.w	r3, r3, #4
 8002cb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002cba:	4b5f      	ldr	r3, [pc, #380]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002cce:	4b5b      	ldr	r3, [pc, #364]	@ (8002e3c <HAL_RCC_OscConfig+0xccc>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002cda:	d102      	bne.n	8002ce2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002ce2:	4b56      	ldr	r3, [pc, #344]	@ (8002e3c <HAL_RCC_OscConfig+0xccc>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	4a55      	ldr	r2, [pc, #340]	@ (8002e3c <HAL_RCC_OscConfig+0xccc>)
 8002ce8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cec:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002cee:	4b52      	ldr	r3, [pc, #328]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cf6:	f023 0303 	bic.w	r3, r3, #3
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d02:	3a01      	subs	r2, #1
 8002d04:	0212      	lsls	r2, r2, #8
 8002d06:	4311      	orrs	r1, r2
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	494a      	ldr	r1, [pc, #296]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	628b      	str	r3, [r1, #40]	@ 0x28
 8002d14:	4b48      	ldr	r3, [pc, #288]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002d16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d18:	4b49      	ldr	r3, [pc, #292]	@ (8002e40 <HAL_RCC_OscConfig+0xcd0>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d20:	3a01      	subs	r2, #1
 8002d22:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002d2a:	3a01      	subs	r2, #1
 8002d2c:	0252      	lsls	r2, r2, #9
 8002d2e:	b292      	uxth	r2, r2
 8002d30:	4311      	orrs	r1, r2
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d36:	3a01      	subs	r2, #1
 8002d38:	0412      	lsls	r2, r2, #16
 8002d3a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002d3e:	4311      	orrs	r1, r2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002d44:	3a01      	subs	r2, #1
 8002d46:	0612      	lsls	r2, r2, #24
 8002d48:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	493a      	ldr	r1, [pc, #232]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002d54:	4b38      	ldr	r3, [pc, #224]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d58:	4a37      	ldr	r2, [pc, #220]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002d5a:	f023 0310 	bic.w	r3, r3, #16
 8002d5e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d64:	4a34      	ldr	r2, [pc, #208]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002d6a:	4b33      	ldr	r3, [pc, #204]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6e:	4a32      	ldr	r2, [pc, #200]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002d70:	f043 0310 	orr.w	r3, r3, #16
 8002d74:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002d76:	4b30      	ldr	r3, [pc, #192]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7a:	f023 020c 	bic.w	r2, r3, #12
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d82:	492d      	ldr	r1, [pc, #180]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8002d88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d105      	bne.n	8002d9c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002d90:	4b2a      	ldr	r3, [pc, #168]	@ (8002e3c <HAL_RCC_OscConfig+0xccc>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	4a29      	ldr	r2, [pc, #164]	@ (8002e3c <HAL_RCC_OscConfig+0xccc>)
 8002d96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d9a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002d9c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d107      	bne.n	8002db4 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002da4:	4b24      	ldr	r3, [pc, #144]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002daa:	4a23      	ldr	r2, [pc, #140]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002dac:	f023 0304 	bic.w	r3, r3, #4
 8002db0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002db4:	4b20      	ldr	r3, [pc, #128]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a1f      	ldr	r2, [pc, #124]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002dba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dbe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002dc0:	f7fe fc6c 	bl	800169c <HAL_GetTick>
 8002dc4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fe fc68 	bl	800169c <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e09f      	b.n	8002f1a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002dda:	4b17      	ldr	r3, [pc, #92]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002de6:	4b14      	ldr	r3, [pc, #80]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dea:	4a13      	ldr	r2, [pc, #76]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002df0:	6293      	str	r3, [r2, #40]	@ 0x28
 8002df2:	e091      	b.n	8002f18 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002df4:	4b10      	ldr	r3, [pc, #64]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a0f      	ldr	r2, [pc, #60]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002dfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dfe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002e00:	f7fe fc4c 	bl	800169c <HAL_GetTick>
 8002e04:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e08:	f7fe fc48 	bl	800169c <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e07f      	b.n	8002f1a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002e1a:	4b07      	ldr	r3, [pc, #28]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002e26:	4b04      	ldr	r3, [pc, #16]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2a:	4a03      	ldr	r2, [pc, #12]	@ (8002e38 <HAL_RCC_OscConfig+0xcc8>)
 8002e2c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002e30:	f023 0303 	bic.w	r3, r3, #3
 8002e34:	6293      	str	r3, [r2, #40]	@ 0x28
 8002e36:	e06f      	b.n	8002f18 <HAL_RCC_OscConfig+0xda8>
 8002e38:	46020c00 	.word	0x46020c00
 8002e3c:	46020800 	.word	0x46020800
 8002e40:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002e44:	4b37      	ldr	r3, [pc, #220]	@ (8002f24 <HAL_RCC_OscConfig+0xdb4>)
 8002e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e48:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e4a:	4b36      	ldr	r3, [pc, #216]	@ (8002f24 <HAL_RCC_OscConfig+0xdb4>)
 8002e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e4e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d039      	beq.n	8002ecc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f003 0203 	and.w	r2, r3, #3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d132      	bne.n	8002ecc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	0a1b      	lsrs	r3, r3, #8
 8002e6a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d129      	bne.n	8002ecc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d122      	bne.n	8002ecc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e90:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d11a      	bne.n	8002ecc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	0a5b      	lsrs	r3, r3, #9
 8002e9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d111      	bne.n	8002ecc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	0c1b      	lsrs	r3, r3, #16
 8002eac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d108      	bne.n	8002ecc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	0e1b      	lsrs	r3, r3, #24
 8002ebe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e024      	b.n	8002f1a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002ed0:	4b14      	ldr	r3, [pc, #80]	@ (8002f24 <HAL_RCC_OscConfig+0xdb4>)
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed4:	08db      	lsrs	r3, r3, #3
 8002ed6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d01a      	beq.n	8002f18 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002ee2:	4b10      	ldr	r3, [pc, #64]	@ (8002f24 <HAL_RCC_OscConfig+0xdb4>)
 8002ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8002f24 <HAL_RCC_OscConfig+0xdb4>)
 8002ee8:	f023 0310 	bic.w	r3, r3, #16
 8002eec:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eee:	f7fe fbd5 	bl	800169c <HAL_GetTick>
 8002ef2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002ef4:	bf00      	nop
 8002ef6:	f7fe fbd1 	bl	800169c <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d0f9      	beq.n	8002ef6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f06:	4a07      	ldr	r2, [pc, #28]	@ (8002f24 <HAL_RCC_OscConfig+0xdb4>)
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002f0c:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <HAL_RCC_OscConfig+0xdb4>)
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f10:	4a04      	ldr	r2, [pc, #16]	@ (8002f24 <HAL_RCC_OscConfig+0xdb4>)
 8002f12:	f043 0310 	orr.w	r3, r3, #16
 8002f16:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3738      	adds	r7, #56	@ 0x38
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	46020c00 	.word	0x46020c00

08002f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e1d9      	b.n	80032f0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f3c:	4b9b      	ldr	r3, [pc, #620]	@ (80031ac <HAL_RCC_ClockConfig+0x284>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d910      	bls.n	8002f6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4a:	4b98      	ldr	r3, [pc, #608]	@ (80031ac <HAL_RCC_ClockConfig+0x284>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 020f 	bic.w	r2, r3, #15
 8002f52:	4996      	ldr	r1, [pc, #600]	@ (80031ac <HAL_RCC_ClockConfig+0x284>)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5a:	4b94      	ldr	r3, [pc, #592]	@ (80031ac <HAL_RCC_ClockConfig+0x284>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e1c1      	b.n	80032f0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d010      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	695a      	ldr	r2, [r3, #20]
 8002f7c:	4b8c      	ldr	r3, [pc, #560]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d908      	bls.n	8002f9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002f88:	4b89      	ldr	r3, [pc, #548]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	4986      	ldr	r1, [pc, #536]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d012      	beq.n	8002fcc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	4b81      	ldr	r3, [pc, #516]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	091b      	lsrs	r3, r3, #4
 8002fb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d909      	bls.n	8002fcc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002fb8:	4b7d      	ldr	r3, [pc, #500]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	497a      	ldr	r1, [pc, #488]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d010      	beq.n	8002ffa <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	4b74      	ldr	r3, [pc, #464]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d908      	bls.n	8002ffa <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002fe8:	4b71      	ldr	r3, [pc, #452]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	496e      	ldr	r1, [pc, #440]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d010      	beq.n	8003028 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	4b69      	ldr	r3, [pc, #420]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	429a      	cmp	r2, r3
 8003014:	d908      	bls.n	8003028 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003016:	4b66      	ldr	r3, [pc, #408]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	f023 020f 	bic.w	r2, r3, #15
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	4963      	ldr	r1, [pc, #396]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 8003024:	4313      	orrs	r3, r2
 8003026:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80d2 	beq.w	80031da <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8003036:	2300      	movs	r3, #0
 8003038:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b03      	cmp	r3, #3
 8003040:	d143      	bne.n	80030ca <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003042:	4b5b      	ldr	r3, [pc, #364]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 8003044:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d110      	bne.n	8003072 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003050:	4b57      	ldr	r3, [pc, #348]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 8003052:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003056:	4a56      	ldr	r2, [pc, #344]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 8003058:	f043 0304 	orr.w	r3, r3, #4
 800305c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003060:	4b53      	ldr	r3, [pc, #332]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 8003062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	60bb      	str	r3, [r7, #8]
 800306c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800306e:	2301      	movs	r3, #1
 8003070:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003072:	f7fe fb13 	bl	800169c <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003078:	4b4e      	ldr	r3, [pc, #312]	@ (80031b4 <HAL_RCC_ClockConfig+0x28c>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00f      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003084:	e008      	b.n	8003098 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003086:	f7fe fb09 	bl	800169c <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e12b      	b.n	80032f0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003098:	4b46      	ldr	r3, [pc, #280]	@ (80031b4 <HAL_RCC_ClockConfig+0x28c>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80030a4:	7dfb      	ldrb	r3, [r7, #23]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d107      	bne.n	80030ba <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80030aa:	4b41      	ldr	r3, [pc, #260]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 80030ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030b0:	4a3f      	ldr	r2, [pc, #252]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 80030b2:	f023 0304 	bic.w	r3, r3, #4
 80030b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80030ba:	4b3d      	ldr	r3, [pc, #244]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d121      	bne.n	800310a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e112      	b.n	80032f0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d107      	bne.n	80030e2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030d2:	4b37      	ldr	r3, [pc, #220]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d115      	bne.n	800310a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e106      	b.n	80032f0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80030ea:	4b31      	ldr	r3, [pc, #196]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d109      	bne.n	800310a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e0fa      	b.n	80032f0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030fa:	4b2d      	ldr	r3, [pc, #180]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e0f2      	b.n	80032f0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800310a:	4b29      	ldr	r3, [pc, #164]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	f023 0203 	bic.w	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4926      	ldr	r1, [pc, #152]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 8003118:	4313      	orrs	r3, r2
 800311a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800311c:	f7fe fabe 	bl	800169c <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b03      	cmp	r3, #3
 8003128:	d112      	bne.n	8003150 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800312a:	e00a      	b.n	8003142 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800312c:	f7fe fab6 	bl	800169c <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e0d6      	b.n	80032f0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003142:	4b1b      	ldr	r3, [pc, #108]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f003 030c 	and.w	r3, r3, #12
 800314a:	2b0c      	cmp	r3, #12
 800314c:	d1ee      	bne.n	800312c <HAL_RCC_ClockConfig+0x204>
 800314e:	e044      	b.n	80031da <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d112      	bne.n	800317e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003158:	e00a      	b.n	8003170 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800315a:	f7fe fa9f 	bl	800169c <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003168:	4293      	cmp	r3, r2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e0bf      	b.n	80032f0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003170:	4b0f      	ldr	r3, [pc, #60]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	f003 030c 	and.w	r3, r3, #12
 8003178:	2b08      	cmp	r3, #8
 800317a:	d1ee      	bne.n	800315a <HAL_RCC_ClockConfig+0x232>
 800317c:	e02d      	b.n	80031da <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d123      	bne.n	80031ce <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003186:	e00a      	b.n	800319e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003188:	f7fe fa88 	bl	800169c <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003196:	4293      	cmp	r3, r2
 8003198:	d901      	bls.n	800319e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e0a8      	b.n	80032f0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800319e:	4b04      	ldr	r3, [pc, #16]	@ (80031b0 <HAL_RCC_ClockConfig+0x288>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1ee      	bne.n	8003188 <HAL_RCC_ClockConfig+0x260>
 80031aa:	e016      	b.n	80031da <HAL_RCC_ClockConfig+0x2b2>
 80031ac:	40022000 	.word	0x40022000
 80031b0:	46020c00 	.word	0x46020c00
 80031b4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b8:	f7fe fa70 	bl	800169c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e090      	b.n	80032f0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80031ce:	4b4a      	ldr	r3, [pc, #296]	@ (80032f8 <HAL_RCC_ClockConfig+0x3d0>)
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d1ee      	bne.n	80031b8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d010      	beq.n	8003208 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	4b43      	ldr	r3, [pc, #268]	@ (80032f8 <HAL_RCC_ClockConfig+0x3d0>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d208      	bcs.n	8003208 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80031f6:	4b40      	ldr	r3, [pc, #256]	@ (80032f8 <HAL_RCC_ClockConfig+0x3d0>)
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	f023 020f 	bic.w	r2, r3, #15
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	493d      	ldr	r1, [pc, #244]	@ (80032f8 <HAL_RCC_ClockConfig+0x3d0>)
 8003204:	4313      	orrs	r3, r2
 8003206:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003208:	4b3c      	ldr	r3, [pc, #240]	@ (80032fc <HAL_RCC_ClockConfig+0x3d4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d210      	bcs.n	8003238 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003216:	4b39      	ldr	r3, [pc, #228]	@ (80032fc <HAL_RCC_ClockConfig+0x3d4>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 020f 	bic.w	r2, r3, #15
 800321e:	4937      	ldr	r1, [pc, #220]	@ (80032fc <HAL_RCC_ClockConfig+0x3d4>)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	4313      	orrs	r3, r2
 8003224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003226:	4b35      	ldr	r3, [pc, #212]	@ (80032fc <HAL_RCC_ClockConfig+0x3d4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e05b      	b.n	80032f0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d010      	beq.n	8003266 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	4b2b      	ldr	r3, [pc, #172]	@ (80032f8 <HAL_RCC_ClockConfig+0x3d0>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003250:	429a      	cmp	r2, r3
 8003252:	d208      	bcs.n	8003266 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003254:	4b28      	ldr	r3, [pc, #160]	@ (80032f8 <HAL_RCC_ClockConfig+0x3d0>)
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	4925      	ldr	r1, [pc, #148]	@ (80032f8 <HAL_RCC_ClockConfig+0x3d0>)
 8003262:	4313      	orrs	r3, r2
 8003264:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d012      	beq.n	8003298 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	4b20      	ldr	r3, [pc, #128]	@ (80032f8 <HAL_RCC_ClockConfig+0x3d0>)
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	091b      	lsrs	r3, r3, #4
 800327c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003280:	429a      	cmp	r2, r3
 8003282:	d209      	bcs.n	8003298 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003284:	4b1c      	ldr	r3, [pc, #112]	@ (80032f8 <HAL_RCC_ClockConfig+0x3d0>)
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	4919      	ldr	r1, [pc, #100]	@ (80032f8 <HAL_RCC_ClockConfig+0x3d0>)
 8003294:	4313      	orrs	r3, r2
 8003296:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d010      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	4b13      	ldr	r3, [pc, #76]	@ (80032f8 <HAL_RCC_ClockConfig+0x3d0>)
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d208      	bcs.n	80032c6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80032b4:	4b10      	ldr	r3, [pc, #64]	@ (80032f8 <HAL_RCC_ClockConfig+0x3d0>)
 80032b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	490d      	ldr	r1, [pc, #52]	@ (80032f8 <HAL_RCC_ClockConfig+0x3d0>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80032c6:	f000 f821 	bl	800330c <HAL_RCC_GetSysClockFreq>
 80032ca:	4602      	mov	r2, r0
 80032cc:	4b0a      	ldr	r3, [pc, #40]	@ (80032f8 <HAL_RCC_ClockConfig+0x3d0>)
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	490a      	ldr	r1, [pc, #40]	@ (8003300 <HAL_RCC_ClockConfig+0x3d8>)
 80032d6:	5ccb      	ldrb	r3, [r1, r3]
 80032d8:	fa22 f303 	lsr.w	r3, r2, r3
 80032dc:	4a09      	ldr	r2, [pc, #36]	@ (8003304 <HAL_RCC_ClockConfig+0x3dc>)
 80032de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032e0:	4b09      	ldr	r3, [pc, #36]	@ (8003308 <HAL_RCC_ClockConfig+0x3e0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fe f94f 	bl	8001588 <HAL_InitTick>
 80032ea:	4603      	mov	r3, r0
 80032ec:	73fb      	strb	r3, [r7, #15]

  return status;
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	46020c00 	.word	0x46020c00
 80032fc:	40022000 	.word	0x40022000
 8003300:	08008578 	.word	0x08008578
 8003304:	20000000 	.word	0x20000000
 8003308:	20000018 	.word	0x20000018

0800330c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800330c:	b480      	push	{r7}
 800330e:	b08b      	sub	sp, #44	@ 0x2c
 8003310:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800331a:	4b78      	ldr	r3, [pc, #480]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003324:	4b75      	ldr	r3, [pc, #468]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_RCC_GetSysClockFreq+0x34>
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	2b0c      	cmp	r3, #12
 8003338:	d121      	bne.n	800337e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d11e      	bne.n	800337e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003340:	4b6e      	ldr	r3, [pc, #440]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d107      	bne.n	800335c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800334c:	4b6b      	ldr	r3, [pc, #428]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800334e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003352:	0b1b      	lsrs	r3, r3, #12
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	627b      	str	r3, [r7, #36]	@ 0x24
 800335a:	e005      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800335c:	4b67      	ldr	r3, [pc, #412]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	0f1b      	lsrs	r3, r3, #28
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003368:	4a65      	ldr	r2, [pc, #404]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800336a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003370:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d110      	bne.n	800339a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800337c:	e00d      	b.n	800339a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800337e:	4b5f      	ldr	r3, [pc, #380]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b04      	cmp	r3, #4
 8003388:	d102      	bne.n	8003390 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800338a:	4b5e      	ldr	r3, [pc, #376]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800338c:	623b      	str	r3, [r7, #32]
 800338e:	e004      	b.n	800339a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	2b08      	cmp	r3, #8
 8003394:	d101      	bne.n	800339a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003396:	4b5b      	ldr	r3, [pc, #364]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003398:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	2b0c      	cmp	r3, #12
 800339e:	f040 80a5 	bne.w	80034ec <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80033a2:	4b56      	ldr	r3, [pc, #344]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80033ac:	4b53      	ldr	r3, [pc, #332]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b0:	0a1b      	lsrs	r3, r3, #8
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	3301      	adds	r3, #1
 80033b8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80033ba:	4b50      	ldr	r3, [pc, #320]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033be:	091b      	lsrs	r3, r3, #4
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80033c6:	4b4d      	ldr	r3, [pc, #308]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ca:	08db      	lsrs	r3, r3, #3
 80033cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	fb02 f303 	mul.w	r3, r2, r3
 80033d6:	ee07 3a90 	vmov	s15, r3
 80033da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033de:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d003      	beq.n	80033f0 <HAL_RCC_GetSysClockFreq+0xe4>
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d022      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x128>
 80033ee:	e043      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	ee07 3a90 	vmov	s15, r3
 80033f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fa:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8003508 <HAL_RCC_GetSysClockFreq+0x1fc>
 80033fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003402:	4b3e      	ldr	r3, [pc, #248]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340a:	ee07 3a90 	vmov	s15, r3
 800340e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003412:	ed97 6a01 	vldr	s12, [r7, #4]
 8003416:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800350c <HAL_RCC_GetSysClockFreq+0x200>
 800341a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800341e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003426:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800342a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800342e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003432:	e046      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	ee07 3a90 	vmov	s15, r3
 800343a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800343e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8003508 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003446:	4b2d      	ldr	r3, [pc, #180]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800344a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003456:	ed97 6a01 	vldr	s12, [r7, #4]
 800345a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800350c <HAL_RCC_GetSysClockFreq+0x200>
 800345e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003462:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800346a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800346e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003472:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003476:	e024      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347a:	ee07 3a90 	vmov	s15, r3
 800347e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	ee07 3a90 	vmov	s15, r3
 8003488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003490:	4b1a      	ldr	r3, [pc, #104]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003498:	ee07 3a90 	vmov	s15, r3
 800349c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80034a0:	ed97 6a01 	vldr	s12, [r7, #4]
 80034a4:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800350c <HAL_RCC_GetSysClockFreq+0x200>
 80034a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80034b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034c0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80034c2:	4b0e      	ldr	r3, [pc, #56]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c6:	0e1b      	lsrs	r3, r3, #24
 80034c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034cc:	3301      	adds	r3, #1
 80034ce:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	ee07 3a90 	vmov	s15, r3
 80034d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034da:	edd7 6a07 	vldr	s13, [r7, #28]
 80034de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034e6:	ee17 3a90 	vmov	r3, s15
 80034ea:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80034ec:	6a3b      	ldr	r3, [r7, #32]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	372c      	adds	r7, #44	@ 0x2c
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	46020c00 	.word	0x46020c00
 8003500:	08008590 	.word	0x08008590
 8003504:	00f42400 	.word	0x00f42400
 8003508:	4b742400 	.word	0x4b742400
 800350c:	46000000 	.word	0x46000000

08003510 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003514:	f7ff fefa 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8003518:	4602      	mov	r2, r0
 800351a:	4b07      	ldr	r3, [pc, #28]	@ (8003538 <HAL_RCC_GetHCLKFreq+0x28>)
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	4906      	ldr	r1, [pc, #24]	@ (800353c <HAL_RCC_GetHCLKFreq+0x2c>)
 8003524:	5ccb      	ldrb	r3, [r1, r3]
 8003526:	fa22 f303 	lsr.w	r3, r2, r3
 800352a:	4a05      	ldr	r2, [pc, #20]	@ (8003540 <HAL_RCC_GetHCLKFreq+0x30>)
 800352c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800352e:	4b04      	ldr	r3, [pc, #16]	@ (8003540 <HAL_RCC_GetHCLKFreq+0x30>)
 8003530:	681b      	ldr	r3, [r3, #0]
}
 8003532:	4618      	mov	r0, r3
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	46020c00 	.word	0x46020c00
 800353c:	08008578 	.word	0x08008578
 8003540:	20000000 	.word	0x20000000

08003544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003548:	f7ff ffe2 	bl	8003510 <HAL_RCC_GetHCLKFreq>
 800354c:	4602      	mov	r2, r0
 800354e:	4b05      	ldr	r3, [pc, #20]	@ (8003564 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	091b      	lsrs	r3, r3, #4
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	4903      	ldr	r1, [pc, #12]	@ (8003568 <HAL_RCC_GetPCLK1Freq+0x24>)
 800355a:	5ccb      	ldrb	r3, [r1, r3]
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003560:	4618      	mov	r0, r3
 8003562:	bd80      	pop	{r7, pc}
 8003564:	46020c00 	.word	0x46020c00
 8003568:	08008588 	.word	0x08008588

0800356c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003570:	f7ff ffce 	bl	8003510 <HAL_RCC_GetHCLKFreq>
 8003574:	4602      	mov	r2, r0
 8003576:	4b05      	ldr	r3, [pc, #20]	@ (800358c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	0a1b      	lsrs	r3, r3, #8
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	4903      	ldr	r1, [pc, #12]	@ (8003590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003582:	5ccb      	ldrb	r3, [r1, r3]
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003588:	4618      	mov	r0, r3
 800358a:	bd80      	pop	{r7, pc}
 800358c:	46020c00 	.word	0x46020c00
 8003590:	08008588 	.word	0x08008588

08003594 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003598:	f7ff ffba 	bl	8003510 <HAL_RCC_GetHCLKFreq>
 800359c:	4602      	mov	r2, r0
 800359e:	4b05      	ldr	r3, [pc, #20]	@ (80035b4 <HAL_RCC_GetPCLK3Freq+0x20>)
 80035a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	4903      	ldr	r1, [pc, #12]	@ (80035b8 <HAL_RCC_GetPCLK3Freq+0x24>)
 80035aa:	5ccb      	ldrb	r3, [r1, r3]
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	46020c00 	.word	0x46020c00
 80035b8:	08008588 	.word	0x08008588

080035bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035c4:	4b3e      	ldr	r3, [pc, #248]	@ (80036c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80035c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035d2:	f7fe fd6f 	bl	80020b4 <HAL_PWREx_GetVoltageRange>
 80035d6:	6178      	str	r0, [r7, #20]
 80035d8:	e019      	b.n	800360e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035da:	4b39      	ldr	r3, [pc, #228]	@ (80036c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80035dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035e0:	4a37      	ldr	r2, [pc, #220]	@ (80036c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80035e2:	f043 0304 	orr.w	r3, r3, #4
 80035e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80035ea:	4b35      	ldr	r3, [pc, #212]	@ (80036c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80035ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035f8:	f7fe fd5c 	bl	80020b4 <HAL_PWREx_GetVoltageRange>
 80035fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035fe:	4b30      	ldr	r3, [pc, #192]	@ (80036c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003604:	4a2e      	ldr	r2, [pc, #184]	@ (80036c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003606:	f023 0304 	bic.w	r3, r3, #4
 800360a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003614:	d003      	beq.n	800361e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800361c:	d109      	bne.n	8003632 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003624:	d202      	bcs.n	800362c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003626:	2301      	movs	r3, #1
 8003628:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800362a:	e033      	b.n	8003694 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800362c:	2300      	movs	r3, #0
 800362e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003630:	e030      	b.n	8003694 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003638:	d208      	bcs.n	800364c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003640:	d102      	bne.n	8003648 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003642:	2303      	movs	r3, #3
 8003644:	613b      	str	r3, [r7, #16]
 8003646:	e025      	b.n	8003694 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e035      	b.n	80036b8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003652:	d90f      	bls.n	8003674 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003660:	d902      	bls.n	8003668 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003662:	2300      	movs	r3, #0
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	e015      	b.n	8003694 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003668:	2301      	movs	r3, #1
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	e012      	b.n	8003694 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800366e:	2300      	movs	r3, #0
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	e00f      	b.n	8003694 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800367a:	d109      	bne.n	8003690 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003682:	d102      	bne.n	800368a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003684:	2301      	movs	r3, #1
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	e004      	b.n	8003694 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800368a:	2302      	movs	r3, #2
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	e001      	b.n	8003694 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003690:	2301      	movs	r3, #1
 8003692:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003694:	4b0b      	ldr	r3, [pc, #44]	@ (80036c4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f023 020f 	bic.w	r2, r3, #15
 800369c:	4909      	ldr	r1, [pc, #36]	@ (80036c4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80036a4:	4b07      	ldr	r3, [pc, #28]	@ (80036c4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 030f 	and.w	r3, r3, #15
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d001      	beq.n	80036b6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	46020c00 	.word	0x46020c00
 80036c4:	40022000 	.word	0x40022000

080036c8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80036c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036cc:	b0b6      	sub	sp, #216	@ 0xd8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036d4:	2300      	movs	r3, #0
 80036d6:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036da:	2300      	movs	r3, #0
 80036dc:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e8:	f002 0401 	and.w	r4, r2, #1
 80036ec:	2500      	movs	r5, #0
 80036ee:	ea54 0305 	orrs.w	r3, r4, r5
 80036f2:	d00b      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80036f4:	4bc5      	ldr	r3, [pc, #788]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80036f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036fa:	f023 0103 	bic.w	r1, r3, #3
 80036fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003704:	4ac1      	ldr	r2, [pc, #772]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003706:	430b      	orrs	r3, r1
 8003708:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800370c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003714:	f002 0804 	and.w	r8, r2, #4
 8003718:	f04f 0900 	mov.w	r9, #0
 800371c:	ea58 0309 	orrs.w	r3, r8, r9
 8003720:	d00b      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003722:	4bba      	ldr	r3, [pc, #744]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003728:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800372c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003732:	4ab6      	ldr	r2, [pc, #728]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003734:	430b      	orrs	r3, r1
 8003736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800373a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	f002 0a08 	and.w	sl, r2, #8
 8003746:	f04f 0b00 	mov.w	fp, #0
 800374a:	ea5a 030b 	orrs.w	r3, sl, fp
 800374e:	d00b      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003750:	4bae      	ldr	r3, [pc, #696]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003756:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800375a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800375e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003760:	4aaa      	ldr	r2, [pc, #680]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003762:	430b      	orrs	r3, r1
 8003764:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003768:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003770:	f002 0310 	and.w	r3, r2, #16
 8003774:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003778:	2300      	movs	r3, #0
 800377a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800377e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003782:	460b      	mov	r3, r1
 8003784:	4313      	orrs	r3, r2
 8003786:	d00b      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003788:	4ba0      	ldr	r3, [pc, #640]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800378a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800378e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003792:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003798:	4a9c      	ldr	r2, [pc, #624]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800379a:	430b      	orrs	r3, r1
 800379c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a8:	f002 0320 	and.w	r3, r2, #32
 80037ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037b0:	2300      	movs	r3, #0
 80037b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4313      	orrs	r3, r2
 80037be:	d00b      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80037c0:	4b92      	ldr	r3, [pc, #584]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80037c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037c6:	f023 0107 	bic.w	r1, r3, #7
 80037ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037d0:	4a8e      	ldr	r2, [pc, #568]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80037d2:	430b      	orrs	r3, r1
 80037d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80037e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80037e8:	2300      	movs	r3, #0
 80037ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037ee:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80037f2:	460b      	mov	r3, r1
 80037f4:	4313      	orrs	r3, r2
 80037f6:	d00b      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80037f8:	4b84      	ldr	r3, [pc, #528]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80037fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037fe:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003802:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003806:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003808:	4a80      	ldr	r2, [pc, #512]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800380a:	430b      	orrs	r3, r1
 800380c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003810:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003818:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800381c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003820:	2300      	movs	r3, #0
 8003822:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003826:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800382a:	460b      	mov	r3, r1
 800382c:	4313      	orrs	r3, r2
 800382e:	d00b      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003830:	4b76      	ldr	r3, [pc, #472]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003836:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800383a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800383e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003840:	4a72      	ldr	r2, [pc, #456]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003842:	430b      	orrs	r3, r1
 8003844:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003848:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003850:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003854:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003858:	2300      	movs	r3, #0
 800385a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800385e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003862:	460b      	mov	r3, r1
 8003864:	4313      	orrs	r3, r2
 8003866:	d00b      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003868:	4b68      	ldr	r3, [pc, #416]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800386a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800386e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003872:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003876:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003878:	4a64      	ldr	r2, [pc, #400]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800387a:	430b      	orrs	r3, r1
 800387c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003880:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003888:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800388c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003890:	2300      	movs	r3, #0
 8003892:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003896:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800389a:	460b      	mov	r3, r1
 800389c:	4313      	orrs	r3, r2
 800389e:	d00b      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80038a0:	4b5a      	ldr	r3, [pc, #360]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80038a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038a6:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80038aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b0:	4a56      	ldr	r2, [pc, #344]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80038b2:	430b      	orrs	r3, r1
 80038b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c0:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80038c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80038c8:	2300      	movs	r3, #0
 80038ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80038ce:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80038d2:	460b      	mov	r3, r1
 80038d4:	4313      	orrs	r3, r2
 80038d6:	d00b      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80038d8:	4b4c      	ldr	r3, [pc, #304]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80038da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80038de:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80038e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038e8:	4a48      	ldr	r2, [pc, #288]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80038ea:	430b      	orrs	r3, r1
 80038ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80038fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003900:	2300      	movs	r3, #0
 8003902:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003906:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800390a:	460b      	mov	r3, r1
 800390c:	4313      	orrs	r3, r2
 800390e:	d00b      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003910:	4b3e      	ldr	r3, [pc, #248]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003916:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800391a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800391e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003920:	4a3a      	ldr	r2, [pc, #232]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003922:	430b      	orrs	r3, r1
 8003924:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003928:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800392c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003930:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003934:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003936:	2300      	movs	r3, #0
 8003938:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800393a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800393e:	460b      	mov	r3, r1
 8003940:	4313      	orrs	r3, r2
 8003942:	d00b      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003944:	4b31      	ldr	r3, [pc, #196]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003946:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800394a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800394e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003952:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003954:	4a2d      	ldr	r2, [pc, #180]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003956:	430b      	orrs	r3, r1
 8003958:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800395c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003964:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003968:	673b      	str	r3, [r7, #112]	@ 0x70
 800396a:	2300      	movs	r3, #0
 800396c:	677b      	str	r3, [r7, #116]	@ 0x74
 800396e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003972:	460b      	mov	r3, r1
 8003974:	4313      	orrs	r3, r2
 8003976:	d04f      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003978:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800397c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003980:	2b80      	cmp	r3, #128	@ 0x80
 8003982:	d02d      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003984:	2b80      	cmp	r3, #128	@ 0x80
 8003986:	d827      	bhi.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003988:	2b60      	cmp	r3, #96	@ 0x60
 800398a:	d02b      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800398c:	2b60      	cmp	r3, #96	@ 0x60
 800398e:	d823      	bhi.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003990:	2b40      	cmp	r3, #64	@ 0x40
 8003992:	d006      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003994:	2b40      	cmp	r3, #64	@ 0x40
 8003996:	d81f      	bhi.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003998:	2b00      	cmp	r3, #0
 800399a:	d009      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800399c:	2b20      	cmp	r3, #32
 800399e:	d011      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80039a0:	e01a      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80039a2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80039a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a6:	4a19      	ldr	r2, [pc, #100]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ac:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80039ae:	e01a      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039b4:	3308      	adds	r3, #8
 80039b6:	4618      	mov	r0, r3
 80039b8:	f002 f914 	bl	8005be4 <RCCEx_PLL2_Config>
 80039bc:	4603      	mov	r3, r0
 80039be:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80039c2:	e010      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039c8:	332c      	adds	r3, #44	@ 0x2c
 80039ca:	4618      	mov	r0, r3
 80039cc:	f002 f9a2 	bl	8005d14 <RCCEx_PLL3_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80039d6:	e006      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80039de:	e002      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 80039e0:	bf00      	nop
 80039e2:	e000      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 80039e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e6:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d110      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80039ee:	4b07      	ldr	r3, [pc, #28]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80039f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80039f4:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80039f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a00:	4a02      	ldr	r2, [pc, #8]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a02:	430b      	orrs	r3, r1
 8003a04:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003a08:	e006      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003a0a:	bf00      	nop
 8003a0c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a10:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003a14:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003a18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a20:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003a24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a26:	2300      	movs	r3, #0
 8003a28:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a2a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4313      	orrs	r3, r2
 8003a32:	d046      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003a34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a3c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003a40:	d028      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003a42:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003a46:	d821      	bhi.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003a48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a4c:	d022      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003a4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a52:	d81b      	bhi.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003a54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a58:	d01c      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003a5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a5e:	d815      	bhi.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003a60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a64:	d008      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8003a66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a6a:	d80f      	bhi.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d011      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003a70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a74:	d00e      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003a76:	e009      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f002 f8b0 	bl	8005be4 <RCCEx_PLL2_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003a8a:	e004      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003a92:	e000      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8003a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a96:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10d      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003a9e:	4bb6      	ldr	r3, [pc, #728]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003aa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003aa4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003aa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003aac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003ab0:	4ab1      	ldr	r2, [pc, #708]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003ab2:	430b      	orrs	r3, r1
 8003ab4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003ab8:	e003      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aba:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003abe:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003ac2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003ace:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ad4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4313      	orrs	r3, r2
 8003adc:	d03e      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003ade:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d81d      	bhi.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8003aea:	a201      	add	r2, pc, #4	@ (adr r2, 8003af0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af0:	08003b2f 	.word	0x08003b2f
 8003af4:	08003b05 	.word	0x08003b05
 8003af8:	08003b13 	.word	0x08003b13
 8003afc:	08003b2f 	.word	0x08003b2f
 8003b00:	08003b2f 	.word	0x08003b2f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003b04:	4b9c      	ldr	r3, [pc, #624]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b08:	4a9b      	ldr	r2, [pc, #620]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003b0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b0e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003b10:	e00e      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b16:	332c      	adds	r3, #44	@ 0x2c
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f002 f8fb 	bl	8005d14 <RCCEx_PLL3_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003b24:	e004      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003b2c:	e000      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 8003b2e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003b30:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10d      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003b38:	4b8f      	ldr	r3, [pc, #572]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003b3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b3e:	f023 0107 	bic.w	r1, r3, #7
 8003b42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b4a:	4a8b      	ldr	r2, [pc, #556]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003b52:	e003      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b54:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003b58:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003b5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b64:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003b68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b6e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003b72:	460b      	mov	r3, r1
 8003b74:	4313      	orrs	r3, r2
 8003b76:	d04a      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003b78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b84:	d028      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003b86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b8a:	d821      	bhi.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003b8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b90:	d024      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b96:	d81b      	bhi.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003b98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b9c:	d00e      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003b9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ba2:	d815      	bhi.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d01b      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bac:	d110      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003bae:	4b72      	ldr	r3, [pc, #456]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb2:	4a71      	ldr	r2, [pc, #452]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bb8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003bba:	e012      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003bbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003bc0:	332c      	adds	r3, #44	@ 0x2c
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f002 f8a6 	bl	8005d14 <RCCEx_PLL3_Config>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003bce:	e008      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003bd6:	e004      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003bd8:	bf00      	nop
 8003bda:	e002      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003bdc:	bf00      	nop
 8003bde:	e000      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003be0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003be2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10d      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003bea:	4b63      	ldr	r3, [pc, #396]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003bec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bf0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003bf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bfc:	4a5e      	ldr	r2, [pc, #376]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003bfe:	430b      	orrs	r3, r1
 8003c00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003c04:	e003      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c06:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003c0a:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c16:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003c1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c20:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003c24:	460b      	mov	r3, r1
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f000 80ba 	beq.w	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c32:	4b51      	ldr	r3, [pc, #324]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d113      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c40:	4b4d      	ldr	r3, [pc, #308]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c46:	4a4c      	ldr	r2, [pc, #304]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003c48:	f043 0304 	orr.w	r3, r3, #4
 8003c4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003c50:	4b49      	ldr	r3, [pc, #292]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 8003c62:	2301      	movs	r3, #1
 8003c64:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003c68:	4b44      	ldr	r3, [pc, #272]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6c:	4a43      	ldr	r2, [pc, #268]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c74:	f7fd fd12 	bl	800169c <HAL_GetTick>
 8003c78:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c7c:	e00b      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c7e:	f7fd fd0d 	bl	800169c <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d903      	bls.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003c94:	e005      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c96:	4b39      	ldr	r3, [pc, #228]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8003c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0ed      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 8003ca2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d16a      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003caa:	4b33      	ldr	r3, [pc, #204]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003cac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cb4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003cb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d023      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8003cc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cc4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8003cc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d01b      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cd0:	4b29      	ldr	r3, [pc, #164]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003cd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cde:	4b26      	ldr	r3, [pc, #152]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003ce0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ce4:	4a24      	ldr	r2, [pc, #144]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cee:	4b22      	ldr	r3, [pc, #136]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cf4:	4a20      	ldr	r2, [pc, #128]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003cf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cfa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003d00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d04:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d019      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d14:	f7fd fcc2 	bl	800169c <HAL_GetTick>
 8003d18:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d1c:	e00d      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1e:	f7fd fcbd 	bl	800169c <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d28:	1ad2      	subs	r2, r2, r3
 8003d2a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d903      	bls.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 8003d38:	e006      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003d3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0ea      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 8003d48:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10d      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003d50:	4b09      	ldr	r3, [pc, #36]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003d52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d56:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d5e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003d62:	4a05      	ldr	r2, [pc, #20]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003d64:	430b      	orrs	r3, r1
 8003d66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003d6a:	e00d      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d6c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003d70:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 8003d74:	e008      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8003d76:	bf00      	nop
 8003d78:	46020c00 	.word	0x46020c00
 8003d7c:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d80:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003d84:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d88:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d107      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d90:	4bb2      	ldr	r3, [pc, #712]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d96:	4ab1      	ldr	r2, [pc, #708]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003d98:	f023 0304 	bic.w	r3, r3, #4
 8003d9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003da0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003dac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dae:	2300      	movs	r3, #0
 8003db0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003db2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003db6:	460b      	mov	r3, r1
 8003db8:	4313      	orrs	r3, r2
 8003dba:	d042      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003dbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003dc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003dc4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003dc8:	d022      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003dca:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003dce:	d81b      	bhi.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003dd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dd4:	d011      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x732>
 8003dd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dda:	d815      	bhi.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d019      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003de0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003de4:	d110      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003de6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003dea:	3308      	adds	r3, #8
 8003dec:	4618      	mov	r0, r3
 8003dee:	f001 fef9 	bl	8005be4 <RCCEx_PLL2_Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003df8:	e00d      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dfa:	4b98      	ldr	r3, [pc, #608]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfe:	4a97      	ldr	r2, [pc, #604]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e04:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003e06:	e006      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003e0e:	e002      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8003e10:	bf00      	nop
 8003e12:	e000      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8003e14:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003e16:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10d      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003e1e:	4b8f      	ldr	r3, [pc, #572]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e24:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003e28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e30:	4a8a      	ldr	r2, [pc, #552]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003e32:	430b      	orrs	r3, r1
 8003e34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003e38:	e003      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003e3e:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003e4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e50:	2300      	movs	r3, #0
 8003e52:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e54:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	d02d      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003e5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e6a:	d00b      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003e6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e70:	d804      	bhi.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d008      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8003e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e7a:	d007      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003e82:	e004      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8003e84:	bf00      	nop
 8003e86:	e002      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8003e88:	bf00      	nop
 8003e8a:	e000      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8003e8c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003e8e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10d      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003e96:	4b71      	ldr	r3, [pc, #452]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003e98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e9c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ea0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea8:	4a6c      	ldr	r2, [pc, #432]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003eaa:	430b      	orrs	r3, r1
 8003eac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003eb0:	e003      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003eb6:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8003eba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ec8:	2300      	movs	r3, #0
 8003eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ecc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	d00c      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8003ed6:	4b61      	ldr	r3, [pc, #388]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003ed8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003edc:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8003ee0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ee8:	4a5c      	ldr	r2, [pc, #368]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003eea:	430b      	orrs	r3, r1
 8003eec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8003ef0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003efc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003efe:	2300      	movs	r3, #0
 8003f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f02:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003f06:	460b      	mov	r3, r1
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	d019      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8003f0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f18:	d105      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f1a:	4b50      	ldr	r3, [pc, #320]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1e:	4a4f      	ldr	r2, [pc, #316]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f24:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003f26:	4b4d      	ldr	r3, [pc, #308]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003f28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f2c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003f30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f38:	4a48      	ldr	r2, [pc, #288]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f48:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f4e:	2300      	movs	r3, #0
 8003f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f52:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003f56:	460b      	mov	r3, r1
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	d00c      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003f5c:	4b3f      	ldr	r3, [pc, #252]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003f6e:	493b      	ldr	r1, [pc, #236]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003f76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003f82:	623b      	str	r3, [r7, #32]
 8003f84:	2300      	movs	r3, #0
 8003f86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f88:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	d00c      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003f92:	4b32      	ldr	r3, [pc, #200]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fa0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003fa4:	492d      	ldr	r1, [pc, #180]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003fac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	d00c      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003fc8:	4b24      	ldr	r3, [pc, #144]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003fca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003fce:	f023 0218 	bic.w	r2, r3, #24
 8003fd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fda:	4920      	ldr	r1, [pc, #128]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003fe2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fea:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003fee:	613b      	str	r3, [r7, #16]
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	617b      	str	r3, [r7, #20]
 8003ff4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	d034      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003ffe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004002:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004006:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800400a:	d105      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800400c:	4b13      	ldr	r3, [pc, #76]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800400e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004010:	4a12      	ldr	r2, [pc, #72]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004016:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004018:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800401c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004020:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004024:	d108      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004026:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800402a:	3308      	adds	r3, #8
 800402c:	4618      	mov	r0, r3
 800402e:	f001 fdd9 	bl	8005be4 <RCCEx_PLL2_Config>
 8004032:	4603      	mov	r3, r0
 8004034:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 8004038:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10f      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004040:	4b06      	ldr	r3, [pc, #24]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004042:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004046:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800404a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800404e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004052:	4902      	ldr	r1, [pc, #8]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800405a:	e005      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 800405c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004060:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004064:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004068:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800406c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004070:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800407e:	460b      	mov	r3, r1
 8004080:	4313      	orrs	r3, r2
 8004082:	d03a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004084:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004088:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800408c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004090:	d00e      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004092:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004096:	d815      	bhi.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d017      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800409c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040a0:	d110      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040a2:	4b27      	ldr	r3, [pc, #156]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80040a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a6:	4a26      	ldr	r2, [pc, #152]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80040a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ac:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80040ae:	e00e      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040b4:	3308      	adds	r3, #8
 80040b6:	4618      	mov	r0, r3
 80040b8:	f001 fd94 	bl	8005be4 <RCCEx_PLL2_Config>
 80040bc:	4603      	mov	r3, r0
 80040be:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80040c2:	e004      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80040ca:	e000      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 80040cc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80040ce:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10d      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80040d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80040d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040dc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80040e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040e8:	4915      	ldr	r1, [pc, #84]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80040f0:	e003      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80040f6:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80040fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004102:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004106:	603b      	str	r3, [r7, #0]
 8004108:	2300      	movs	r3, #0
 800410a:	607b      	str	r3, [r7, #4]
 800410c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004110:	460b      	mov	r3, r1
 8004112:	4313      	orrs	r3, r2
 8004114:	d00c      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004116:	4b0a      	ldr	r3, [pc, #40]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004118:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800411c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004120:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004124:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004128:	4905      	ldr	r1, [pc, #20]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004130:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 8004134:	4618      	mov	r0, r3
 8004136:	37d8      	adds	r7, #216	@ 0xd8
 8004138:	46bd      	mov	sp, r7
 800413a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800413e:	bf00      	nop
 8004140:	46020c00 	.word	0x46020c00

08004144 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004144:	b480      	push	{r7}
 8004146:	b089      	sub	sp, #36	@ 0x24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800414c:	4ba6      	ldr	r3, [pc, #664]	@ (80043e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800414e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004154:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004156:	4ba4      	ldr	r3, [pc, #656]	@ (80043e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004160:	4ba1      	ldr	r3, [pc, #644]	@ (80043e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004164:	0a1b      	lsrs	r3, r3, #8
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	3301      	adds	r3, #1
 800416c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800416e:	4b9e      	ldr	r3, [pc, #632]	@ (80043e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004172:	091b      	lsrs	r3, r3, #4
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800417a:	4b9b      	ldr	r3, [pc, #620]	@ (80043e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800417c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417e:	08db      	lsrs	r3, r3, #3
 8004180:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	fb02 f303 	mul.w	r3, r2, r3
 800418a:	ee07 3a90 	vmov	s15, r3
 800418e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004192:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2b03      	cmp	r3, #3
 800419a:	d062      	beq.n	8004262 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2b03      	cmp	r3, #3
 80041a0:	f200 8081 	bhi.w	80042a6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d024      	beq.n	80041f4 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d17a      	bne.n	80042a6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ba:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80043ec <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80041be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041c2:	4b89      	ldr	r3, [pc, #548]	@ (80043e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80041c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ca:	ee07 3a90 	vmov	s15, r3
 80041ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80041d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80041d6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80043f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80041da:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041de:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80041e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041f2:	e08f      	b.n	8004314 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80041f4:	4b7c      	ldr	r3, [pc, #496]	@ (80043e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8004200:	4b79      	ldr	r3, [pc, #484]	@ (80043e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	0f1b      	lsrs	r3, r3, #28
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	e006      	b.n	800421a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800420c:	4b76      	ldr	r3, [pc, #472]	@ (80043e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800420e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004212:	041b      	lsls	r3, r3, #16
 8004214:	0f1b      	lsrs	r3, r3, #28
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	4a76      	ldr	r2, [pc, #472]	@ (80043f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800421c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004220:	ee07 3a90 	vmov	s15, r3
 8004224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	ee07 3a90 	vmov	s15, r3
 800422e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	ee07 3a90 	vmov	s15, r3
 800423c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004240:	ed97 6a02 	vldr	s12, [r7, #8]
 8004244:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80043f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004248:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800424c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004250:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004254:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800425c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004260:	e058      	b.n	8004314 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	ee07 3a90 	vmov	s15, r3
 8004268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80043ec <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8004270:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004274:	4b5c      	ldr	r3, [pc, #368]	@ (80043e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800427c:	ee07 3a90 	vmov	s15, r3
 8004280:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004284:	ed97 6a02 	vldr	s12, [r7, #8]
 8004288:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80043f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800428c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004290:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004294:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004298:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800429c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042a4:	e036      	b.n	8004314 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80042a6:	4b50      	ldr	r3, [pc, #320]	@ (80043e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80042b2:	4b4d      	ldr	r3, [pc, #308]	@ (80043e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	0f1b      	lsrs	r3, r3, #28
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	e006      	b.n	80042cc <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80042be:	4b4a      	ldr	r3, [pc, #296]	@ (80043e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80042c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80042c4:	041b      	lsls	r3, r3, #16
 80042c6:	0f1b      	lsrs	r3, r3, #28
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	4a49      	ldr	r2, [pc, #292]	@ (80043f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80042ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	ee07 3a90 	vmov	s15, r3
 80042e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	ee07 3a90 	vmov	s15, r3
 80042ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80042f6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80043f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80042fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004306:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800430a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800430e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004312:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004314:	4b34      	ldr	r3, [pc, #208]	@ (80043e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004318:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d017      	beq.n	8004350 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004320:	4b31      	ldr	r3, [pc, #196]	@ (80043e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004324:	0a5b      	lsrs	r3, r3, #9
 8004326:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8004332:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004336:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800433a:	edd7 6a07 	vldr	s13, [r7, #28]
 800433e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004346:	ee17 2a90 	vmov	r2, s15
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	e002      	b.n	8004356 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004356:	4b24      	ldr	r3, [pc, #144]	@ (80043e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d017      	beq.n	8004392 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004362:	4b21      	ldr	r3, [pc, #132]	@ (80043e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004366:	0c1b      	lsrs	r3, r3, #16
 8004368:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800436c:	ee07 3a90 	vmov	s15, r3
 8004370:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004374:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004378:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800437c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004388:	ee17 2a90 	vmov	r2, s15
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	605a      	str	r2, [r3, #4]
 8004390:	e002      	b.n	8004398 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004398:	4b13      	ldr	r3, [pc, #76]	@ (80043e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d017      	beq.n	80043d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80043a4:	4b10      	ldr	r3, [pc, #64]	@ (80043e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80043a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a8:	0e1b      	lsrs	r3, r3, #24
 80043aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043ae:	ee07 3a90 	vmov	s15, r3
 80043b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80043b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043ba:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80043be:	edd7 6a07 	vldr	s13, [r7, #28]
 80043c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ca:	ee17 2a90 	vmov	r2, s15
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80043d2:	e002      	b.n	80043da <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	609a      	str	r2, [r3, #8]
}
 80043da:	bf00      	nop
 80043dc:	3724      	adds	r7, #36	@ 0x24
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	46020c00 	.word	0x46020c00
 80043ec:	4b742400 	.word	0x4b742400
 80043f0:	46000000 	.word	0x46000000
 80043f4:	08008590 	.word	0x08008590

080043f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b089      	sub	sp, #36	@ 0x24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004400:	4ba6      	ldr	r3, [pc, #664]	@ (800469c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004408:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800440a:	4ba4      	ldr	r3, [pc, #656]	@ (800469c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800440c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8004414:	4ba1      	ldr	r3, [pc, #644]	@ (800469c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004418:	0a1b      	lsrs	r3, r3, #8
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	3301      	adds	r3, #1
 8004420:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8004422:	4b9e      	ldr	r3, [pc, #632]	@ (800469c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004426:	091b      	lsrs	r3, r3, #4
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800442e:	4b9b      	ldr	r3, [pc, #620]	@ (800469c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004432:	08db      	lsrs	r3, r3, #3
 8004434:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	fb02 f303 	mul.w	r3, r2, r3
 800443e:	ee07 3a90 	vmov	s15, r3
 8004442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004446:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2b03      	cmp	r3, #3
 800444e:	d062      	beq.n	8004516 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2b03      	cmp	r3, #3
 8004454:	f200 8081 	bhi.w	800455a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d024      	beq.n	80044a8 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b02      	cmp	r3, #2
 8004462:	d17a      	bne.n	800455a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8004472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004476:	4b89      	ldr	r3, [pc, #548]	@ (800469c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004486:	ed97 6a02 	vldr	s12, [r7, #8]
 800448a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80046a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800448e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004492:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800449a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800449e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044a6:	e08f      	b.n	80045c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80044a8:	4b7c      	ldr	r3, [pc, #496]	@ (800469c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80044b4:	4b79      	ldr	r3, [pc, #484]	@ (800469c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	0f1b      	lsrs	r3, r3, #28
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	e006      	b.n	80044ce <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80044c0:	4b76      	ldr	r3, [pc, #472]	@ (800469c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80044c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80044c6:	041b      	lsls	r3, r3, #16
 80044c8:	0f1b      	lsrs	r3, r3, #28
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	4a76      	ldr	r2, [pc, #472]	@ (80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80044d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044d4:	ee07 3a90 	vmov	s15, r3
 80044d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	ee07 3a90 	vmov	s15, r3
 80044f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80044f8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80046a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80044fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004500:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004504:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004508:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800450c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004510:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004514:	e058      	b.n	80045c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	ee07 3a90 	vmov	s15, r3
 800451c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004520:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8004524:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004528:	4b5c      	ldr	r3, [pc, #368]	@ (800469c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800452a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004530:	ee07 3a90 	vmov	s15, r3
 8004534:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004538:	ed97 6a02 	vldr	s12, [r7, #8]
 800453c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80046a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004540:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004544:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004548:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800454c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004554:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004558:	e036      	b.n	80045c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800455a:	4b50      	ldr	r3, [pc, #320]	@ (800469c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d005      	beq.n	8004572 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8004566:	4b4d      	ldr	r3, [pc, #308]	@ (800469c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	0f1b      	lsrs	r3, r3, #28
 800456c:	f003 030f 	and.w	r3, r3, #15
 8004570:	e006      	b.n	8004580 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8004572:	4b4a      	ldr	r3, [pc, #296]	@ (800469c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004574:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004578:	041b      	lsls	r3, r3, #16
 800457a:	0f1b      	lsrs	r3, r3, #28
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	4a49      	ldr	r2, [pc, #292]	@ (80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8004582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	ee07 3a90 	vmov	s15, r3
 8004594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004598:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045aa:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80046a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80045ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80045be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045c6:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80045c8:	4b34      	ldr	r3, [pc, #208]	@ (800469c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80045ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d017      	beq.n	8004604 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80045d4:	4b31      	ldr	r3, [pc, #196]	@ (800469c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80045d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d8:	0a5b      	lsrs	r3, r3, #9
 80045da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80045e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045ea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80045ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80045f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045fa:	ee17 2a90 	vmov	r2, s15
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	e002      	b.n	800460a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800460a:	4b24      	ldr	r3, [pc, #144]	@ (800469c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800460c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d017      	beq.n	8004646 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004616:	4b21      	ldr	r3, [pc, #132]	@ (800469c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800461a:	0c1b      	lsrs	r3, r3, #16
 800461c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004620:	ee07 3a90 	vmov	s15, r3
 8004624:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004628:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800462c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004630:	edd7 6a07 	vldr	s13, [r7, #28]
 8004634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800463c:	ee17 2a90 	vmov	r2, s15
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	605a      	str	r2, [r3, #4]
 8004644:	e002      	b.n	800464c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800464c:	4b13      	ldr	r3, [pc, #76]	@ (800469c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800464e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004650:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d017      	beq.n	8004688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004658:	4b10      	ldr	r3, [pc, #64]	@ (800469c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800465a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800465c:	0e1b      	lsrs	r3, r3, #24
 800465e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004662:	ee07 3a90 	vmov	s15, r3
 8004666:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800466a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800466e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004672:	edd7 6a07 	vldr	s13, [r7, #28]
 8004676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800467a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800467e:	ee17 2a90 	vmov	r2, s15
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004686:	e002      	b.n	800468e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	609a      	str	r2, [r3, #8]
}
 800468e:	bf00      	nop
 8004690:	3724      	adds	r7, #36	@ 0x24
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	46020c00 	.word	0x46020c00
 80046a0:	4b742400 	.word	0x4b742400
 80046a4:	46000000 	.word	0x46000000
 80046a8:	08008590 	.word	0x08008590

080046ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b089      	sub	sp, #36	@ 0x24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80046b4:	4ba6      	ldr	r3, [pc, #664]	@ (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80046b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046bc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80046be:	4ba4      	ldr	r3, [pc, #656]	@ (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80046c8:	4ba1      	ldr	r3, [pc, #644]	@ (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80046ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046cc:	0a1b      	lsrs	r3, r3, #8
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	3301      	adds	r3, #1
 80046d4:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80046d6:	4b9e      	ldr	r3, [pc, #632]	@ (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046da:	091b      	lsrs	r3, r3, #4
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80046e2:	4b9b      	ldr	r3, [pc, #620]	@ (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80046e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046e6:	08db      	lsrs	r3, r3, #3
 80046e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	fb02 f303 	mul.w	r3, r2, r3
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2b03      	cmp	r3, #3
 8004702:	d062      	beq.n	80047ca <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2b03      	cmp	r3, #3
 8004708:	f200 8081 	bhi.w	800480e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d024      	beq.n	800475c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2b02      	cmp	r3, #2
 8004716:	d17a      	bne.n	800480e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004722:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8004954 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800472a:	4b89      	ldr	r3, [pc, #548]	@ (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800472c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800473a:	ed97 6a02 	vldr	s12, [r7, #8]
 800473e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004742:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004746:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800474a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800474e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004756:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800475a:	e08f      	b.n	800487c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800475c:	4b7c      	ldr	r3, [pc, #496]	@ (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d005      	beq.n	8004774 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8004768:	4b79      	ldr	r3, [pc, #484]	@ (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	0f1b      	lsrs	r3, r3, #28
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	e006      	b.n	8004782 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8004774:	4b76      	ldr	r3, [pc, #472]	@ (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004776:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800477a:	041b      	lsls	r3, r3, #16
 800477c:	0f1b      	lsrs	r3, r3, #28
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	4a76      	ldr	r2, [pc, #472]	@ (800495c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004788:	ee07 3a90 	vmov	s15, r3
 800478c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	ee07 3a90 	vmov	s15, r3
 80047a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80047ac:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80047b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80047c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047c8:	e058      	b.n	800487c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	ee07 3a90 	vmov	s15, r3
 80047d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004954 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80047d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047dc:	4b5c      	ldr	r3, [pc, #368]	@ (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80047de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e4:	ee07 3a90 	vmov	s15, r3
 80047e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80047ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80047f0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80047f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80047f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80047fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004800:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004808:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800480c:	e036      	b.n	800487c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800480e:	4b50      	ldr	r3, [pc, #320]	@ (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d005      	beq.n	8004826 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800481a:	4b4d      	ldr	r3, [pc, #308]	@ (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	0f1b      	lsrs	r3, r3, #28
 8004820:	f003 030f 	and.w	r3, r3, #15
 8004824:	e006      	b.n	8004834 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8004826:	4b4a      	ldr	r3, [pc, #296]	@ (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004828:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800482c:	041b      	lsls	r3, r3, #16
 800482e:	0f1b      	lsrs	r3, r3, #28
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	4a49      	ldr	r2, [pc, #292]	@ (800495c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800483a:	ee07 3a90 	vmov	s15, r3
 800483e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	ee07 3a90 	vmov	s15, r3
 8004848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800485a:	ed97 6a02 	vldr	s12, [r7, #8]
 800485e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800486a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800486e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004876:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800487a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800487c:	4b34      	ldr	r3, [pc, #208]	@ (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800487e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004880:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d017      	beq.n	80048b8 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004888:	4b31      	ldr	r3, [pc, #196]	@ (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800488a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800488c:	0a5b      	lsrs	r3, r3, #9
 800488e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800489a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800489e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80048a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80048a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ae:	ee17 2a90 	vmov	r2, s15
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	e002      	b.n	80048be <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80048be:	4b24      	ldr	r3, [pc, #144]	@ (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80048c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d017      	beq.n	80048fa <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80048ca:	4b21      	ldr	r3, [pc, #132]	@ (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80048cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ce:	0c1b      	lsrs	r3, r3, #16
 80048d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048d4:	ee07 3a90 	vmov	s15, r3
 80048d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80048dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048e0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80048e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80048e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048f0:	ee17 2a90 	vmov	r2, s15
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	605a      	str	r2, [r3, #4]
 80048f8:	e002      	b.n	8004900 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004900:	4b13      	ldr	r3, [pc, #76]	@ (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004904:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d017      	beq.n	800493c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800490c:	4b10      	ldr	r3, [pc, #64]	@ (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800490e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004910:	0e1b      	lsrs	r3, r3, #24
 8004912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004916:	ee07 3a90 	vmov	s15, r3
 800491a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800491e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004922:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004926:	edd7 6a07 	vldr	s13, [r7, #28]
 800492a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800492e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004932:	ee17 2a90 	vmov	r2, s15
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800493a:	e002      	b.n	8004942 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	609a      	str	r2, [r3, #8]
}
 8004942:	bf00      	nop
 8004944:	3724      	adds	r7, #36	@ 0x24
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	46020c00 	.word	0x46020c00
 8004954:	4b742400 	.word	0x4b742400
 8004958:	46000000 	.word	0x46000000
 800495c:	08008590 	.word	0x08008590

08004960 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08e      	sub	sp, #56	@ 0x38
 8004964:	af00      	add	r7, sp, #0
 8004966:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800496a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800496e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8004972:	430b      	orrs	r3, r1
 8004974:	d145      	bne.n	8004a02 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004976:	4b9b      	ldr	r3, [pc, #620]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004978:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800497c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004980:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004982:	4b98      	ldr	r3, [pc, #608]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b02      	cmp	r3, #2
 800498e:	d108      	bne.n	80049a2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004996:	d104      	bne.n	80049a2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004998:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800499c:	637b      	str	r3, [r7, #52]	@ 0x34
 800499e:	f001 b912 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80049a2:	4b90      	ldr	r3, [pc, #576]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80049a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049b0:	d114      	bne.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80049b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049b8:	d110      	bne.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80049ba:	4b8a      	ldr	r3, [pc, #552]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80049bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049c8:	d103      	bne.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80049ca:	23fa      	movs	r3, #250	@ 0xfa
 80049cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80049ce:	f001 b8fa 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80049d2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80049d6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80049d8:	f001 b8f5 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80049dc:	4b81      	ldr	r3, [pc, #516]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049e8:	d107      	bne.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80049ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049f0:	d103      	bne.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80049f2:	4b7d      	ldr	r3, [pc, #500]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80049f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80049f6:	f001 b8e6 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80049fe:	f001 b8e2 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004a02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a06:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004a0a:	430b      	orrs	r3, r1
 8004a0c:	d151      	bne.n	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004a0e:	4b75      	ldr	r3, [pc, #468]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004a10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a14:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004a18:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1c:	2b80      	cmp	r3, #128	@ 0x80
 8004a1e:	d035      	beq.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a22:	2b80      	cmp	r3, #128	@ 0x80
 8004a24:	d841      	bhi.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a28:	2b60      	cmp	r3, #96	@ 0x60
 8004a2a:	d02a      	beq.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2e:	2b60      	cmp	r3, #96	@ 0x60
 8004a30:	d83b      	bhi.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a34:	2b40      	cmp	r3, #64	@ 0x40
 8004a36:	d009      	beq.n	8004a4c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3a:	2b40      	cmp	r3, #64	@ 0x40
 8004a3c:	d835      	bhi.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00c      	beq.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a46:	2b20      	cmp	r3, #32
 8004a48:	d012      	beq.n	8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004a4a:	e02e      	b.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff fb77 	bl	8004144 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a5a:	f001 b8b4 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a5e:	f107 0318 	add.w	r3, r7, #24
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff fcc8 	bl	80043f8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a6c:	f001 b8ab 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a70:	f107 030c 	add.w	r3, r7, #12
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7ff fe19 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a7e:	f001 b8a2 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004a82:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004a86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a88:	f001 b89d 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a8c:	4b55      	ldr	r3, [pc, #340]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a98:	d103      	bne.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004a9a:	4b54      	ldr	r3, [pc, #336]	@ (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004a9c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004a9e:	f001 b892 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004aa6:	f001 b88e 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004aae:	f001 b88a 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        break;
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8004ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ab6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004aba:	430b      	orrs	r3, r1
 8004abc:	d126      	bne.n	8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8004abe:	4b49      	ldr	r3, [pc, #292]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004ac0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ac4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ac8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004aca:	4b46      	ldr	r3, [pc, #280]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ad6:	d106      	bne.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d103      	bne.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 8004ade:	4b43      	ldr	r3, [pc, #268]	@ (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004ae0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ae2:	f001 b870 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8004ae6:	4b3f      	ldr	r3, [pc, #252]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004af2:	d107      	bne.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8004af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004afa:	d103      	bne.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 8004afc:	4b3c      	ldr	r3, [pc, #240]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004afe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b00:	f001 b861 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b08:	f001 b85d 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004b0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b10:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8004b14:	430b      	orrs	r3, r1
 8004b16:	d171      	bne.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004b18:	4b32      	ldr	r3, [pc, #200]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b1e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004b22:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b26:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004b2a:	d034      	beq.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004b32:	d853      	bhi.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b3a:	d00b      	beq.n	8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b42:	d84b      	bhi.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d016      	beq.n	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b50:	d009      	beq.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8004b52:	e043      	b.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff faf3 	bl	8004144 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b62:	f001 b830 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b66:	f107 0318 	add.w	r3, r7, #24
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff fc44 	bl	80043f8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b74:	f001 b827 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004b78:	4b1a      	ldr	r3, [pc, #104]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b84:	d103      	bne.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 8004b86:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004b88:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004b8a:	f001 b81c 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b92:	f001 b818 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004b96:	4b13      	ldr	r3, [pc, #76]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b20      	cmp	r3, #32
 8004ba0:	d118      	bne.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ba2:	4b10      	ldr	r3, [pc, #64]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d005      	beq.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004bae:	4b0d      	ldr	r3, [pc, #52]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	0e1b      	lsrs	r3, r3, #24
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	e006      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8004bba:	4b0a      	ldr	r3, [pc, #40]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004bbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004bc0:	041b      	lsls	r3, r3, #16
 8004bc2:	0e1b      	lsrs	r3, r3, #24
 8004bc4:	f003 030f 	and.w	r3, r3, #15
 8004bc8:	4a0b      	ldr	r2, [pc, #44]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004bd0:	f000 bff9 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bd8:	f000 bff5 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004be0:	f000 bff1 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004be4:	46020c00 	.word	0x46020c00
 8004be8:	0007a120 	.word	0x0007a120
 8004bec:	00f42400 	.word	0x00f42400
 8004bf0:	007a1200 	.word	0x007a1200
 8004bf4:	02dc6c00 	.word	0x02dc6c00
 8004bf8:	08008590 	.word	0x08008590
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004bfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c00:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004c04:	430b      	orrs	r3, r1
 8004c06:	d17f      	bne.n	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004c08:	4ba8      	ldr	r3, [pc, #672]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004c0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c12:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d165      	bne.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004c1a:	4ba4      	ldr	r3, [pc, #656]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c20:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004c24:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8004c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c28:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004c2c:	d034      	beq.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c30:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004c34:	d853      	bhi.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8004c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c3c:	d00b      	beq.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c44:	d84b      	bhi.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8004c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d016      	beq.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c52:	d009      	beq.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8004c54:	e043      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7ff fa72 	bl	8004144 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c62:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004c64:	f000 bfaf 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c68:	f107 0318 	add.w	r3, r7, #24
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff fbc3 	bl	80043f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004c76:	f000 bfa6 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004c7a:	4b8c      	ldr	r3, [pc, #560]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c86:	d103      	bne.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 8004c88:	4b89      	ldr	r3, [pc, #548]	@ (8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8004c8a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004c8c:	f000 bf9b 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004c94:	f000 bf97 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004c98:	4b84      	ldr	r3, [pc, #528]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0320 	and.w	r3, r3, #32
 8004ca0:	2b20      	cmp	r3, #32
 8004ca2:	d118      	bne.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ca4:	4b81      	ldr	r3, [pc, #516]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8004cb0:	4b7e      	ldr	r3, [pc, #504]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	0e1b      	lsrs	r3, r3, #24
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	e006      	b.n	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8004cbc:	4b7b      	ldr	r3, [pc, #492]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004cc2:	041b      	lsls	r3, r3, #16
 8004cc4:	0e1b      	lsrs	r3, r3, #24
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	4a7a      	ldr	r2, [pc, #488]	@ (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8004ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cd0:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004cd2:	f000 bf78 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004cda:	f000 bf74 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004ce2:	f000 bf70 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cec:	d108      	bne.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004cee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff fa26 	bl	8004144 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cfc:	f000 bf63 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d04:	f000 bf5f 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d0c:	1e51      	subs	r1, r2, #1
 8004d0e:	430b      	orrs	r3, r1
 8004d10:	d136      	bne.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004d12:	4b66      	ldr	r3, [pc, #408]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d104      	bne.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004d24:	f7fe fc22 	bl	800356c <HAL_RCC_GetPCLK2Freq>
 8004d28:	6378      	str	r0, [r7, #52]	@ 0x34
 8004d2a:	f000 bf4c 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d104      	bne.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004d34:	f7fe faea 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8004d38:	6378      	str	r0, [r7, #52]	@ 0x34
 8004d3a:	f000 bf44 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004d3e:	4b5b      	ldr	r3, [pc, #364]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d4a:	d106      	bne.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d103      	bne.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 8004d52:	4b59      	ldr	r3, [pc, #356]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004d54:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d56:	f000 bf36 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004d5a:	4b54      	ldr	r3, [pc, #336]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004d5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d107      	bne.n	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d104      	bne.n	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 8004d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d72:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d74:	f000 bf27 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d7c:	f000 bf23 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d84:	1f11      	subs	r1, r2, #4
 8004d86:	430b      	orrs	r3, r1
 8004d88:	d136      	bne.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004d8a:	4b48      	ldr	r3, [pc, #288]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d90:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004d94:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d104      	bne.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004d9c:	f7fe fbd2 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 8004da0:	6378      	str	r0, [r7, #52]	@ 0x34
 8004da2:	f000 bf10 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8004da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da8:	2b10      	cmp	r3, #16
 8004daa:	d104      	bne.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004dac:	f7fe faae 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8004db0:	6378      	str	r0, [r7, #52]	@ 0x34
 8004db2:	f000 bf08 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004db6:	4b3d      	ldr	r3, [pc, #244]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dc2:	d106      	bne.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	d103      	bne.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 8004dca:	4b3b      	ldr	r3, [pc, #236]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dce:	f000 befa 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004dd2:	4b36      	ldr	r3, [pc, #216]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004dd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d107      	bne.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8004de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de2:	2b30      	cmp	r3, #48	@ 0x30
 8004de4:	d104      	bne.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 8004de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dec:	f000 beeb 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004df4:	f000 bee7 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8004df8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dfc:	f1a2 0108 	sub.w	r1, r2, #8
 8004e00:	430b      	orrs	r3, r1
 8004e02:	d136      	bne.n	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004e04:	4b29      	ldr	r3, [pc, #164]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e0a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e0e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d104      	bne.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004e16:	f7fe fb95 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 8004e1a:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e1c:	f000 bed3 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e22:	2b40      	cmp	r3, #64	@ 0x40
 8004e24:	d104      	bne.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004e26:	f7fe fa71 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8004e2a:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e2c:	f000 becb 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004e30:	4b1e      	ldr	r3, [pc, #120]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e3c:	d106      	bne.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e40:	2b80      	cmp	r3, #128	@ 0x80
 8004e42:	d103      	bne.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 8004e44:	4b1c      	ldr	r3, [pc, #112]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e48:	f000 bebd 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004e4c:	4b17      	ldr	r3, [pc, #92]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004e4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d107      	bne.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5c:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e5e:	d104      	bne.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 8004e60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e66:	f000 beae 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e6e:	f000 beaa 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8004e72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e76:	f1a2 0110 	sub.w	r1, r2, #16
 8004e7a:	430b      	orrs	r3, r1
 8004e7c:	d141      	bne.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e88:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d104      	bne.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004e90:	f7fe fb58 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 8004e94:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e96:	f000 be96 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ea0:	d10c      	bne.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004ea2:	f7fe fa33 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8004ea6:	6378      	str	r0, [r7, #52]	@ 0x34
 8004ea8:	f000 be8d 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004eac:	46020c00 	.word	0x46020c00
 8004eb0:	02dc6c00 	.word	0x02dc6c00
 8004eb4:	08008590 	.word	0x08008590
 8004eb8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004ebc:	4baa      	ldr	r3, [pc, #680]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ec4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ec8:	d107      	bne.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8004eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ecc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ed0:	d103      	bne.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8004ed2:	4ba6      	ldr	r3, [pc, #664]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004ed4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ed6:	f000 be76 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004eda:	4ba3      	ldr	r3, [pc, #652]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004edc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d108      	bne.n	8004efa <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004eee:	d104      	bne.n	8004efa <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 8004ef0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ef4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ef6:	f000 be66 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004efe:	f000 be62 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f06:	f1a2 0120 	sub.w	r1, r2, #32
 8004f0a:	430b      	orrs	r3, r1
 8004f0c:	d158      	bne.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004f0e:	4b96      	ldr	r3, [pc, #600]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004f10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d104      	bne.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8004f20:	f7fe fb38 	bl	8003594 <HAL_RCC_GetPCLK3Freq>
 8004f24:	6378      	str	r0, [r7, #52]	@ 0x34
 8004f26:	f000 be4e 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d104      	bne.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004f30:	f7fe f9ec 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8004f34:	6378      	str	r0, [r7, #52]	@ 0x34
 8004f36:	f000 be46 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004f3a:	4b8b      	ldr	r3, [pc, #556]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f46:	d106      	bne.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8004f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d103      	bne.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 8004f4e:	4b87      	ldr	r3, [pc, #540]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f52:	f000 be38 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004f56:	4b84      	ldr	r3, [pc, #528]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d107      	bne.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d104      	bne.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 8004f6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f70:	f000 be29 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004f74:	4b7c      	ldr	r3, [pc, #496]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	2b20      	cmp	r3, #32
 8004f7e:	d11b      	bne.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d118      	bne.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f86:	4b78      	ldr	r3, [pc, #480]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 8004f92:	4b75      	ldr	r3, [pc, #468]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	0e1b      	lsrs	r3, r3, #24
 8004f98:	f003 030f 	and.w	r3, r3, #15
 8004f9c:	e006      	b.n	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8004f9e:	4b72      	ldr	r3, [pc, #456]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004fa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004fa4:	041b      	lsls	r3, r3, #16
 8004fa6:	0e1b      	lsrs	r3, r3, #24
 8004fa8:	f003 030f 	and.w	r3, r3, #15
 8004fac:	4a70      	ldr	r2, [pc, #448]	@ (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fb4:	f000 be07 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fbc:	f000 be03 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fc4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8004fc8:	430b      	orrs	r3, r1
 8004fca:	d16c      	bne.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004fcc:	4b66      	ldr	r3, [pc, #408]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004fce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fd2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004fd6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fde:	d104      	bne.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004fe0:	f7fe f994 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8004fe4:	6378      	str	r0, [r7, #52]	@ 0x34
 8004fe6:	f000 bdee 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8004fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ff0:	d108      	bne.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ff2:	f107 0318 	add.w	r3, r7, #24
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff f9fe 	bl	80043f8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005000:	f000 bde1 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005006:	2b00      	cmp	r3, #0
 8005008:	d104      	bne.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800500a:	f7fe fa81 	bl	8003510 <HAL_RCC_GetHCLKFreq>
 800500e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005010:	f000 bdd9 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8005014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005016:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800501a:	d122      	bne.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800501c:	4b52      	ldr	r3, [pc, #328]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0320 	and.w	r3, r3, #32
 8005024:	2b20      	cmp	r3, #32
 8005026:	d118      	bne.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005028:	4b4f      	ldr	r3, [pc, #316]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d005      	beq.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8005034:	4b4c      	ldr	r3, [pc, #304]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	0e1b      	lsrs	r3, r3, #24
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	e006      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8005040:	4b49      	ldr	r3, [pc, #292]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005042:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005046:	041b      	lsls	r3, r3, #16
 8005048:	0e1b      	lsrs	r3, r3, #24
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	4a48      	ldr	r2, [pc, #288]	@ (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005054:	637b      	str	r3, [r7, #52]	@ 0x34
 8005056:	f000 bdb6 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 800505a:	2300      	movs	r3, #0
 800505c:	637b      	str	r3, [r7, #52]	@ 0x34
 800505e:	f000 bdb2 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005062:	4b41      	ldr	r3, [pc, #260]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800506a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800506e:	d107      	bne.n	8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8005070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005072:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005076:	d103      	bne.n	8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 8005078:	4b3c      	ldr	r3, [pc, #240]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800507a:	637b      	str	r3, [r7, #52]	@ 0x34
 800507c:	f000 bda3 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005080:	4b39      	ldr	r3, [pc, #228]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005088:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800508c:	d107      	bne.n	800509e <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 800508e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005090:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005094:	d103      	bne.n	800509e <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 8005096:	4b35      	ldr	r3, [pc, #212]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005098:	637b      	str	r3, [r7, #52]	@ 0x34
 800509a:	f000 bd94 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800509e:	2300      	movs	r3, #0
 80050a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80050a2:	f000 bd90 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80050a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050aa:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80050ae:	430b      	orrs	r3, r1
 80050b0:	d160      	bne.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80050b2:	4b2d      	ldr	r3, [pc, #180]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80050b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80050be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d84c      	bhi.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 80050c4:	a201      	add	r2, pc, #4	@ (adr r2, 80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80050c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ca:	bf00      	nop
 80050cc:	08005105 	.word	0x08005105
 80050d0:	080050e1 	.word	0x080050e1
 80050d4:	080050f3 	.word	0x080050f3
 80050d8:	0800510f 	.word	0x0800510f
 80050dc:	08005119 	.word	0x08005119
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff f82d 	bl	8004144 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80050ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050ee:	f000 bd6a 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050f2:	f107 030c 	add.w	r3, r7, #12
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7ff fad8 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005100:	f000 bd61 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005104:	f7fe fa04 	bl	8003510 <HAL_RCC_GetHCLKFreq>
 8005108:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800510a:	f000 bd5c 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800510e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005112:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005114:	f000 bd57 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005118:	4b13      	ldr	r3, [pc, #76]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0320 	and.w	r3, r3, #32
 8005120:	2b20      	cmp	r3, #32
 8005122:	d118      	bne.n	8005156 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005124:	4b10      	ldr	r3, [pc, #64]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d005      	beq.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8005130:	4b0d      	ldr	r3, [pc, #52]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	0e1b      	lsrs	r3, r3, #24
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	e006      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 800513c:	4b0a      	ldr	r3, [pc, #40]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800513e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005142:	041b      	lsls	r3, r3, #16
 8005144:	0e1b      	lsrs	r3, r3, #24
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	4a09      	ldr	r2, [pc, #36]	@ (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800514c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005150:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005152:	f000 bd38 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800515a:	f000 bd34 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005162:	f000 bd30 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005166:	bf00      	nop
 8005168:	46020c00 	.word	0x46020c00
 800516c:	00f42400 	.word	0x00f42400
 8005170:	08008590 	.word	0x08008590
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8005174:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005178:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800517c:	430b      	orrs	r3, r1
 800517e:	d167      	bne.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8005180:	4ba0      	ldr	r3, [pc, #640]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005182:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005186:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800518a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800518c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005192:	d036      	beq.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005196:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800519a:	d855      	bhi.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800519c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80051a2:	d029      	beq.n	80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 80051a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80051aa:	d84d      	bhi.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80051ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051b2:	d013      	beq.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 80051b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051ba:	d845      	bhi.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80051bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d015      	beq.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 80051c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051c8:	d13e      	bne.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fe ffb8 	bl	8004144 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80051d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80051d8:	f000 bcf5 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051dc:	f107 030c 	add.w	r3, r7, #12
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff fa63 	bl	80046ac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80051ea:	f000 bcec 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80051ee:	f7fe f98f 	bl	8003510 <HAL_RCC_GetHCLKFreq>
 80051f2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80051f4:	f000 bce7 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80051f8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80051fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80051fe:	f000 bce2 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005202:	4b80      	ldr	r3, [pc, #512]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0320 	and.w	r3, r3, #32
 800520a:	2b20      	cmp	r3, #32
 800520c:	d118      	bne.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800520e:	4b7d      	ldr	r3, [pc, #500]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d005      	beq.n	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800521a:	4b7a      	ldr	r3, [pc, #488]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	0e1b      	lsrs	r3, r3, #24
 8005220:	f003 030f 	and.w	r3, r3, #15
 8005224:	e006      	b.n	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 8005226:	4b77      	ldr	r3, [pc, #476]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005228:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800522c:	041b      	lsls	r3, r3, #16
 800522e:	0e1b      	lsrs	r3, r3, #24
 8005230:	f003 030f 	and.w	r3, r3, #15
 8005234:	4a74      	ldr	r2, [pc, #464]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8005236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800523a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800523c:	f000 bcc3 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005244:	f000 bcbf 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800524c:	f000 bcbb 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8005250:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005254:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8005258:	430b      	orrs	r3, r1
 800525a:	d14c      	bne.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800525c:	4b69      	ldr	r3, [pc, #420]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800525e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005262:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005266:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526a:	2b00      	cmp	r3, #0
 800526c:	d104      	bne.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800526e:	f7fe f969 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 8005272:	6378      	str	r0, [r7, #52]	@ 0x34
 8005274:	f000 bca7 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800527e:	d104      	bne.n	800528a <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005280:	f7fe f844 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8005284:	6378      	str	r0, [r7, #52]	@ 0x34
 8005286:	f000 bc9e 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800528a:	4b5e      	ldr	r3, [pc, #376]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005296:	d107      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 8005298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800529e:	d103      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 80052a0:	4b5a      	ldr	r3, [pc, #360]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80052a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80052a4:	f000 bc8f 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80052a8:	4b56      	ldr	r3, [pc, #344]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	d11c      	bne.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 80052b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052ba:	d118      	bne.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80052bc:	4b51      	ldr	r3, [pc, #324]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d005      	beq.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 80052c8:	4b4e      	ldr	r3, [pc, #312]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	0e1b      	lsrs	r3, r3, #24
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	e006      	b.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 80052d4:	4b4b      	ldr	r3, [pc, #300]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80052d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052da:	041b      	lsls	r3, r3, #16
 80052dc:	0e1b      	lsrs	r3, r3, #24
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	4a49      	ldr	r2, [pc, #292]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80052e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ea:	f000 bc6c 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80052f2:	f000 bc68 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80052f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052fa:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80052fe:	430b      	orrs	r3, r1
 8005300:	d14c      	bne.n	800539c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005302:	4b40      	ldr	r3, [pc, #256]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005308:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800530c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800530e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005310:	2b00      	cmp	r3, #0
 8005312:	d104      	bne.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005314:	f7fe f916 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 8005318:	6378      	str	r0, [r7, #52]	@ 0x34
 800531a:	f000 bc54 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800531e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005324:	d104      	bne.n	8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005326:	f7fd fff1 	bl	800330c <HAL_RCC_GetSysClockFreq>
 800532a:	6378      	str	r0, [r7, #52]	@ 0x34
 800532c:	f000 bc4b 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005330:	4b34      	ldr	r3, [pc, #208]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005338:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800533c:	d107      	bne.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 800533e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005340:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005344:	d103      	bne.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 8005346:	4b31      	ldr	r3, [pc, #196]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005348:	637b      	str	r3, [r7, #52]	@ 0x34
 800534a:	f000 bc3c 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800534e:	4b2d      	ldr	r3, [pc, #180]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	2b20      	cmp	r3, #32
 8005358:	d11c      	bne.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 800535a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005360:	d118      	bne.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005362:	4b28      	ldr	r3, [pc, #160]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d005      	beq.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 800536e:	4b25      	ldr	r3, [pc, #148]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	0e1b      	lsrs	r3, r3, #24
 8005374:	f003 030f 	and.w	r3, r3, #15
 8005378:	e006      	b.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 800537a:	4b22      	ldr	r3, [pc, #136]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800537c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005380:	041b      	lsls	r3, r3, #16
 8005382:	0e1b      	lsrs	r3, r3, #24
 8005384:	f003 030f 	and.w	r3, r3, #15
 8005388:	4a1f      	ldr	r2, [pc, #124]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800538a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800538e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005390:	f000 bc19 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	637b      	str	r3, [r7, #52]	@ 0x34
 8005398:	f000 bc15 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800539c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053a0:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80053a4:	430b      	orrs	r3, r1
 80053a6:	d157      	bne.n	8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80053a8:	4b16      	ldr	r3, [pc, #88]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80053aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80053b2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80053b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80053b8:	d02a      	beq.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80053ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053bc:	2bc0      	cmp	r3, #192	@ 0xc0
 80053be:	d848      	bhi.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80053c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c2:	2b80      	cmp	r3, #128	@ 0x80
 80053c4:	d00d      	beq.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80053c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c8:	2b80      	cmp	r3, #128	@ 0x80
 80053ca:	d842      	bhi.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80053cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 80053d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d4:	2b40      	cmp	r3, #64	@ 0x40
 80053d6:	d011      	beq.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80053d8:	e03b      	b.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80053da:	f7fe f8db 	bl	8003594 <HAL_RCC_GetPCLK3Freq>
 80053de:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80053e0:	e3f1      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053e2:	4b08      	ldr	r3, [pc, #32]	@ (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ee:	d102      	bne.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 80053f0:	4b06      	ldr	r3, [pc, #24]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80053f2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80053f4:	e3e7      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053fa:	e3e4      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80053fc:	f7fd ff86 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8005400:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005402:	e3e0      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005404:	46020c00 	.word	0x46020c00
 8005408:	08008590 	.word	0x08008590
 800540c:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005410:	4ba3      	ldr	r3, [pc, #652]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b20      	cmp	r3, #32
 800541a:	d117      	bne.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800541c:	4ba0      	ldr	r3, [pc, #640]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d005      	beq.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 8005428:	4b9d      	ldr	r3, [pc, #628]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	0e1b      	lsrs	r3, r3, #24
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	e006      	b.n	8005442 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8005434:	4b9a      	ldr	r3, [pc, #616]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005436:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800543a:	041b      	lsls	r3, r3, #16
 800543c:	0e1b      	lsrs	r3, r3, #24
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	4a98      	ldr	r2, [pc, #608]	@ (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005448:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800544a:	e3bc      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005450:	e3b9      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005456:	e3b6      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8005458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800545c:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8005460:	430b      	orrs	r3, r1
 8005462:	d147      	bne.n	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005464:	4b8e      	ldr	r3, [pc, #568]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800546a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800546e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005472:	2b00      	cmp	r3, #0
 8005474:	d103      	bne.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005476:	f7fe f865 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 800547a:	6378      	str	r0, [r7, #52]	@ 0x34
 800547c:	e3a3      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800547e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005480:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005484:	d103      	bne.n	800548e <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005486:	f7fd ff41 	bl	800330c <HAL_RCC_GetSysClockFreq>
 800548a:	6378      	str	r0, [r7, #52]	@ 0x34
 800548c:	e39b      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800548e:	4b84      	ldr	r3, [pc, #528]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800549a:	d106      	bne.n	80054aa <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800549c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054a2:	d102      	bne.n	80054aa <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 80054a4:	4b80      	ldr	r3, [pc, #512]	@ (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80054a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80054a8:	e38d      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80054aa:	4b7d      	ldr	r3, [pc, #500]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b20      	cmp	r3, #32
 80054b4:	d11b      	bne.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 80054b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80054bc:	d117      	bne.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80054be:	4b78      	ldr	r3, [pc, #480]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d005      	beq.n	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 80054ca:	4b75      	ldr	r3, [pc, #468]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	0e1b      	lsrs	r3, r3, #24
 80054d0:	f003 030f 	and.w	r3, r3, #15
 80054d4:	e006      	b.n	80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 80054d6:	4b72      	ldr	r3, [pc, #456]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80054d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80054dc:	041b      	lsls	r3, r3, #16
 80054de:	0e1b      	lsrs	r3, r3, #24
 80054e0:	f003 030f 	and.w	r3, r3, #15
 80054e4:	4a6f      	ldr	r2, [pc, #444]	@ (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80054e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80054ec:	e36b      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80054f2:	e368      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80054f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054f8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80054fc:	430b      	orrs	r3, r1
 80054fe:	d164      	bne.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8005500:	4b67      	ldr	r3, [pc, #412]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005502:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800550a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800550c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550e:	2b00      	cmp	r3, #0
 8005510:	d120      	bne.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005512:	4b63      	ldr	r3, [pc, #396]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b20      	cmp	r3, #32
 800551c:	d117      	bne.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800551e:	4b60      	ldr	r3, [pc, #384]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d005      	beq.n	8005536 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 800552a:	4b5d      	ldr	r3, [pc, #372]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	0e1b      	lsrs	r3, r3, #24
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	e006      	b.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8005536:	4b5a      	ldr	r3, [pc, #360]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005538:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800553c:	041b      	lsls	r3, r3, #16
 800553e:	0e1b      	lsrs	r3, r3, #24
 8005540:	f003 030f 	and.w	r3, r3, #15
 8005544:	4a57      	ldr	r2, [pc, #348]	@ (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800554a:	637b      	str	r3, [r7, #52]	@ 0x34
 800554c:	e33b      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 800554e:	2300      	movs	r3, #0
 8005550:	637b      	str	r3, [r7, #52]	@ 0x34
 8005552:	e338      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8005554:	4b52      	ldr	r3, [pc, #328]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005556:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800555a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800555e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005562:	d112      	bne.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 8005564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800556a:	d10e      	bne.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800556c:	4b4c      	ldr	r3, [pc, #304]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800556e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005576:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800557a:	d102      	bne.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 800557c:	23fa      	movs	r3, #250	@ 0xfa
 800557e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005580:	e321      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005582:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005586:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005588:	e31d      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800558a:	4b45      	ldr	r3, [pc, #276]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005596:	d106      	bne.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 8005598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800559e:	d102      	bne.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 80055a0:	4b41      	ldr	r3, [pc, #260]	@ (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80055a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80055a4:	e30f      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80055a6:	4b3e      	ldr	r3, [pc, #248]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80055a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d107      	bne.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 80055b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055ba:	d103      	bne.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 80055bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80055c2:	e300      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80055c8:	e2fd      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80055ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055ce:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80055d2:	430b      	orrs	r3, r1
 80055d4:	d16a      	bne.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80055d6:	4b32      	ldr	r3, [pc, #200]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80055d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80055e0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80055e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d120      	bne.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80055e8:	4b2d      	ldr	r3, [pc, #180]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b20      	cmp	r3, #32
 80055f2:	d117      	bne.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80055f4:	4b2a      	ldr	r3, [pc, #168]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d005      	beq.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8005600:	4b27      	ldr	r3, [pc, #156]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	0e1b      	lsrs	r3, r3, #24
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	e006      	b.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 800560c:	4b24      	ldr	r3, [pc, #144]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800560e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005612:	041b      	lsls	r3, r3, #16
 8005614:	0e1b      	lsrs	r3, r3, #24
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	4a22      	ldr	r2, [pc, #136]	@ (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800561c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005620:	637b      	str	r3, [r7, #52]	@ 0x34
 8005622:	e2d0      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	637b      	str	r3, [r7, #52]	@ 0x34
 8005628:	e2cd      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800562a:	4b1d      	ldr	r3, [pc, #116]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800562c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005630:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005634:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005638:	d112      	bne.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800563a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005640:	d10e      	bne.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005642:	4b17      	ldr	r3, [pc, #92]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005644:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800564c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005650:	d102      	bne.n	8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8005652:	23fa      	movs	r3, #250	@ 0xfa
 8005654:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005656:	e2b6      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005658:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800565c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800565e:	e2b2      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005660:	4b0f      	ldr	r3, [pc, #60]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800566c:	d106      	bne.n	800567c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 800566e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005670:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005674:	d102      	bne.n	800567c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8005676:	4b0c      	ldr	r3, [pc, #48]	@ (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8005678:	637b      	str	r3, [r7, #52]	@ 0x34
 800567a:	e2a4      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800567c:	4b08      	ldr	r3, [pc, #32]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800567e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b02      	cmp	r3, #2
 8005688:	d107      	bne.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800568a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005690:	d103      	bne.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8005692:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005696:	637b      	str	r3, [r7, #52]	@ 0x34
 8005698:	e295      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	637b      	str	r3, [r7, #52]	@ 0x34
 800569e:	e292      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80056a0:	46020c00 	.word	0x46020c00
 80056a4:	08008590 	.word	0x08008590
 80056a8:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80056ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056b0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80056b4:	430b      	orrs	r3, r1
 80056b6:	d147      	bne.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80056b8:	4b9a      	ldr	r3, [pc, #616]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80056ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056be:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80056c2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80056c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d103      	bne.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80056ca:	f7fd ff3b 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 80056ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80056d0:	e279      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80056d2:	4b94      	ldr	r3, [pc, #592]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80056d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056e0:	d112      	bne.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 80056e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80056e8:	d10e      	bne.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80056ea:	4b8e      	ldr	r3, [pc, #568]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80056ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056f8:	d102      	bne.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 80056fa:	23fa      	movs	r3, #250	@ 0xfa
 80056fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80056fe:	e262      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005700:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005704:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005706:	e25e      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005708:	4b86      	ldr	r3, [pc, #536]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005710:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005714:	d106      	bne.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 8005716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005718:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800571c:	d102      	bne.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 800571e:	4b82      	ldr	r3, [pc, #520]	@ (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005720:	637b      	str	r3, [r7, #52]	@ 0x34
 8005722:	e250      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005724:	4b7f      	ldr	r3, [pc, #508]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005726:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b02      	cmp	r3, #2
 8005730:	d107      	bne.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8005732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005734:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005738:	d103      	bne.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 800573a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800573e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005740:	e241      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	637b      	str	r3, [r7, #52]	@ 0x34
 8005746:	e23e      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800574c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8005750:	430b      	orrs	r3, r1
 8005752:	d12d      	bne.n	80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005754:	4b73      	ldr	r3, [pc, #460]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800575a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800575e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005760:	4b70      	ldr	r3, [pc, #448]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005768:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800576c:	d105      	bne.n	800577a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800576e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005770:	2b00      	cmp	r3, #0
 8005772:	d102      	bne.n	800577a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 8005774:	4b6c      	ldr	r3, [pc, #432]	@ (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005776:	637b      	str	r3, [r7, #52]	@ 0x34
 8005778:	e225      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800577a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005780:	d107      	bne.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005786:	4618      	mov	r0, r3
 8005788:	f7fe fcdc 	bl	8004144 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800578c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005790:	e219      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005794:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005798:	d107      	bne.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800579a:	f107 0318 	add.w	r3, r7, #24
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fe fe2a 	bl	80043f8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80057a8:	e20d      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80057ae:	e20a      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80057b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057b4:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80057b8:	430b      	orrs	r3, r1
 80057ba:	d156      	bne.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80057bc:	4b59      	ldr	r3, [pc, #356]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80057be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057c2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80057c6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80057c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057ce:	d028      	beq.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 80057d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057d6:	d845      	bhi.n	8005864 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 80057d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057de:	d013      	beq.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 80057e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057e6:	d83d      	bhi.n	8005864 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 80057e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d004      	beq.n	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 80057ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057f4:	d004      	beq.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 80057f6:	e035      	b.n	8005864 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80057f8:	f7fd feb8 	bl	800356c <HAL_RCC_GetPCLK2Freq>
 80057fc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80057fe:	e1e2      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005800:	f7fd fd84 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8005804:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005806:	e1de      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005808:	4b46      	ldr	r3, [pc, #280]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005810:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005814:	d102      	bne.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 8005816:	4b44      	ldr	r3, [pc, #272]	@ (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005818:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800581a:	e1d4      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005820:	e1d1      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005822:	4b40      	ldr	r3, [pc, #256]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b20      	cmp	r3, #32
 800582c:	d117      	bne.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800582e:	4b3d      	ldr	r3, [pc, #244]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d005      	beq.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 800583a:	4b3a      	ldr	r3, [pc, #232]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	0e1b      	lsrs	r3, r3, #24
 8005840:	f003 030f 	and.w	r3, r3, #15
 8005844:	e006      	b.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8005846:	4b37      	ldr	r3, [pc, #220]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005848:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800584c:	041b      	lsls	r3, r3, #16
 800584e:	0e1b      	lsrs	r3, r3, #24
 8005850:	f003 030f 	and.w	r3, r3, #15
 8005854:	4a35      	ldr	r2, [pc, #212]	@ (800592c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8005856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800585a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800585c:	e1b3      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005862:	e1b0      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005868:	e1ad      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800586a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800586e:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8005872:	430b      	orrs	r3, r1
 8005874:	d15c      	bne.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005876:	4b2b      	ldr	r3, [pc, #172]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800587c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005880:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005884:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005888:	d028      	beq.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 800588a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005890:	d845      	bhi.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8005892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005894:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005898:	d013      	beq.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800589a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058a0:	d83d      	bhi.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 80058a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d004      	beq.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 80058a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058ae:	d004      	beq.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 80058b0:	e035      	b.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80058b2:	f7fd fe47 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 80058b6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80058b8:	e185      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80058ba:	f7fd fd27 	bl	800330c <HAL_RCC_GetSysClockFreq>
 80058be:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80058c0:	e181      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058c2:	4b18      	ldr	r3, [pc, #96]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058ce:	d102      	bne.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 80058d0:	4b15      	ldr	r3, [pc, #84]	@ (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80058d2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80058d4:	e177      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058da:	e174      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80058dc:	4b11      	ldr	r3, [pc, #68]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	d117      	bne.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80058e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d005      	beq.n	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 80058f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	0e1b      	lsrs	r3, r3, #24
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	e006      	b.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8005900:	4b08      	ldr	r3, [pc, #32]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005902:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005906:	041b      	lsls	r3, r3, #16
 8005908:	0e1b      	lsrs	r3, r3, #24
 800590a:	f003 030f 	and.w	r3, r3, #15
 800590e:	4a07      	ldr	r2, [pc, #28]	@ (800592c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8005910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005914:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005916:	e156      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800591c:	e153      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 800591e:	2300      	movs	r3, #0
 8005920:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005922:	e150      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005924:	46020c00 	.word	0x46020c00
 8005928:	00f42400 	.word	0x00f42400
 800592c:	08008590 	.word	0x08008590
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005934:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8005938:	430b      	orrs	r3, r1
 800593a:	d176      	bne.n	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800593c:	4ba4      	ldr	r3, [pc, #656]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800593e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005942:	f003 0318 	and.w	r3, r3, #24
 8005946:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594a:	2b18      	cmp	r3, #24
 800594c:	d86a      	bhi.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 800594e:	a201      	add	r2, pc, #4	@ (adr r2, 8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8005950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005954:	080059b9 	.word	0x080059b9
 8005958:	08005a25 	.word	0x08005a25
 800595c:	08005a25 	.word	0x08005a25
 8005960:	08005a25 	.word	0x08005a25
 8005964:	08005a25 	.word	0x08005a25
 8005968:	08005a25 	.word	0x08005a25
 800596c:	08005a25 	.word	0x08005a25
 8005970:	08005a25 	.word	0x08005a25
 8005974:	080059c1 	.word	0x080059c1
 8005978:	08005a25 	.word	0x08005a25
 800597c:	08005a25 	.word	0x08005a25
 8005980:	08005a25 	.word	0x08005a25
 8005984:	08005a25 	.word	0x08005a25
 8005988:	08005a25 	.word	0x08005a25
 800598c:	08005a25 	.word	0x08005a25
 8005990:	08005a25 	.word	0x08005a25
 8005994:	080059c9 	.word	0x080059c9
 8005998:	08005a25 	.word	0x08005a25
 800599c:	08005a25 	.word	0x08005a25
 80059a0:	08005a25 	.word	0x08005a25
 80059a4:	08005a25 	.word	0x08005a25
 80059a8:	08005a25 	.word	0x08005a25
 80059ac:	08005a25 	.word	0x08005a25
 80059b0:	08005a25 	.word	0x08005a25
 80059b4:	080059e3 	.word	0x080059e3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80059b8:	f7fd fdec 	bl	8003594 <HAL_RCC_GetPCLK3Freq>
 80059bc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80059be:	e102      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80059c0:	f7fd fca4 	bl	800330c <HAL_RCC_GetSysClockFreq>
 80059c4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80059c6:	e0fe      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80059c8:	4b81      	ldr	r3, [pc, #516]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059d4:	d102      	bne.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 80059d6:	4b7f      	ldr	r3, [pc, #508]	@ (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 80059d8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80059da:	e0f4      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059e0:	e0f1      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80059e2:	4b7b      	ldr	r3, [pc, #492]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0320 	and.w	r3, r3, #32
 80059ea:	2b20      	cmp	r3, #32
 80059ec:	d117      	bne.n	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80059ee:	4b78      	ldr	r3, [pc, #480]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d005      	beq.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80059fa:	4b75      	ldr	r3, [pc, #468]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	0e1b      	lsrs	r3, r3, #24
 8005a00:	f003 030f 	and.w	r3, r3, #15
 8005a04:	e006      	b.n	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 8005a06:	4b72      	ldr	r3, [pc, #456]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005a08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a0c:	041b      	lsls	r3, r3, #16
 8005a0e:	0e1b      	lsrs	r3, r3, #24
 8005a10:	f003 030f 	and.w	r3, r3, #15
 8005a14:	4a70      	ldr	r2, [pc, #448]	@ (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a1a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005a1c:	e0d3      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a22:	e0d0      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a28:	e0cd      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005a2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a2e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8005a32:	430b      	orrs	r3, r1
 8005a34:	d155      	bne.n	8005ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005a36:	4b66      	ldr	r3, [pc, #408]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005a38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a3c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005a40:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a44:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a48:	d013      	beq.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a50:	d844      	bhi.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8005a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a58:	d013      	beq.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a60:	d83c      	bhi.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8005a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d014      	beq.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 8005a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a6e:	d014      	beq.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8005a70:	e034      	b.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a72:	f107 0318 	add.w	r3, r7, #24
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fe fcbe 	bl	80043f8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a80:	e0a1      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fe fb5c 	bl	8004144 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a90:	e099      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005a92:	f7fd fc3b 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8005a96:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005a98:	e095      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005a9a:	4b4d      	ldr	r3, [pc, #308]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0320 	and.w	r3, r3, #32
 8005aa2:	2b20      	cmp	r3, #32
 8005aa4:	d117      	bne.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005aa6:	4b4a      	ldr	r3, [pc, #296]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d005      	beq.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 8005ab2:	4b47      	ldr	r3, [pc, #284]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	0e1b      	lsrs	r3, r3, #24
 8005ab8:	f003 030f 	and.w	r3, r3, #15
 8005abc:	e006      	b.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 8005abe:	4b44      	ldr	r3, [pc, #272]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005ac0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ac4:	041b      	lsls	r3, r3, #16
 8005ac6:	0e1b      	lsrs	r3, r3, #24
 8005ac8:	f003 030f 	and.w	r3, r3, #15
 8005acc:	4a42      	ldr	r2, [pc, #264]	@ (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ad2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ad4:	e077      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ada:	e074      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ae0:	e071      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005ae2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ae6:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8005aea:	430b      	orrs	r3, r1
 8005aec:	d131      	bne.n	8005b52 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005aee:	4b38      	ldr	r3, [pc, #224]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005af0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005af4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005af8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005afa:	4b35      	ldr	r3, [pc, #212]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005afc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d106      	bne.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8005b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d103      	bne.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 8005b0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b14:	e057      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005b16:	4b2e      	ldr	r3, [pc, #184]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005b18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b24:	d112      	bne.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 8005b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b2c:	d10e      	bne.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005b2e:	4b28      	ldr	r3, [pc, #160]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005b30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b3c:	d102      	bne.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 8005b3e:	23fa      	movs	r3, #250	@ 0xfa
 8005b40:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005b42:	e040      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005b44:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005b48:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005b4a:	e03c      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b50:	e039      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005b52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b56:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005b5a:	430b      	orrs	r3, r1
 8005b5c:	d131      	bne.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005b60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b64:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005b68:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005b6a:	4b19      	ldr	r3, [pc, #100]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b76:	d105      	bne.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8005b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d102      	bne.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 8005b7e:	4b17      	ldr	r3, [pc, #92]	@ (8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 8005b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b82:	e020      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8005b84:	4b12      	ldr	r3, [pc, #72]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b90:	d106      	bne.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 8005b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b98:	d102      	bne.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005b9a:	4b11      	ldr	r3, [pc, #68]	@ (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b9e:	e012      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ba8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bac:	d106      	bne.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 8005bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bb4:	d102      	bne.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 8005bb6:	4b07      	ldr	r3, [pc, #28]	@ (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8005bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bba:	e004      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bc0:	e001      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8005bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3738      	adds	r7, #56	@ 0x38
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	46020c00 	.word	0x46020c00
 8005bd4:	00f42400 	.word	0x00f42400
 8005bd8:	08008590 	.word	0x08008590
 8005bdc:	02dc6c00 	.word	0x02dc6c00
 8005be0:	016e3600 	.word	0x016e3600

08005be4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005bec:	4b47      	ldr	r3, [pc, #284]	@ (8005d0c <RCCEx_PLL2_Config+0x128>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a46      	ldr	r2, [pc, #280]	@ (8005d0c <RCCEx_PLL2_Config+0x128>)
 8005bf2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005bf6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005bf8:	f7fb fd50 	bl	800169c <HAL_GetTick>
 8005bfc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bfe:	e008      	b.n	8005c12 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005c00:	f7fb fd4c 	bl	800169c <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d901      	bls.n	8005c12 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e077      	b.n	8005d02 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c12:	4b3e      	ldr	r3, [pc, #248]	@ (8005d0c <RCCEx_PLL2_Config+0x128>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1f0      	bne.n	8005c00 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8005d0c <RCCEx_PLL2_Config+0x128>)
 8005c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c22:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005c26:	f023 0303 	bic.w	r3, r3, #3
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	6811      	ldr	r1, [r2, #0]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6852      	ldr	r2, [r2, #4]
 8005c32:	3a01      	subs	r2, #1
 8005c34:	0212      	lsls	r2, r2, #8
 8005c36:	430a      	orrs	r2, r1
 8005c38:	4934      	ldr	r1, [pc, #208]	@ (8005d0c <RCCEx_PLL2_Config+0x128>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005c3e:	4b33      	ldr	r3, [pc, #204]	@ (8005d0c <RCCEx_PLL2_Config+0x128>)
 8005c40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c42:	4b33      	ldr	r3, [pc, #204]	@ (8005d10 <RCCEx_PLL2_Config+0x12c>)
 8005c44:	4013      	ands	r3, r2
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6892      	ldr	r2, [r2, #8]
 8005c4a:	3a01      	subs	r2, #1
 8005c4c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	68d2      	ldr	r2, [r2, #12]
 8005c54:	3a01      	subs	r2, #1
 8005c56:	0252      	lsls	r2, r2, #9
 8005c58:	b292      	uxth	r2, r2
 8005c5a:	4311      	orrs	r1, r2
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6912      	ldr	r2, [r2, #16]
 8005c60:	3a01      	subs	r2, #1
 8005c62:	0412      	lsls	r2, r2, #16
 8005c64:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005c68:	4311      	orrs	r1, r2
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6952      	ldr	r2, [r2, #20]
 8005c6e:	3a01      	subs	r2, #1
 8005c70:	0612      	lsls	r2, r2, #24
 8005c72:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005c76:	430a      	orrs	r2, r1
 8005c78:	4924      	ldr	r1, [pc, #144]	@ (8005d0c <RCCEx_PLL2_Config+0x128>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005c7e:	4b23      	ldr	r3, [pc, #140]	@ (8005d0c <RCCEx_PLL2_Config+0x128>)
 8005c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c82:	f023 020c 	bic.w	r2, r3, #12
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	4920      	ldr	r1, [pc, #128]	@ (8005d0c <RCCEx_PLL2_Config+0x128>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005c90:	4b1e      	ldr	r3, [pc, #120]	@ (8005d0c <RCCEx_PLL2_Config+0x128>)
 8005c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	491c      	ldr	r1, [pc, #112]	@ (8005d0c <RCCEx_PLL2_Config+0x128>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8005d0c <RCCEx_PLL2_Config+0x128>)
 8005ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8005d0c <RCCEx_PLL2_Config+0x128>)
 8005ca4:	f023 0310 	bic.w	r3, r3, #16
 8005ca8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005caa:	4b18      	ldr	r3, [pc, #96]	@ (8005d0c <RCCEx_PLL2_Config+0x128>)
 8005cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cb2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	69d2      	ldr	r2, [r2, #28]
 8005cba:	00d2      	lsls	r2, r2, #3
 8005cbc:	4913      	ldr	r1, [pc, #76]	@ (8005d0c <RCCEx_PLL2_Config+0x128>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005cc2:	4b12      	ldr	r3, [pc, #72]	@ (8005d0c <RCCEx_PLL2_Config+0x128>)
 8005cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc6:	4a11      	ldr	r2, [pc, #68]	@ (8005d0c <RCCEx_PLL2_Config+0x128>)
 8005cc8:	f043 0310 	orr.w	r3, r3, #16
 8005ccc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8005cce:	4b0f      	ldr	r3, [pc, #60]	@ (8005d0c <RCCEx_PLL2_Config+0x128>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a0e      	ldr	r2, [pc, #56]	@ (8005d0c <RCCEx_PLL2_Config+0x128>)
 8005cd4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005cd8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005cda:	f7fb fcdf 	bl	800169c <HAL_GetTick>
 8005cde:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ce0:	e008      	b.n	8005cf4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ce2:	f7fb fcdb 	bl	800169c <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d901      	bls.n	8005cf4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e006      	b.n	8005d02 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005cf4:	4b05      	ldr	r3, [pc, #20]	@ (8005d0c <RCCEx_PLL2_Config+0x128>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0f0      	beq.n	8005ce2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005d00:	2300      	movs	r3, #0

}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	46020c00 	.word	0x46020c00
 8005d10:	80800000 	.word	0x80800000

08005d14 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005d1c:	4b47      	ldr	r3, [pc, #284]	@ (8005e3c <RCCEx_PLL3_Config+0x128>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a46      	ldr	r2, [pc, #280]	@ (8005e3c <RCCEx_PLL3_Config+0x128>)
 8005d22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d26:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d28:	f7fb fcb8 	bl	800169c <HAL_GetTick>
 8005d2c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d2e:	e008      	b.n	8005d42 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005d30:	f7fb fcb4 	bl	800169c <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d901      	bls.n	8005d42 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e077      	b.n	8005e32 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d42:	4b3e      	ldr	r3, [pc, #248]	@ (8005e3c <RCCEx_PLL3_Config+0x128>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1f0      	bne.n	8005d30 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8005e3c <RCCEx_PLL3_Config+0x128>)
 8005d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d52:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005d56:	f023 0303 	bic.w	r3, r3, #3
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6811      	ldr	r1, [r2, #0]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6852      	ldr	r2, [r2, #4]
 8005d62:	3a01      	subs	r2, #1
 8005d64:	0212      	lsls	r2, r2, #8
 8005d66:	430a      	orrs	r2, r1
 8005d68:	4934      	ldr	r1, [pc, #208]	@ (8005e3c <RCCEx_PLL3_Config+0x128>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	630b      	str	r3, [r1, #48]	@ 0x30
 8005d6e:	4b33      	ldr	r3, [pc, #204]	@ (8005e3c <RCCEx_PLL3_Config+0x128>)
 8005d70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d72:	4b33      	ldr	r3, [pc, #204]	@ (8005e40 <RCCEx_PLL3_Config+0x12c>)
 8005d74:	4013      	ands	r3, r2
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6892      	ldr	r2, [r2, #8]
 8005d7a:	3a01      	subs	r2, #1
 8005d7c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	68d2      	ldr	r2, [r2, #12]
 8005d84:	3a01      	subs	r2, #1
 8005d86:	0252      	lsls	r2, r2, #9
 8005d88:	b292      	uxth	r2, r2
 8005d8a:	4311      	orrs	r1, r2
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6912      	ldr	r2, [r2, #16]
 8005d90:	3a01      	subs	r2, #1
 8005d92:	0412      	lsls	r2, r2, #16
 8005d94:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005d98:	4311      	orrs	r1, r2
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6952      	ldr	r2, [r2, #20]
 8005d9e:	3a01      	subs	r2, #1
 8005da0:	0612      	lsls	r2, r2, #24
 8005da2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005da6:	430a      	orrs	r2, r1
 8005da8:	4924      	ldr	r1, [pc, #144]	@ (8005e3c <RCCEx_PLL3_Config+0x128>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005dae:	4b23      	ldr	r3, [pc, #140]	@ (8005e3c <RCCEx_PLL3_Config+0x128>)
 8005db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db2:	f023 020c 	bic.w	r2, r3, #12
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	4920      	ldr	r1, [pc, #128]	@ (8005e3c <RCCEx_PLL3_Config+0x128>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8005e3c <RCCEx_PLL3_Config+0x128>)
 8005dc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	491c      	ldr	r1, [pc, #112]	@ (8005e3c <RCCEx_PLL3_Config+0x128>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005dce:	4b1b      	ldr	r3, [pc, #108]	@ (8005e3c <RCCEx_PLL3_Config+0x128>)
 8005dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd2:	4a1a      	ldr	r2, [pc, #104]	@ (8005e3c <RCCEx_PLL3_Config+0x128>)
 8005dd4:	f023 0310 	bic.w	r3, r3, #16
 8005dd8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005dda:	4b18      	ldr	r3, [pc, #96]	@ (8005e3c <RCCEx_PLL3_Config+0x128>)
 8005ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005de2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	69d2      	ldr	r2, [r2, #28]
 8005dea:	00d2      	lsls	r2, r2, #3
 8005dec:	4913      	ldr	r1, [pc, #76]	@ (8005e3c <RCCEx_PLL3_Config+0x128>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005df2:	4b12      	ldr	r3, [pc, #72]	@ (8005e3c <RCCEx_PLL3_Config+0x128>)
 8005df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df6:	4a11      	ldr	r2, [pc, #68]	@ (8005e3c <RCCEx_PLL3_Config+0x128>)
 8005df8:	f043 0310 	orr.w	r3, r3, #16
 8005dfc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8005e3c <RCCEx_PLL3_Config+0x128>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a0e      	ldr	r2, [pc, #56]	@ (8005e3c <RCCEx_PLL3_Config+0x128>)
 8005e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e08:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e0a:	f7fb fc47 	bl	800169c <HAL_GetTick>
 8005e0e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e10:	e008      	b.n	8005e24 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005e12:	f7fb fc43 	bl	800169c <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d901      	bls.n	8005e24 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e006      	b.n	8005e32 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e24:	4b05      	ldr	r3, [pc, #20]	@ (8005e3c <RCCEx_PLL3_Config+0x128>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0f0      	beq.n	8005e12 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	46020c00 	.word	0x46020c00
 8005e40:	80800000 	.word	0x80800000

08005e44 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e0fb      	b.n	800604e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a7f      	ldr	r2, [pc, #508]	@ (8006058 <HAL_SPI_Init+0x214>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d004      	beq.n	8005e6a <HAL_SPI_Init+0x26>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a7d      	ldr	r2, [pc, #500]	@ (800605c <HAL_SPI_Init+0x218>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	e000      	b.n	8005e6c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8005e6a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a78      	ldr	r2, [pc, #480]	@ (8006058 <HAL_SPI_Init+0x214>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d004      	beq.n	8005e86 <HAL_SPI_Init+0x42>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a76      	ldr	r2, [pc, #472]	@ (800605c <HAL_SPI_Init+0x218>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d105      	bne.n	8005e92 <HAL_SPI_Init+0x4e>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	2b0f      	cmp	r3, #15
 8005e8c:	d901      	bls.n	8005e92 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e0dd      	b.n	800604e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 ff2e 	bl	8006cf4 <SPI_GetPacketSize>
 8005e98:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a6e      	ldr	r2, [pc, #440]	@ (8006058 <HAL_SPI_Init+0x214>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d004      	beq.n	8005eae <HAL_SPI_Init+0x6a>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a6c      	ldr	r2, [pc, #432]	@ (800605c <HAL_SPI_Init+0x218>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d102      	bne.n	8005eb4 <HAL_SPI_Init+0x70>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2b08      	cmp	r3, #8
 8005eb2:	d816      	bhi.n	8005ee2 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005eb8:	4a69      	ldr	r2, [pc, #420]	@ (8006060 <HAL_SPI_Init+0x21c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00e      	beq.n	8005edc <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a68      	ldr	r2, [pc, #416]	@ (8006064 <HAL_SPI_Init+0x220>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d009      	beq.n	8005edc <HAL_SPI_Init+0x98>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a66      	ldr	r2, [pc, #408]	@ (8006068 <HAL_SPI_Init+0x224>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d004      	beq.n	8005edc <HAL_SPI_Init+0x98>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a65      	ldr	r2, [pc, #404]	@ (800606c <HAL_SPI_Init+0x228>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d104      	bne.n	8005ee6 <HAL_SPI_Init+0xa2>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b10      	cmp	r3, #16
 8005ee0:	d901      	bls.n	8005ee6 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e0b3      	b.n	800604e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d106      	bne.n	8005f00 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7fa ff64 	bl	8000dc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0201 	bic.w	r2, r2, #1
 8005f16:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005f22:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f2c:	d119      	bne.n	8005f62 <HAL_SPI_Init+0x11e>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f36:	d103      	bne.n	8005f40 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d008      	beq.n	8005f52 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10c      	bne.n	8005f62 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005f4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f50:	d107      	bne.n	8005f62 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f60:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00f      	beq.n	8005f8e <HAL_SPI_Init+0x14a>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	2b06      	cmp	r3, #6
 8005f74:	d90b      	bls.n	8005f8e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	e007      	b.n	8005f9e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f9c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	69da      	ldr	r2, [r3, #28]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fb0:	ea42 0103 	orr.w	r1, r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	431a      	orrs	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	431a      	orrs	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ffe:	431a      	orrs	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006004:	431a      	orrs	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800600a:	ea42 0103 	orr.w	r1, r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00a      	beq.n	800603c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	46002000 	.word	0x46002000
 800605c:	56002000 	.word	0x56002000
 8006060:	40013000 	.word	0x40013000
 8006064:	50013000 	.word	0x50013000
 8006068:	40003800 	.word	0x40003800
 800606c:	50003800 	.word	0x50003800

08006070 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b088      	sub	sp, #32
 8006074:	af02      	add	r7, sp, #8
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	603b      	str	r3, [r7, #0]
 800607c:	4613      	mov	r3, r2
 800607e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3320      	adds	r3, #32
 8006086:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a90      	ldr	r2, [pc, #576]	@ (80062d0 <HAL_SPI_Transmit+0x260>)
 800608e:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006090:	f7fb fb04 	bl	800169c <HAL_GetTick>
 8006094:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d001      	beq.n	80060a6 <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 80060a2:	2302      	movs	r3, #2
 80060a4:	e1f4      	b.n	8006490 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d002      	beq.n	80060b2 <HAL_SPI_Transmit+0x42>
 80060ac:	88fb      	ldrh	r3, [r7, #6]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e1ec      	b.n	8006490 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d101      	bne.n	80060c4 <HAL_SPI_Transmit+0x54>
 80060c0:	2302      	movs	r3, #2
 80060c2:	e1e5      	b.n	8006490 <HAL_SPI_Transmit+0x420>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2203      	movs	r2, #3
 80060d0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	88fa      	ldrh	r2, [r7, #6]
 80060e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	88fa      	ldrh	r2, [r7, #6]
 80060ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800611c:	d108      	bne.n	8006130 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	e009      	b.n	8006144 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006142:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	0c1b      	lsrs	r3, r3, #16
 800614c:	041b      	lsls	r3, r3, #16
 800614e:	88f9      	ldrh	r1, [r7, #6]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	6812      	ldr	r2, [r2, #0]
 8006154:	430b      	orrs	r3, r1
 8006156:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0201 	orr.w	r2, r2, #1
 8006166:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10c      	bne.n	8006190 <HAL_SPI_Transmit+0x120>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800617e:	d107      	bne.n	8006190 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800618e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	2b0f      	cmp	r3, #15
 8006196:	d95b      	bls.n	8006250 <HAL_SPI_Transmit+0x1e0>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a4d      	ldr	r2, [pc, #308]	@ (80062d4 <HAL_SPI_Transmit+0x264>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d04f      	beq.n	8006242 <HAL_SPI_Transmit+0x1d2>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a4c      	ldr	r2, [pc, #304]	@ (80062d8 <HAL_SPI_Transmit+0x268>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d04a      	beq.n	8006242 <HAL_SPI_Transmit+0x1d2>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a4a      	ldr	r2, [pc, #296]	@ (80062dc <HAL_SPI_Transmit+0x26c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d045      	beq.n	8006242 <HAL_SPI_Transmit+0x1d2>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a49      	ldr	r2, [pc, #292]	@ (80062e0 <HAL_SPI_Transmit+0x270>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d147      	bne.n	8006250 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80061c0:	e03f      	b.n	8006242 <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d114      	bne.n	80061fa <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6812      	ldr	r2, [r2, #0]
 80061da:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061e0:	1d1a      	adds	r2, r3, #4
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	3b01      	subs	r3, #1
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80061f8:	e023      	b.n	8006242 <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061fa:	f7fb fa4f 	bl	800169c <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	429a      	cmp	r2, r3
 8006208:	d803      	bhi.n	8006212 <HAL_SPI_Transmit+0x1a2>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006210:	d102      	bne.n	8006218 <HAL_SPI_Transmit+0x1a8>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d114      	bne.n	8006242 <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 fc9d 	bl	8006b58 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006224:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e126      	b.n	8006490 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006248:	b29b      	uxth	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1b9      	bne.n	80061c2 <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800624e:	e0f9      	b.n	8006444 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	2b07      	cmp	r3, #7
 8006256:	f240 80ee 	bls.w	8006436 <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800625a:	e067      	b.n	800632c <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b02      	cmp	r3, #2
 8006268:	d13c      	bne.n	80062e4 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006270:	b29b      	uxth	r3, r3
 8006272:	2b01      	cmp	r3, #1
 8006274:	d918      	bls.n	80062a8 <HAL_SPI_Transmit+0x238>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800627a:	2b00      	cmp	r3, #0
 800627c:	d014      	beq.n	80062a8 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6812      	ldr	r2, [r2, #0]
 8006288:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800628e:	1d1a      	adds	r2, r3, #4
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800629a:	b29b      	uxth	r3, r3
 800629c:	3b02      	subs	r3, #2
 800629e:	b29a      	uxth	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80062a6:	e041      	b.n	800632c <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062ac:	881a      	ldrh	r2, [r3, #0]
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062b6:	1c9a      	adds	r2, r3, #2
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80062ce:	e02d      	b.n	800632c <HAL_SPI_Transmit+0x2bc>
 80062d0:	46002000 	.word	0x46002000
 80062d4:	40013000 	.word	0x40013000
 80062d8:	50013000 	.word	0x50013000
 80062dc:	40003800 	.word	0x40003800
 80062e0:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062e4:	f7fb f9da 	bl	800169c <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d803      	bhi.n	80062fc <HAL_SPI_Transmit+0x28c>
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062fa:	d102      	bne.n	8006302 <HAL_SPI_Transmit+0x292>
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d114      	bne.n	800632c <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 fc28 	bl	8006b58 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800630e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e0b1      	b.n	8006490 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006332:	b29b      	uxth	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	d191      	bne.n	800625c <HAL_SPI_Transmit+0x1ec>
 8006338:	e084      	b.n	8006444 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b02      	cmp	r3, #2
 8006346:	d152      	bne.n	80063ee <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800634e:	b29b      	uxth	r3, r3
 8006350:	2b03      	cmp	r3, #3
 8006352:	d918      	bls.n	8006386 <HAL_SPI_Transmit+0x316>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006358:	2b40      	cmp	r3, #64	@ 0x40
 800635a:	d914      	bls.n	8006386 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6812      	ldr	r2, [r2, #0]
 8006366:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800636c:	1d1a      	adds	r2, r3, #4
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006378:	b29b      	uxth	r3, r3
 800637a:	3b04      	subs	r3, #4
 800637c:	b29a      	uxth	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006384:	e057      	b.n	8006436 <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800638c:	b29b      	uxth	r3, r3
 800638e:	2b01      	cmp	r3, #1
 8006390:	d917      	bls.n	80063c2 <HAL_SPI_Transmit+0x352>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006396:	2b00      	cmp	r3, #0
 8006398:	d013      	beq.n	80063c2 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800639e:	881a      	ldrh	r2, [r3, #0]
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063a8:	1c9a      	adds	r2, r3, #2
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	3b02      	subs	r3, #2
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80063c0:	e039      	b.n	8006436 <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3320      	adds	r3, #32
 80063cc:	7812      	ldrb	r2, [r2, #0]
 80063ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	3b01      	subs	r3, #1
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80063ec:	e023      	b.n	8006436 <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063ee:	f7fb f955 	bl	800169c <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d803      	bhi.n	8006406 <HAL_SPI_Transmit+0x396>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006404:	d102      	bne.n	800640c <HAL_SPI_Transmit+0x39c>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d114      	bne.n	8006436 <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 fba3 	bl	8006b58 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006418:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e02c      	b.n	8006490 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	f47f af7b 	bne.w	800633a <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2200      	movs	r2, #0
 800644c:	2108      	movs	r1, #8
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 fc22 	bl	8006c98 <SPI_WaitOnFlagUntilTimeout>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d007      	beq.n	800646a <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006460:	f043 0220 	orr.w	r2, r3, #32
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 fb74 	bl	8006b58 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e000      	b.n	8006490 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 800648e:	2300      	movs	r3, #0
  }
}
 8006490:	4618      	mov	r0, r3
 8006492:	3718      	adds	r7, #24
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08e      	sub	sp, #56	@ 0x38
 800649c:	af02      	add	r7, sp, #8
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
 80064a4:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3320      	adds	r3, #32
 80064ac:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3330      	adds	r3, #48	@ 0x30
 80064b4:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ba:	095b      	lsrs	r3, r3, #5
 80064bc:	b29b      	uxth	r3, r3
 80064be:	3301      	adds	r3, #1
 80064c0:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a90      	ldr	r2, [pc, #576]	@ (8006708 <HAL_SPI_TransmitReceive+0x270>)
 80064c8:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064ca:	f7fb f8e7 	bl	800169c <HAL_GetTick>
 80064ce:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80064d0:	887b      	ldrh	r3, [r7, #2]
 80064d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80064d4:	887b      	ldrh	r3, [r7, #2]
 80064d6:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d001      	beq.n	80064e8 <HAL_SPI_TransmitReceive+0x50>
  {
    return HAL_BUSY;
 80064e4:	2302      	movs	r3, #2
 80064e6:	e332      	b.n	8006b4e <HAL_SPI_TransmitReceive+0x6b6>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d005      	beq.n	80064fa <HAL_SPI_TransmitReceive+0x62>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <HAL_SPI_TransmitReceive+0x62>
 80064f4:	887b      	ldrh	r3, [r7, #2]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_SPI_TransmitReceive+0x66>
  {
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e327      	b.n	8006b4e <HAL_SPI_TransmitReceive+0x6b6>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006504:	2b01      	cmp	r3, #1
 8006506:	d101      	bne.n	800650c <HAL_SPI_TransmitReceive+0x74>
 8006508:	2302      	movs	r3, #2
 800650a:	e320      	b.n	8006b4e <HAL_SPI_TransmitReceive+0x6b6>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2205      	movs	r2, #5
 8006518:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	887a      	ldrh	r2, [r7, #2]
 800652e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	887a      	ldrh	r2, [r7, #2]
 8006536:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	887a      	ldrh	r2, [r7, #2]
 8006544:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	887a      	ldrh	r2, [r7, #2]
 800654c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68da      	ldr	r2, [r3, #12]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800656a:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a66      	ldr	r2, [pc, #408]	@ (800670c <HAL_SPI_TransmitReceive+0x274>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00e      	beq.n	8006594 <HAL_SPI_TransmitReceive+0xfc>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a65      	ldr	r2, [pc, #404]	@ (8006710 <HAL_SPI_TransmitReceive+0x278>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d009      	beq.n	8006594 <HAL_SPI_TransmitReceive+0xfc>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a63      	ldr	r2, [pc, #396]	@ (8006714 <HAL_SPI_TransmitReceive+0x27c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d004      	beq.n	8006594 <HAL_SPI_TransmitReceive+0xfc>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a62      	ldr	r2, [pc, #392]	@ (8006718 <HAL_SPI_TransmitReceive+0x280>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d102      	bne.n	800659a <HAL_SPI_TransmitReceive+0x102>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8006594:	2310      	movs	r3, #16
 8006596:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006598:	e001      	b.n	800659e <HAL_SPI_TransmitReceive+0x106>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800659a:	2308      	movs	r3, #8
 800659c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	0c1b      	lsrs	r3, r3, #16
 80065a6:	041b      	lsls	r3, r3, #16
 80065a8:	8879      	ldrh	r1, [r7, #2]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	6812      	ldr	r2, [r2, #0]
 80065ae:	430b      	orrs	r3, r1
 80065b0:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f042 0201 	orr.w	r2, r2, #1
 80065c0:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10c      	bne.n	80065ea <HAL_SPI_TransmitReceive+0x152>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065d8:	d107      	bne.n	80065ea <HAL_SPI_TransmitReceive+0x152>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	2b0f      	cmp	r3, #15
 80065f0:	f240 80c1 	bls.w	8006776 <HAL_SPI_TransmitReceive+0x2de>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a44      	ldr	r2, [pc, #272]	@ (800670c <HAL_SPI_TransmitReceive+0x274>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00f      	beq.n	800661e <HAL_SPI_TransmitReceive+0x186>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a43      	ldr	r2, [pc, #268]	@ (8006710 <HAL_SPI_TransmitReceive+0x278>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d00a      	beq.n	800661e <HAL_SPI_TransmitReceive+0x186>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a41      	ldr	r2, [pc, #260]	@ (8006714 <HAL_SPI_TransmitReceive+0x27c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d005      	beq.n	800661e <HAL_SPI_TransmitReceive+0x186>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a40      	ldr	r2, [pc, #256]	@ (8006718 <HAL_SPI_TransmitReceive+0x280>)
 8006618:	4293      	cmp	r3, r2
 800661a:	f040 80ac 	bne.w	8006776 <HAL_SPI_TransmitReceive+0x2de>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800661e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006620:	089b      	lsrs	r3, r3, #2
 8006622:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006624:	e09e      	b.n	8006764 <HAL_SPI_TransmitReceive+0x2cc>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b02      	cmp	r3, #2
 8006632:	d120      	bne.n	8006676 <HAL_SPI_TransmitReceive+0x1de>
 8006634:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006636:	2b00      	cmp	r3, #0
 8006638:	d01d      	beq.n	8006676 <HAL_SPI_TransmitReceive+0x1de>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800663a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800663c:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800663e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006640:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006642:	429a      	cmp	r2, r3
 8006644:	d217      	bcs.n	8006676 <HAL_SPI_TransmitReceive+0x1de>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6812      	ldr	r2, [r2, #0]
 8006650:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006656:	1d1a      	adds	r2, r3, #4
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006662:	b29b      	uxth	r3, r3
 8006664:	3b01      	subs	r3, #1
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006674:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800667e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006680:	2b00      	cmp	r3, #0
 8006682:	d06f      	beq.n	8006764 <HAL_SPI_TransmitReceive+0x2cc>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b01      	cmp	r3, #1
 8006690:	d118      	bne.n	80066c4 <HAL_SPI_TransmitReceive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800669a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800669c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066a2:	1d1a      	adds	r2, r3, #4
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	3b01      	subs	r3, #1
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80066c0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80066c2:	e04f      	b.n	8006764 <HAL_SPI_TransmitReceive+0x2cc>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80066c4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80066c6:	8bfb      	ldrh	r3, [r7, #30]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d227      	bcs.n	800671c <HAL_SPI_TransmitReceive+0x284>
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d022      	beq.n	800671c <HAL_SPI_TransmitReceive+0x284>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066de:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80066e0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066e6:	1d1a      	adds	r2, r3, #4
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	3b01      	subs	r3, #1
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006704:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006706:	e02d      	b.n	8006764 <HAL_SPI_TransmitReceive+0x2cc>
 8006708:	46002000 	.word	0x46002000
 800670c:	40013000 	.word	0x40013000
 8006710:	50013000 	.word	0x50013000
 8006714:	40003800 	.word	0x40003800
 8006718:	50003800 	.word	0x50003800
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800671c:	f7fa ffbe 	bl	800169c <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006728:	429a      	cmp	r2, r3
 800672a:	d803      	bhi.n	8006734 <HAL_SPI_TransmitReceive+0x29c>
 800672c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006732:	d102      	bne.n	800673a <HAL_SPI_TransmitReceive+0x2a2>
 8006734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006736:	2b00      	cmp	r3, #0
 8006738:	d114      	bne.n	8006764 <HAL_SPI_TransmitReceive+0x2cc>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 fa0c 	bl	8006b58 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006746:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e1f4      	b.n	8006b4e <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006764:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006766:	2b00      	cmp	r3, #0
 8006768:	f47f af5d 	bne.w	8006626 <HAL_SPI_TransmitReceive+0x18e>
 800676c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800676e:	2b00      	cmp	r3, #0
 8006770:	f47f af59 	bne.w	8006626 <HAL_SPI_TransmitReceive+0x18e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006774:	e1c5      	b.n	8006b02 <HAL_SPI_TransmitReceive+0x66a>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	2b07      	cmp	r3, #7
 800677c:	f240 81b9 	bls.w	8006af2 <HAL_SPI_TransmitReceive+0x65a>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8006780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006782:	085b      	lsrs	r3, r3, #1
 8006784:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006786:	e0c0      	b.n	800690a <HAL_SPI_TransmitReceive+0x472>
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b02      	cmp	r3, #2
 8006794:	d11f      	bne.n	80067d6 <HAL_SPI_TransmitReceive+0x33e>
 8006796:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006798:	2b00      	cmp	r3, #0
 800679a:	d01c      	beq.n	80067d6 <HAL_SPI_TransmitReceive+0x33e>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800679c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800679e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80067a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d216      	bcs.n	80067d6 <HAL_SPI_TransmitReceive+0x33e>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067ac:	881a      	ldrh	r2, [r3, #0]
 80067ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067b6:	1c9a      	adds	r2, r3, #2
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	3b01      	subs	r3, #1
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80067d4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80067de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 8092 	beq.w	800690a <HAL_SPI_TransmitReceive+0x472>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d118      	bne.n	8006826 <HAL_SPI_TransmitReceive+0x38e>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067f8:	6a3a      	ldr	r2, [r7, #32]
 80067fa:	8812      	ldrh	r2, [r2, #0]
 80067fc:	b292      	uxth	r2, r2
 80067fe:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006804:	1c9a      	adds	r2, r3, #2
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006810:	b29b      	uxth	r3, r3
 8006812:	3b01      	subs	r3, #1
 8006814:	b29a      	uxth	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006822:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006824:	e071      	b.n	800690a <HAL_SPI_TransmitReceive+0x472>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006826:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006828:	8bfb      	ldrh	r3, [r7, #30]
 800682a:	429a      	cmp	r2, r3
 800682c:	d228      	bcs.n	8006880 <HAL_SPI_TransmitReceive+0x3e8>
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d023      	beq.n	8006880 <HAL_SPI_TransmitReceive+0x3e8>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800683c:	6a3a      	ldr	r2, [r7, #32]
 800683e:	8812      	ldrh	r2, [r2, #0]
 8006840:	b292      	uxth	r2, r2
 8006842:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006848:	1c9a      	adds	r2, r3, #2
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006852:	6a3a      	ldr	r2, [r7, #32]
 8006854:	8812      	ldrh	r2, [r2, #0]
 8006856:	b292      	uxth	r2, r2
 8006858:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800685e:	1c9a      	adds	r2, r3, #2
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)2UL;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800686a:	b29b      	uxth	r3, r3
 800686c:	3b02      	subs	r3, #2
 800686e:	b29a      	uxth	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800687c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800687e:	e044      	b.n	800690a <HAL_SPI_TransmitReceive+0x472>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006880:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006882:	2b01      	cmp	r3, #1
 8006884:	d11d      	bne.n	80068c2 <HAL_SPI_TransmitReceive+0x42a>
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d018      	beq.n	80068c2 <HAL_SPI_TransmitReceive+0x42a>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006894:	6a3a      	ldr	r2, [r7, #32]
 8006896:	8812      	ldrh	r2, [r2, #0]
 8006898:	b292      	uxth	r2, r2
 800689a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068a0:	1c9a      	adds	r2, r3, #2
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	3b01      	subs	r3, #1
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80068be:	853b      	strh	r3, [r7, #40]	@ 0x28
 80068c0:	e023      	b.n	800690a <HAL_SPI_TransmitReceive+0x472>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068c2:	f7fa feeb 	bl	800169c <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d803      	bhi.n	80068da <HAL_SPI_TransmitReceive+0x442>
 80068d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068d8:	d102      	bne.n	80068e0 <HAL_SPI_TransmitReceive+0x448>
 80068da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d114      	bne.n	800690a <HAL_SPI_TransmitReceive+0x472>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f000 f939 	bl	8006b58 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e121      	b.n	8006b4e <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800690a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800690c:	2b00      	cmp	r3, #0
 800690e:	f47f af3b 	bne.w	8006788 <HAL_SPI_TransmitReceive+0x2f0>
 8006912:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006914:	2b00      	cmp	r3, #0
 8006916:	f47f af37 	bne.w	8006788 <HAL_SPI_TransmitReceive+0x2f0>
 800691a:	e0f2      	b.n	8006b02 <HAL_SPI_TransmitReceive+0x66a>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b02      	cmp	r3, #2
 8006928:	d121      	bne.n	800696e <HAL_SPI_TransmitReceive+0x4d6>
 800692a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800692c:	2b00      	cmp	r3, #0
 800692e:	d01e      	beq.n	800696e <HAL_SPI_TransmitReceive+0x4d6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006930:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006932:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006936:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006938:	429a      	cmp	r2, r3
 800693a:	d218      	bcs.n	800696e <HAL_SPI_TransmitReceive+0x4d6>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3320      	adds	r3, #32
 8006946:	7812      	ldrb	r2, [r2, #0]
 8006948:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800694e:	1c5a      	adds	r2, r3, #1
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800695a:	b29b      	uxth	r3, r3
 800695c:	3b01      	subs	r3, #1
 800695e:	b29a      	uxth	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800696c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006976:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 80ba 	beq.w	8006af2 <HAL_SPI_TransmitReceive+0x65a>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b01      	cmp	r3, #1
 800698a:	d11b      	bne.n	80069c4 <HAL_SPI_TransmitReceive+0x52c>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006998:	7812      	ldrb	r2, [r2, #0]
 800699a:	b2d2      	uxtb	r2, r2
 800699c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	3b01      	subs	r3, #1
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80069c0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80069c2:	e096      	b.n	8006af2 <HAL_SPI_TransmitReceive+0x65a>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80069c4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80069c6:	8bfb      	ldrh	r3, [r7, #30]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d24a      	bcs.n	8006a62 <HAL_SPI_TransmitReceive+0x5ca>
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d045      	beq.n	8006a62 <HAL_SPI_TransmitReceive+0x5ca>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069e2:	7812      	ldrb	r2, [r2, #0]
 80069e4:	b2d2      	uxtb	r2, r2
 80069e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069ec:	1c5a      	adds	r2, r3, #1
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069fe:	7812      	ldrb	r2, [r2, #0]
 8006a00:	b2d2      	uxtb	r2, r2
 8006a02:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a08:	1c5a      	adds	r2, r3, #1
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a1a:	7812      	ldrb	r2, [r2, #0]
 8006a1c:	b2d2      	uxtb	r2, r2
 8006a1e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a36:	7812      	ldrb	r2, [r2, #0]
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a40:	1c5a      	adds	r2, r3, #1
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)4UL;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	3b04      	subs	r3, #4
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006a5e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006a60:	e047      	b.n	8006af2 <HAL_SPI_TransmitReceive+0x65a>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006a62:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006a64:	2b03      	cmp	r3, #3
 8006a66:	d820      	bhi.n	8006aaa <HAL_SPI_TransmitReceive+0x612>
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d01b      	beq.n	8006aaa <HAL_SPI_TransmitReceive+0x612>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a7e:	7812      	ldrb	r2, [r2, #0]
 8006a80:	b2d2      	uxtb	r2, r2
 8006a82:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	3b01      	subs	r3, #1
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006aa6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006aa8:	e023      	b.n	8006af2 <HAL_SPI_TransmitReceive+0x65a>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aaa:	f7fa fdf7 	bl	800169c <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d803      	bhi.n	8006ac2 <HAL_SPI_TransmitReceive+0x62a>
 8006aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006abc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ac0:	d102      	bne.n	8006ac8 <HAL_SPI_TransmitReceive+0x630>
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d114      	bne.n	8006af2 <HAL_SPI_TransmitReceive+0x65a>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 f845 	bl	8006b58 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ad4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e02d      	b.n	8006b4e <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006af2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f47f af11 	bne.w	800691c <HAL_SPI_TransmitReceive+0x484>
 8006afa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f47f af0d 	bne.w	800691c <HAL_SPI_TransmitReceive+0x484>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2108      	movs	r1, #8
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 f8c3 	bl	8006c98 <SPI_WaitOnFlagUntilTimeout>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d007      	beq.n	8006b28 <HAL_SPI_TransmitReceive+0x690>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b1e:	f043 0220 	orr.w	r2, r3, #32
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 f815 	bl	8006b58 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <HAL_SPI_TransmitReceive+0x6b4>
  {
    return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e000      	b.n	8006b4e <HAL_SPI_TransmitReceive+0x6b6>
  }
  else
  {
    return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
  }
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3730      	adds	r7, #48	@ 0x30
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop

08006b58 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	699a      	ldr	r2, [r3, #24]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0208 	orr.w	r2, r2, #8
 8006b76:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0210 	orr.w	r2, r2, #16
 8006b86:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0201 	bic.w	r2, r2, #1
 8006b96:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	6812      	ldr	r2, [r2, #0]
 8006ba2:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8006ba6:	f023 0303 	bic.w	r3, r3, #3
 8006baa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006bba:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b04      	cmp	r3, #4
 8006bc6:	d014      	beq.n	8006bf2 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00f      	beq.n	8006bf2 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bd8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	699a      	ldr	r2, [r3, #24]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f042 0220 	orr.w	r2, r2, #32
 8006bf0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	d014      	beq.n	8006c28 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00f      	beq.n	8006c28 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c0e:	f043 0204 	orr.w	r2, r3, #4
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	699a      	ldr	r2, [r3, #24]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c26:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00f      	beq.n	8006c52 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c38:	f043 0201 	orr.w	r2, r3, #1
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	699a      	ldr	r2, [r3, #24]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c50:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00f      	beq.n	8006c7c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c62:	f043 0208 	orr.w	r2, r3, #8
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	699a      	ldr	r2, [r3, #24]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c7a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8006c8c:	bf00      	nop
 8006c8e:	3714      	adds	r7, #20
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	603b      	str	r3, [r7, #0]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006ca8:	e010      	b.n	8006ccc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006caa:	f7fa fcf7 	bl	800169c <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	683a      	ldr	r2, [r7, #0]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d803      	bhi.n	8006cc2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cc0:	d102      	bne.n	8006cc8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e00f      	b.n	8006cec <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	695a      	ldr	r2, [r3, #20]
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	bf0c      	ite	eq
 8006cdc:	2301      	moveq	r3, #1
 8006cde:	2300      	movne	r3, #0
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	79fb      	ldrb	r3, [r7, #7]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d0df      	beq.n	8006caa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d00:	095b      	lsrs	r3, r3, #5
 8006d02:	3301      	adds	r3, #1
 8006d04:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	3307      	adds	r3, #7
 8006d12:	08db      	lsrs	r3, r3, #3
 8006d14:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	fb02 f303 	mul.w	r3, r2, r3
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d12e      	bne.n	8006d9e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d101      	bne.n	8006d4e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	e028      	b.n	8006da0 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2202      	movs	r2, #2
 8006d5a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0201 	bic.w	r2, r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8006d7a:	ea42 0103 	orr.w	r1, r2, r3
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	689a      	ldr	r2, [r3, #8]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e000      	b.n	8006da0 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
  }
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e042      	b.n	8006e44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d106      	bne.n	8006dd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7fa f863 	bl	8000e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2224      	movs	r2, #36	@ 0x24
 8006dda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 0201 	bic.w	r2, r2, #1
 8006dec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fa4e 	bl	8007298 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 f8b3 	bl	8006f68 <UART_SetConfig>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d101      	bne.n	8006e0c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e01b      	b.n	8006e44 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689a      	ldr	r2, [r3, #8]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f042 0201 	orr.w	r2, r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 facd 	bl	80073dc <UART_CheckIdleState>
 8006e42:	4603      	mov	r3, r0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08a      	sub	sp, #40	@ 0x28
 8006e50:	af02      	add	r7, sp, #8
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	603b      	str	r3, [r7, #0]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e62:	2b20      	cmp	r3, #32
 8006e64:	d17b      	bne.n	8006f5e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <HAL_UART_Transmit+0x26>
 8006e6c:	88fb      	ldrh	r3, [r7, #6]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e074      	b.n	8006f60 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2221      	movs	r2, #33	@ 0x21
 8006e82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e86:	f7fa fc09 	bl	800169c <HAL_GetTick>
 8006e8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	88fa      	ldrh	r2, [r7, #6]
 8006e90:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	88fa      	ldrh	r2, [r7, #6]
 8006e98:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ea4:	d108      	bne.n	8006eb8 <HAL_UART_Transmit+0x6c>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d104      	bne.n	8006eb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	61bb      	str	r3, [r7, #24]
 8006eb6:	e003      	b.n	8006ec0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ec0:	e030      	b.n	8006f24 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	2180      	movs	r1, #128	@ 0x80
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f000 fb2f 	bl	8007530 <UART_WaitOnFlagUntilTimeout>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2220      	movs	r2, #32
 8006edc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e03d      	b.n	8006f60 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10b      	bne.n	8006f02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	881b      	ldrh	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ef8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	3302      	adds	r3, #2
 8006efe:	61bb      	str	r3, [r7, #24]
 8006f00:	e007      	b.n	8006f12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	781a      	ldrb	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1c8      	bne.n	8006ec2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2200      	movs	r2, #0
 8006f38:	2140      	movs	r1, #64	@ 0x40
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 faf8 	bl	8007530 <UART_WaitOnFlagUntilTimeout>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d005      	beq.n	8006f52 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e006      	b.n	8006f60 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2220      	movs	r2, #32
 8006f56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e000      	b.n	8006f60 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006f5e:	2302      	movs	r3, #2
  }
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3720      	adds	r7, #32
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f6c:	b094      	sub	sp, #80	@ 0x50
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	4b9b      	ldr	r3, [pc, #620]	@ (80071ec <UART_SetConfig+0x284>)
 8006f7e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4994      	ldr	r1, [pc, #592]	@ (80071f0 <UART_SetConfig+0x288>)
 8006fa0:	4019      	ands	r1, r3
 8006fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fa8:	430b      	orrs	r3, r1
 8006faa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fb8:	68d9      	ldr	r1, [r3, #12]
 8006fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	ea40 0301 	orr.w	r3, r0, r1
 8006fc2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	4b87      	ldr	r3, [pc, #540]	@ (80071ec <UART_SetConfig+0x284>)
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d009      	beq.n	8006fe8 <UART_SetConfig+0x80>
 8006fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	4b86      	ldr	r3, [pc, #536]	@ (80071f4 <UART_SetConfig+0x28c>)
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d004      	beq.n	8006fe8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe0:	6a1a      	ldr	r2, [r3, #32]
 8006fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8006ff2:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8006ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ffc:	430b      	orrs	r3, r1
 8006ffe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007006:	f023 000f 	bic.w	r0, r3, #15
 800700a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800700c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800700e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	ea40 0301 	orr.w	r3, r0, r1
 8007016:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	4b76      	ldr	r3, [pc, #472]	@ (80071f8 <UART_SetConfig+0x290>)
 800701e:	429a      	cmp	r2, r3
 8007020:	d102      	bne.n	8007028 <UART_SetConfig+0xc0>
 8007022:	2301      	movs	r3, #1
 8007024:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007026:	e021      	b.n	800706c <UART_SetConfig+0x104>
 8007028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	4b73      	ldr	r3, [pc, #460]	@ (80071fc <UART_SetConfig+0x294>)
 800702e:	429a      	cmp	r2, r3
 8007030:	d102      	bne.n	8007038 <UART_SetConfig+0xd0>
 8007032:	2304      	movs	r3, #4
 8007034:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007036:	e019      	b.n	800706c <UART_SetConfig+0x104>
 8007038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	4b70      	ldr	r3, [pc, #448]	@ (8007200 <UART_SetConfig+0x298>)
 800703e:	429a      	cmp	r2, r3
 8007040:	d102      	bne.n	8007048 <UART_SetConfig+0xe0>
 8007042:	2308      	movs	r3, #8
 8007044:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007046:	e011      	b.n	800706c <UART_SetConfig+0x104>
 8007048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	4b6d      	ldr	r3, [pc, #436]	@ (8007204 <UART_SetConfig+0x29c>)
 800704e:	429a      	cmp	r2, r3
 8007050:	d102      	bne.n	8007058 <UART_SetConfig+0xf0>
 8007052:	2310      	movs	r3, #16
 8007054:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007056:	e009      	b.n	800706c <UART_SetConfig+0x104>
 8007058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	4b63      	ldr	r3, [pc, #396]	@ (80071ec <UART_SetConfig+0x284>)
 800705e:	429a      	cmp	r2, r3
 8007060:	d102      	bne.n	8007068 <UART_SetConfig+0x100>
 8007062:	2320      	movs	r3, #32
 8007064:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007066:	e001      	b.n	800706c <UART_SetConfig+0x104>
 8007068:	2300      	movs	r3, #0
 800706a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800706c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	4b5e      	ldr	r3, [pc, #376]	@ (80071ec <UART_SetConfig+0x284>)
 8007072:	429a      	cmp	r2, r3
 8007074:	d004      	beq.n	8007080 <UART_SetConfig+0x118>
 8007076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	4b5e      	ldr	r3, [pc, #376]	@ (80071f4 <UART_SetConfig+0x28c>)
 800707c:	429a      	cmp	r2, r3
 800707e:	d172      	bne.n	8007166 <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007080:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007082:	2200      	movs	r2, #0
 8007084:	623b      	str	r3, [r7, #32]
 8007086:	627a      	str	r2, [r7, #36]	@ 0x24
 8007088:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800708c:	f7fd fc68 	bl	8004960 <HAL_RCCEx_GetPeriphCLKFreq>
 8007090:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 80e7 	beq.w	8007268 <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800709a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800709c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709e:	4a5a      	ldr	r2, [pc, #360]	@ (8007208 <UART_SetConfig+0x2a0>)
 80070a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070a4:	461a      	mov	r2, r3
 80070a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80070ac:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	4613      	mov	r3, r2
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	4413      	add	r3, r2
 80070b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d305      	bcc.n	80070ca <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d903      	bls.n	80070d2 <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80070d0:	e048      	b.n	8007164 <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070d4:	2200      	movs	r2, #0
 80070d6:	61bb      	str	r3, [r7, #24]
 80070d8:	61fa      	str	r2, [r7, #28]
 80070da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070de:	4a4a      	ldr	r2, [pc, #296]	@ (8007208 <UART_SetConfig+0x2a0>)
 80070e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	2200      	movs	r2, #0
 80070e8:	613b      	str	r3, [r7, #16]
 80070ea:	617a      	str	r2, [r7, #20]
 80070ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80070f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80070f4:	f7f9 f8c8 	bl	8000288 <__aeabi_uldivmod>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4610      	mov	r0, r2
 80070fe:	4619      	mov	r1, r3
 8007100:	f04f 0200 	mov.w	r2, #0
 8007104:	f04f 0300 	mov.w	r3, #0
 8007108:	020b      	lsls	r3, r1, #8
 800710a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800710e:	0202      	lsls	r2, r0, #8
 8007110:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007112:	6849      	ldr	r1, [r1, #4]
 8007114:	0849      	lsrs	r1, r1, #1
 8007116:	2000      	movs	r0, #0
 8007118:	460c      	mov	r4, r1
 800711a:	4605      	mov	r5, r0
 800711c:	eb12 0804 	adds.w	r8, r2, r4
 8007120:	eb43 0905 	adc.w	r9, r3, r5
 8007124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	60bb      	str	r3, [r7, #8]
 800712c:	60fa      	str	r2, [r7, #12]
 800712e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007132:	4640      	mov	r0, r8
 8007134:	4649      	mov	r1, r9
 8007136:	f7f9 f8a7 	bl	8000288 <__aeabi_uldivmod>
 800713a:	4602      	mov	r2, r0
 800713c:	460b      	mov	r3, r1
 800713e:	4613      	mov	r3, r2
 8007140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007144:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007148:	d308      	bcc.n	800715c <UART_SetConfig+0x1f4>
 800714a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800714c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007150:	d204      	bcs.n	800715c <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 8007152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007158:	60da      	str	r2, [r3, #12]
 800715a:	e003      	b.n	8007164 <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8007162:	e081      	b.n	8007268 <UART_SetConfig+0x300>
 8007164:	e080      	b.n	8007268 <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800716e:	d14d      	bne.n	800720c <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007170:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007172:	2200      	movs	r2, #0
 8007174:	603b      	str	r3, [r7, #0]
 8007176:	607a      	str	r2, [r7, #4]
 8007178:	e9d7 0100 	ldrd	r0, r1, [r7]
 800717c:	f7fd fbf0 	bl	8004960 <HAL_RCCEx_GetPeriphCLKFreq>
 8007180:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007184:	2b00      	cmp	r3, #0
 8007186:	d06f      	beq.n	8007268 <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800718a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718c:	4a1e      	ldr	r2, [pc, #120]	@ (8007208 <UART_SetConfig+0x2a0>)
 800718e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007192:	461a      	mov	r2, r3
 8007194:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007196:	fbb3 f3f2 	udiv	r3, r3, r2
 800719a:	005a      	lsls	r2, r3, #1
 800719c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	085b      	lsrs	r3, r3, #1
 80071a2:	441a      	add	r2, r3
 80071a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071b0:	2b0f      	cmp	r3, #15
 80071b2:	d916      	bls.n	80071e2 <UART_SetConfig+0x27a>
 80071b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071ba:	d212      	bcs.n	80071e2 <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071be:	b29b      	uxth	r3, r3
 80071c0:	f023 030f 	bic.w	r3, r3, #15
 80071c4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071c8:	085b      	lsrs	r3, r3, #1
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	f003 0307 	and.w	r3, r3, #7
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80071d4:	4313      	orrs	r3, r2
 80071d6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80071d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80071de:	60da      	str	r2, [r3, #12]
 80071e0:	e042      	b.n	8007268 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80071e8:	e03e      	b.n	8007268 <UART_SetConfig+0x300>
 80071ea:	bf00      	nop
 80071ec:	46002400 	.word	0x46002400
 80071f0:	cfff69f3 	.word	0xcfff69f3
 80071f4:	56002400 	.word	0x56002400
 80071f8:	40013800 	.word	0x40013800
 80071fc:	40004800 	.word	0x40004800
 8007200:	40004c00 	.word	0x40004c00
 8007204:	40005000 	.word	0x40005000
 8007208:	08008654 	.word	0x08008654
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800720c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800720e:	2200      	movs	r2, #0
 8007210:	469a      	mov	sl, r3
 8007212:	4693      	mov	fp, r2
 8007214:	4650      	mov	r0, sl
 8007216:	4659      	mov	r1, fp
 8007218:	f7fd fba2 	bl	8004960 <HAL_RCCEx_GetPeriphCLKFreq>
 800721c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800721e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007220:	2b00      	cmp	r3, #0
 8007222:	d021      	beq.n	8007268 <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007228:	4a1a      	ldr	r2, [pc, #104]	@ (8007294 <UART_SetConfig+0x32c>)
 800722a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800722e:	461a      	mov	r2, r3
 8007230:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007232:	fbb3 f2f2 	udiv	r2, r3, r2
 8007236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	085b      	lsrs	r3, r3, #1
 800723c:	441a      	add	r2, r3
 800723e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	fbb2 f3f3 	udiv	r3, r2, r3
 8007246:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800724a:	2b0f      	cmp	r3, #15
 800724c:	d909      	bls.n	8007262 <UART_SetConfig+0x2fa>
 800724e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007254:	d205      	bcs.n	8007262 <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007258:	b29a      	uxth	r2, r3
 800725a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	60da      	str	r2, [r3, #12]
 8007260:	e002      	b.n	8007268 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800726a:	2201      	movs	r2, #1
 800726c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007272:	2201      	movs	r2, #1
 8007274:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727a:	2200      	movs	r2, #0
 800727c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800727e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007280:	2200      	movs	r2, #0
 8007282:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007284:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007288:	4618      	mov	r0, r3
 800728a:	3750      	adds	r7, #80	@ 0x50
 800728c:	46bd      	mov	sp, r7
 800728e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007292:	bf00      	nop
 8007294:	08008654 	.word	0x08008654

08007298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072a4:	f003 0308 	and.w	r3, r3, #8
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00a      	beq.n	80072c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00a      	beq.n	80072e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	430a      	orrs	r2, r1
 80072e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e8:	f003 0302 	and.w	r3, r3, #2
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00a      	beq.n	8007306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800730a:	f003 0304 	and.w	r3, r3, #4
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00a      	beq.n	8007328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	430a      	orrs	r2, r1
 8007326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800732c:	f003 0310 	and.w	r3, r3, #16
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00a      	beq.n	800734a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800734e:	f003 0320 	and.w	r3, r3, #32
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007374:	2b00      	cmp	r3, #0
 8007376:	d01a      	beq.n	80073ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007392:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007396:	d10a      	bne.n	80073ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	430a      	orrs	r2, r1
 80073ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00a      	beq.n	80073d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	605a      	str	r2, [r3, #4]
  }
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b098      	sub	sp, #96	@ 0x60
 80073e0:	af02      	add	r7, sp, #8
 80073e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073ec:	f7fa f956 	bl	800169c <HAL_GetTick>
 80073f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0308 	and.w	r3, r3, #8
 80073fc:	2b08      	cmp	r3, #8
 80073fe:	d12f      	bne.n	8007460 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007400:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007408:	2200      	movs	r2, #0
 800740a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f88e 	bl	8007530 <UART_WaitOnFlagUntilTimeout>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d022      	beq.n	8007460 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007422:	e853 3f00 	ldrex	r3, [r3]
 8007426:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800742a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800742e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	461a      	mov	r2, r3
 8007436:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007438:	647b      	str	r3, [r7, #68]	@ 0x44
 800743a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800743e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007440:	e841 2300 	strex	r3, r2, [r1]
 8007444:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e6      	bne.n	800741a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e063      	b.n	8007528 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0304 	and.w	r3, r3, #4
 800746a:	2b04      	cmp	r3, #4
 800746c:	d149      	bne.n	8007502 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800746e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007476:	2200      	movs	r2, #0
 8007478:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f857 	bl	8007530 <UART_WaitOnFlagUntilTimeout>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d03c      	beq.n	8007502 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007490:	e853 3f00 	ldrex	r3, [r3]
 8007494:	623b      	str	r3, [r7, #32]
   return(result);
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800749c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	461a      	mov	r2, r3
 80074a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80074a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074ae:	e841 2300 	strex	r3, r2, [r1]
 80074b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1e6      	bne.n	8007488 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3308      	adds	r3, #8
 80074c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f023 0301 	bic.w	r3, r3, #1
 80074d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3308      	adds	r3, #8
 80074d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074da:	61fa      	str	r2, [r7, #28]
 80074dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074de:	69b9      	ldr	r1, [r7, #24]
 80074e0:	69fa      	ldr	r2, [r7, #28]
 80074e2:	e841 2300 	strex	r3, r2, [r1]
 80074e6:	617b      	str	r3, [r7, #20]
   return(result);
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1e5      	bne.n	80074ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2220      	movs	r2, #32
 80074f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e012      	b.n	8007528 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2220      	movs	r2, #32
 8007506:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2220      	movs	r2, #32
 800750e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3758      	adds	r7, #88	@ 0x58
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	603b      	str	r3, [r7, #0]
 800753c:	4613      	mov	r3, r2
 800753e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007540:	e04f      	b.n	80075e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007548:	d04b      	beq.n	80075e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800754a:	f7fa f8a7 	bl	800169c <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	429a      	cmp	r2, r3
 8007558:	d302      	bcc.n	8007560 <UART_WaitOnFlagUntilTimeout+0x30>
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e04e      	b.n	8007602 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0304 	and.w	r3, r3, #4
 800756e:	2b00      	cmp	r3, #0
 8007570:	d037      	beq.n	80075e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2b80      	cmp	r3, #128	@ 0x80
 8007576:	d034      	beq.n	80075e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2b40      	cmp	r3, #64	@ 0x40
 800757c:	d031      	beq.n	80075e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	f003 0308 	and.w	r3, r3, #8
 8007588:	2b08      	cmp	r3, #8
 800758a:	d110      	bne.n	80075ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2208      	movs	r2, #8
 8007592:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 f838 	bl	800760a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2208      	movs	r2, #8
 800759e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e029      	b.n	8007602 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	69db      	ldr	r3, [r3, #28]
 80075b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075bc:	d111      	bne.n	80075e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f000 f81e 	bl	800760a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2220      	movs	r2, #32
 80075d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e00f      	b.n	8007602 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	69da      	ldr	r2, [r3, #28]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	4013      	ands	r3, r2
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	bf0c      	ite	eq
 80075f2:	2301      	moveq	r3, #1
 80075f4:	2300      	movne	r3, #0
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	461a      	mov	r2, r3
 80075fa:	79fb      	ldrb	r3, [r7, #7]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d0a0      	beq.n	8007542 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800760a:	b480      	push	{r7}
 800760c:	b095      	sub	sp, #84	@ 0x54
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800761a:	e853 3f00 	ldrex	r3, [r3]
 800761e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007622:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007626:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	461a      	mov	r2, r3
 800762e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007630:	643b      	str	r3, [r7, #64]	@ 0x40
 8007632:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007634:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007636:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007638:	e841 2300 	strex	r3, r2, [r1]
 800763c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800763e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1e6      	bne.n	8007612 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3308      	adds	r3, #8
 800764a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	e853 3f00 	ldrex	r3, [r3]
 8007652:	61fb      	str	r3, [r7, #28]
   return(result);
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800765a:	f023 0301 	bic.w	r3, r3, #1
 800765e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	3308      	adds	r3, #8
 8007666:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007668:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800766a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800766e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007670:	e841 2300 	strex	r3, r2, [r1]
 8007674:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1e3      	bne.n	8007644 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007680:	2b01      	cmp	r3, #1
 8007682:	d118      	bne.n	80076b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	e853 3f00 	ldrex	r3, [r3]
 8007690:	60bb      	str	r3, [r7, #8]
   return(result);
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	f023 0310 	bic.w	r3, r3, #16
 8007698:	647b      	str	r3, [r7, #68]	@ 0x44
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	461a      	mov	r2, r3
 80076a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076a2:	61bb      	str	r3, [r7, #24]
 80076a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a6:	6979      	ldr	r1, [r7, #20]
 80076a8:	69ba      	ldr	r2, [r7, #24]
 80076aa:	e841 2300 	strex	r3, r2, [r1]
 80076ae:	613b      	str	r3, [r7, #16]
   return(result);
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1e6      	bne.n	8007684 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2220      	movs	r2, #32
 80076ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80076ca:	bf00      	nop
 80076cc:	3754      	adds	r7, #84	@ 0x54
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <_vsniprintf_r>:
 80076d6:	b530      	push	{r4, r5, lr}
 80076d8:	4614      	mov	r4, r2
 80076da:	b09b      	sub	sp, #108	@ 0x6c
 80076dc:	4605      	mov	r5, r0
 80076de:	461a      	mov	r2, r3
 80076e0:	2c00      	cmp	r4, #0
 80076e2:	da05      	bge.n	80076f0 <_vsniprintf_r+0x1a>
 80076e4:	238b      	movs	r3, #139	@ 0x8b
 80076e6:	6003      	str	r3, [r0, #0]
 80076e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076ec:	b01b      	add	sp, #108	@ 0x6c
 80076ee:	bd30      	pop	{r4, r5, pc}
 80076f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80076f4:	9100      	str	r1, [sp, #0]
 80076f6:	9104      	str	r1, [sp, #16]
 80076f8:	4669      	mov	r1, sp
 80076fa:	f8ad 300c 	strh.w	r3, [sp, #12]
 80076fe:	f04f 0300 	mov.w	r3, #0
 8007702:	9319      	str	r3, [sp, #100]	@ 0x64
 8007704:	bf14      	ite	ne
 8007706:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800770a:	4623      	moveq	r3, r4
 800770c:	9302      	str	r3, [sp, #8]
 800770e:	9305      	str	r3, [sp, #20]
 8007710:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007714:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007718:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800771a:	f000 f9a1 	bl	8007a60 <_svfiprintf_r>
 800771e:	1c43      	adds	r3, r0, #1
 8007720:	bfbc      	itt	lt
 8007722:	238b      	movlt	r3, #139	@ 0x8b
 8007724:	602b      	strlt	r3, [r5, #0]
 8007726:	2c00      	cmp	r4, #0
 8007728:	d0e0      	beq.n	80076ec <_vsniprintf_r+0x16>
 800772a:	9b00      	ldr	r3, [sp, #0]
 800772c:	2200      	movs	r2, #0
 800772e:	701a      	strb	r2, [r3, #0]
 8007730:	e7dc      	b.n	80076ec <_vsniprintf_r+0x16>
	...

08007734 <vsniprintf>:
 8007734:	b507      	push	{r0, r1, r2, lr}
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	4613      	mov	r3, r2
 800773a:	460a      	mov	r2, r1
 800773c:	4601      	mov	r1, r0
 800773e:	4803      	ldr	r0, [pc, #12]	@ (800774c <vsniprintf+0x18>)
 8007740:	6800      	ldr	r0, [r0, #0]
 8007742:	f7ff ffc8 	bl	80076d6 <_vsniprintf_r>
 8007746:	b003      	add	sp, #12
 8007748:	f85d fb04 	ldr.w	pc, [sp], #4
 800774c:	20000020 	.word	0x20000020

08007750 <memset>:
 8007750:	4402      	add	r2, r0
 8007752:	4603      	mov	r3, r0
 8007754:	4293      	cmp	r3, r2
 8007756:	d100      	bne.n	800775a <memset+0xa>
 8007758:	4770      	bx	lr
 800775a:	f803 1b01 	strb.w	r1, [r3], #1
 800775e:	e7f9      	b.n	8007754 <memset+0x4>

08007760 <__errno>:
 8007760:	4b01      	ldr	r3, [pc, #4]	@ (8007768 <__errno+0x8>)
 8007762:	6818      	ldr	r0, [r3, #0]
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	20000020 	.word	0x20000020

0800776c <__libc_init_array>:
 800776c:	b570      	push	{r4, r5, r6, lr}
 800776e:	4d0d      	ldr	r5, [pc, #52]	@ (80077a4 <__libc_init_array+0x38>)
 8007770:	2600      	movs	r6, #0
 8007772:	4c0d      	ldr	r4, [pc, #52]	@ (80077a8 <__libc_init_array+0x3c>)
 8007774:	1b64      	subs	r4, r4, r5
 8007776:	10a4      	asrs	r4, r4, #2
 8007778:	42a6      	cmp	r6, r4
 800777a:	d109      	bne.n	8007790 <__libc_init_array+0x24>
 800777c:	4d0b      	ldr	r5, [pc, #44]	@ (80077ac <__libc_init_array+0x40>)
 800777e:	2600      	movs	r6, #0
 8007780:	4c0b      	ldr	r4, [pc, #44]	@ (80077b0 <__libc_init_array+0x44>)
 8007782:	f000 fc75 	bl	8008070 <_init>
 8007786:	1b64      	subs	r4, r4, r5
 8007788:	10a4      	asrs	r4, r4, #2
 800778a:	42a6      	cmp	r6, r4
 800778c:	d105      	bne.n	800779a <__libc_init_array+0x2e>
 800778e:	bd70      	pop	{r4, r5, r6, pc}
 8007790:	f855 3b04 	ldr.w	r3, [r5], #4
 8007794:	3601      	adds	r6, #1
 8007796:	4798      	blx	r3
 8007798:	e7ee      	b.n	8007778 <__libc_init_array+0xc>
 800779a:	f855 3b04 	ldr.w	r3, [r5], #4
 800779e:	3601      	adds	r6, #1
 80077a0:	4798      	blx	r3
 80077a2:	e7f2      	b.n	800778a <__libc_init_array+0x1e>
 80077a4:	080086a8 	.word	0x080086a8
 80077a8:	080086a8 	.word	0x080086a8
 80077ac:	080086a8 	.word	0x080086a8
 80077b0:	080086ac 	.word	0x080086ac

080077b4 <__retarget_lock_acquire_recursive>:
 80077b4:	4770      	bx	lr

080077b6 <__retarget_lock_release_recursive>:
 80077b6:	4770      	bx	lr

080077b8 <_free_r>:
 80077b8:	b538      	push	{r3, r4, r5, lr}
 80077ba:	4605      	mov	r5, r0
 80077bc:	2900      	cmp	r1, #0
 80077be:	d041      	beq.n	8007844 <_free_r+0x8c>
 80077c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077c4:	1f0c      	subs	r4, r1, #4
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	bfb8      	it	lt
 80077ca:	18e4      	addlt	r4, r4, r3
 80077cc:	f000 f8e0 	bl	8007990 <__malloc_lock>
 80077d0:	4a1d      	ldr	r2, [pc, #116]	@ (8007848 <_free_r+0x90>)
 80077d2:	6813      	ldr	r3, [r2, #0]
 80077d4:	b933      	cbnz	r3, 80077e4 <_free_r+0x2c>
 80077d6:	6063      	str	r3, [r4, #4]
 80077d8:	6014      	str	r4, [r2, #0]
 80077da:	4628      	mov	r0, r5
 80077dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077e0:	f000 b8dc 	b.w	800799c <__malloc_unlock>
 80077e4:	42a3      	cmp	r3, r4
 80077e6:	d908      	bls.n	80077fa <_free_r+0x42>
 80077e8:	6820      	ldr	r0, [r4, #0]
 80077ea:	1821      	adds	r1, r4, r0
 80077ec:	428b      	cmp	r3, r1
 80077ee:	bf01      	itttt	eq
 80077f0:	6819      	ldreq	r1, [r3, #0]
 80077f2:	685b      	ldreq	r3, [r3, #4]
 80077f4:	1809      	addeq	r1, r1, r0
 80077f6:	6021      	streq	r1, [r4, #0]
 80077f8:	e7ed      	b.n	80077d6 <_free_r+0x1e>
 80077fa:	461a      	mov	r2, r3
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	b10b      	cbz	r3, 8007804 <_free_r+0x4c>
 8007800:	42a3      	cmp	r3, r4
 8007802:	d9fa      	bls.n	80077fa <_free_r+0x42>
 8007804:	6811      	ldr	r1, [r2, #0]
 8007806:	1850      	adds	r0, r2, r1
 8007808:	42a0      	cmp	r0, r4
 800780a:	d10b      	bne.n	8007824 <_free_r+0x6c>
 800780c:	6820      	ldr	r0, [r4, #0]
 800780e:	4401      	add	r1, r0
 8007810:	1850      	adds	r0, r2, r1
 8007812:	6011      	str	r1, [r2, #0]
 8007814:	4283      	cmp	r3, r0
 8007816:	d1e0      	bne.n	80077da <_free_r+0x22>
 8007818:	6818      	ldr	r0, [r3, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	4408      	add	r0, r1
 800781e:	6053      	str	r3, [r2, #4]
 8007820:	6010      	str	r0, [r2, #0]
 8007822:	e7da      	b.n	80077da <_free_r+0x22>
 8007824:	d902      	bls.n	800782c <_free_r+0x74>
 8007826:	230c      	movs	r3, #12
 8007828:	602b      	str	r3, [r5, #0]
 800782a:	e7d6      	b.n	80077da <_free_r+0x22>
 800782c:	6820      	ldr	r0, [r4, #0]
 800782e:	1821      	adds	r1, r4, r0
 8007830:	428b      	cmp	r3, r1
 8007832:	bf02      	ittt	eq
 8007834:	6819      	ldreq	r1, [r3, #0]
 8007836:	685b      	ldreq	r3, [r3, #4]
 8007838:	1809      	addeq	r1, r1, r0
 800783a:	6063      	str	r3, [r4, #4]
 800783c:	bf08      	it	eq
 800783e:	6021      	streq	r1, [r4, #0]
 8007840:	6054      	str	r4, [r2, #4]
 8007842:	e7ca      	b.n	80077da <_free_r+0x22>
 8007844:	bd38      	pop	{r3, r4, r5, pc}
 8007846:	bf00      	nop
 8007848:	200003b0 	.word	0x200003b0

0800784c <sbrk_aligned>:
 800784c:	b570      	push	{r4, r5, r6, lr}
 800784e:	4e0f      	ldr	r6, [pc, #60]	@ (800788c <sbrk_aligned+0x40>)
 8007850:	460c      	mov	r4, r1
 8007852:	4605      	mov	r5, r0
 8007854:	6831      	ldr	r1, [r6, #0]
 8007856:	b911      	cbnz	r1, 800785e <sbrk_aligned+0x12>
 8007858:	f000 fba8 	bl	8007fac <_sbrk_r>
 800785c:	6030      	str	r0, [r6, #0]
 800785e:	4621      	mov	r1, r4
 8007860:	4628      	mov	r0, r5
 8007862:	f000 fba3 	bl	8007fac <_sbrk_r>
 8007866:	1c43      	adds	r3, r0, #1
 8007868:	d103      	bne.n	8007872 <sbrk_aligned+0x26>
 800786a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800786e:	4620      	mov	r0, r4
 8007870:	bd70      	pop	{r4, r5, r6, pc}
 8007872:	1cc4      	adds	r4, r0, #3
 8007874:	f024 0403 	bic.w	r4, r4, #3
 8007878:	42a0      	cmp	r0, r4
 800787a:	d0f8      	beq.n	800786e <sbrk_aligned+0x22>
 800787c:	1a21      	subs	r1, r4, r0
 800787e:	4628      	mov	r0, r5
 8007880:	f000 fb94 	bl	8007fac <_sbrk_r>
 8007884:	3001      	adds	r0, #1
 8007886:	d1f2      	bne.n	800786e <sbrk_aligned+0x22>
 8007888:	e7ef      	b.n	800786a <sbrk_aligned+0x1e>
 800788a:	bf00      	nop
 800788c:	200003ac 	.word	0x200003ac

08007890 <_malloc_r>:
 8007890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007894:	1ccd      	adds	r5, r1, #3
 8007896:	4606      	mov	r6, r0
 8007898:	f025 0503 	bic.w	r5, r5, #3
 800789c:	3508      	adds	r5, #8
 800789e:	2d0c      	cmp	r5, #12
 80078a0:	bf38      	it	cc
 80078a2:	250c      	movcc	r5, #12
 80078a4:	2d00      	cmp	r5, #0
 80078a6:	db01      	blt.n	80078ac <_malloc_r+0x1c>
 80078a8:	42a9      	cmp	r1, r5
 80078aa:	d904      	bls.n	80078b6 <_malloc_r+0x26>
 80078ac:	230c      	movs	r3, #12
 80078ae:	6033      	str	r3, [r6, #0]
 80078b0:	2000      	movs	r0, #0
 80078b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800798c <_malloc_r+0xfc>
 80078ba:	f000 f869 	bl	8007990 <__malloc_lock>
 80078be:	f8d8 3000 	ldr.w	r3, [r8]
 80078c2:	461c      	mov	r4, r3
 80078c4:	bb44      	cbnz	r4, 8007918 <_malloc_r+0x88>
 80078c6:	4629      	mov	r1, r5
 80078c8:	4630      	mov	r0, r6
 80078ca:	f7ff ffbf 	bl	800784c <sbrk_aligned>
 80078ce:	1c43      	adds	r3, r0, #1
 80078d0:	4604      	mov	r4, r0
 80078d2:	d158      	bne.n	8007986 <_malloc_r+0xf6>
 80078d4:	f8d8 4000 	ldr.w	r4, [r8]
 80078d8:	4627      	mov	r7, r4
 80078da:	2f00      	cmp	r7, #0
 80078dc:	d143      	bne.n	8007966 <_malloc_r+0xd6>
 80078de:	2c00      	cmp	r4, #0
 80078e0:	d04b      	beq.n	800797a <_malloc_r+0xea>
 80078e2:	6823      	ldr	r3, [r4, #0]
 80078e4:	4639      	mov	r1, r7
 80078e6:	4630      	mov	r0, r6
 80078e8:	eb04 0903 	add.w	r9, r4, r3
 80078ec:	f000 fb5e 	bl	8007fac <_sbrk_r>
 80078f0:	4581      	cmp	r9, r0
 80078f2:	d142      	bne.n	800797a <_malloc_r+0xea>
 80078f4:	6821      	ldr	r1, [r4, #0]
 80078f6:	4630      	mov	r0, r6
 80078f8:	1a6d      	subs	r5, r5, r1
 80078fa:	4629      	mov	r1, r5
 80078fc:	f7ff ffa6 	bl	800784c <sbrk_aligned>
 8007900:	3001      	adds	r0, #1
 8007902:	d03a      	beq.n	800797a <_malloc_r+0xea>
 8007904:	6823      	ldr	r3, [r4, #0]
 8007906:	442b      	add	r3, r5
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	f8d8 3000 	ldr.w	r3, [r8]
 800790e:	685a      	ldr	r2, [r3, #4]
 8007910:	bb62      	cbnz	r2, 800796c <_malloc_r+0xdc>
 8007912:	f8c8 7000 	str.w	r7, [r8]
 8007916:	e00f      	b.n	8007938 <_malloc_r+0xa8>
 8007918:	6822      	ldr	r2, [r4, #0]
 800791a:	1b52      	subs	r2, r2, r5
 800791c:	d420      	bmi.n	8007960 <_malloc_r+0xd0>
 800791e:	2a0b      	cmp	r2, #11
 8007920:	d917      	bls.n	8007952 <_malloc_r+0xc2>
 8007922:	1961      	adds	r1, r4, r5
 8007924:	42a3      	cmp	r3, r4
 8007926:	6025      	str	r5, [r4, #0]
 8007928:	bf18      	it	ne
 800792a:	6059      	strne	r1, [r3, #4]
 800792c:	6863      	ldr	r3, [r4, #4]
 800792e:	bf08      	it	eq
 8007930:	f8c8 1000 	streq.w	r1, [r8]
 8007934:	5162      	str	r2, [r4, r5]
 8007936:	604b      	str	r3, [r1, #4]
 8007938:	4630      	mov	r0, r6
 800793a:	f000 f82f 	bl	800799c <__malloc_unlock>
 800793e:	f104 000b 	add.w	r0, r4, #11
 8007942:	1d23      	adds	r3, r4, #4
 8007944:	f020 0007 	bic.w	r0, r0, #7
 8007948:	1ac2      	subs	r2, r0, r3
 800794a:	bf1c      	itt	ne
 800794c:	1a1b      	subne	r3, r3, r0
 800794e:	50a3      	strne	r3, [r4, r2]
 8007950:	e7af      	b.n	80078b2 <_malloc_r+0x22>
 8007952:	6862      	ldr	r2, [r4, #4]
 8007954:	42a3      	cmp	r3, r4
 8007956:	bf0c      	ite	eq
 8007958:	f8c8 2000 	streq.w	r2, [r8]
 800795c:	605a      	strne	r2, [r3, #4]
 800795e:	e7eb      	b.n	8007938 <_malloc_r+0xa8>
 8007960:	4623      	mov	r3, r4
 8007962:	6864      	ldr	r4, [r4, #4]
 8007964:	e7ae      	b.n	80078c4 <_malloc_r+0x34>
 8007966:	463c      	mov	r4, r7
 8007968:	687f      	ldr	r7, [r7, #4]
 800796a:	e7b6      	b.n	80078da <_malloc_r+0x4a>
 800796c:	461a      	mov	r2, r3
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	42a3      	cmp	r3, r4
 8007972:	d1fb      	bne.n	800796c <_malloc_r+0xdc>
 8007974:	2300      	movs	r3, #0
 8007976:	6053      	str	r3, [r2, #4]
 8007978:	e7de      	b.n	8007938 <_malloc_r+0xa8>
 800797a:	230c      	movs	r3, #12
 800797c:	4630      	mov	r0, r6
 800797e:	6033      	str	r3, [r6, #0]
 8007980:	f000 f80c 	bl	800799c <__malloc_unlock>
 8007984:	e794      	b.n	80078b0 <_malloc_r+0x20>
 8007986:	6005      	str	r5, [r0, #0]
 8007988:	e7d6      	b.n	8007938 <_malloc_r+0xa8>
 800798a:	bf00      	nop
 800798c:	200003b0 	.word	0x200003b0

08007990 <__malloc_lock>:
 8007990:	4801      	ldr	r0, [pc, #4]	@ (8007998 <__malloc_lock+0x8>)
 8007992:	f7ff bf0f 	b.w	80077b4 <__retarget_lock_acquire_recursive>
 8007996:	bf00      	nop
 8007998:	200003a8 	.word	0x200003a8

0800799c <__malloc_unlock>:
 800799c:	4801      	ldr	r0, [pc, #4]	@ (80079a4 <__malloc_unlock+0x8>)
 800799e:	f7ff bf0a 	b.w	80077b6 <__retarget_lock_release_recursive>
 80079a2:	bf00      	nop
 80079a4:	200003a8 	.word	0x200003a8

080079a8 <__ssputs_r>:
 80079a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079ac:	461f      	mov	r7, r3
 80079ae:	688e      	ldr	r6, [r1, #8]
 80079b0:	4682      	mov	sl, r0
 80079b2:	460c      	mov	r4, r1
 80079b4:	42be      	cmp	r6, r7
 80079b6:	4690      	mov	r8, r2
 80079b8:	680b      	ldr	r3, [r1, #0]
 80079ba:	d82d      	bhi.n	8007a18 <__ssputs_r+0x70>
 80079bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80079c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80079c4:	d026      	beq.n	8007a14 <__ssputs_r+0x6c>
 80079c6:	6965      	ldr	r5, [r4, #20]
 80079c8:	6909      	ldr	r1, [r1, #16]
 80079ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079ce:	eba3 0901 	sub.w	r9, r3, r1
 80079d2:	1c7b      	adds	r3, r7, #1
 80079d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079d8:	444b      	add	r3, r9
 80079da:	106d      	asrs	r5, r5, #1
 80079dc:	429d      	cmp	r5, r3
 80079de:	bf38      	it	cc
 80079e0:	461d      	movcc	r5, r3
 80079e2:	0553      	lsls	r3, r2, #21
 80079e4:	d527      	bpl.n	8007a36 <__ssputs_r+0x8e>
 80079e6:	4629      	mov	r1, r5
 80079e8:	f7ff ff52 	bl	8007890 <_malloc_r>
 80079ec:	4606      	mov	r6, r0
 80079ee:	b360      	cbz	r0, 8007a4a <__ssputs_r+0xa2>
 80079f0:	464a      	mov	r2, r9
 80079f2:	6921      	ldr	r1, [r4, #16]
 80079f4:	f000 faf8 	bl	8007fe8 <memcpy>
 80079f8:	89a3      	ldrh	r3, [r4, #12]
 80079fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80079fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a02:	81a3      	strh	r3, [r4, #12]
 8007a04:	6126      	str	r6, [r4, #16]
 8007a06:	444e      	add	r6, r9
 8007a08:	6165      	str	r5, [r4, #20]
 8007a0a:	eba5 0509 	sub.w	r5, r5, r9
 8007a0e:	6026      	str	r6, [r4, #0]
 8007a10:	463e      	mov	r6, r7
 8007a12:	60a5      	str	r5, [r4, #8]
 8007a14:	42be      	cmp	r6, r7
 8007a16:	d900      	bls.n	8007a1a <__ssputs_r+0x72>
 8007a18:	463e      	mov	r6, r7
 8007a1a:	4632      	mov	r2, r6
 8007a1c:	4641      	mov	r1, r8
 8007a1e:	6820      	ldr	r0, [r4, #0]
 8007a20:	f000 faaa 	bl	8007f78 <memmove>
 8007a24:	68a3      	ldr	r3, [r4, #8]
 8007a26:	2000      	movs	r0, #0
 8007a28:	1b9b      	subs	r3, r3, r6
 8007a2a:	60a3      	str	r3, [r4, #8]
 8007a2c:	6823      	ldr	r3, [r4, #0]
 8007a2e:	4433      	add	r3, r6
 8007a30:	6023      	str	r3, [r4, #0]
 8007a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a36:	462a      	mov	r2, r5
 8007a38:	f000 fae3 	bl	8008002 <_realloc_r>
 8007a3c:	4606      	mov	r6, r0
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	d1e0      	bne.n	8007a04 <__ssputs_r+0x5c>
 8007a42:	6921      	ldr	r1, [r4, #16]
 8007a44:	4650      	mov	r0, sl
 8007a46:	f7ff feb7 	bl	80077b8 <_free_r>
 8007a4a:	230c      	movs	r3, #12
 8007a4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a50:	f8ca 3000 	str.w	r3, [sl]
 8007a54:	89a3      	ldrh	r3, [r4, #12]
 8007a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a5a:	81a3      	strh	r3, [r4, #12]
 8007a5c:	e7e9      	b.n	8007a32 <__ssputs_r+0x8a>
	...

08007a60 <_svfiprintf_r>:
 8007a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a64:	4698      	mov	r8, r3
 8007a66:	898b      	ldrh	r3, [r1, #12]
 8007a68:	b09d      	sub	sp, #116	@ 0x74
 8007a6a:	4607      	mov	r7, r0
 8007a6c:	061b      	lsls	r3, r3, #24
 8007a6e:	460d      	mov	r5, r1
 8007a70:	4614      	mov	r4, r2
 8007a72:	d510      	bpl.n	8007a96 <_svfiprintf_r+0x36>
 8007a74:	690b      	ldr	r3, [r1, #16]
 8007a76:	b973      	cbnz	r3, 8007a96 <_svfiprintf_r+0x36>
 8007a78:	2140      	movs	r1, #64	@ 0x40
 8007a7a:	f7ff ff09 	bl	8007890 <_malloc_r>
 8007a7e:	6028      	str	r0, [r5, #0]
 8007a80:	6128      	str	r0, [r5, #16]
 8007a82:	b930      	cbnz	r0, 8007a92 <_svfiprintf_r+0x32>
 8007a84:	230c      	movs	r3, #12
 8007a86:	603b      	str	r3, [r7, #0]
 8007a88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a8c:	b01d      	add	sp, #116	@ 0x74
 8007a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a92:	2340      	movs	r3, #64	@ 0x40
 8007a94:	616b      	str	r3, [r5, #20]
 8007a96:	2300      	movs	r3, #0
 8007a98:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a9c:	f04f 0901 	mov.w	r9, #1
 8007aa0:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8007c44 <_svfiprintf_r+0x1e4>
 8007aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007aa6:	2320      	movs	r3, #32
 8007aa8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007aac:	2330      	movs	r3, #48	@ 0x30
 8007aae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ab2:	4623      	mov	r3, r4
 8007ab4:	469a      	mov	sl, r3
 8007ab6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aba:	b10a      	cbz	r2, 8007ac0 <_svfiprintf_r+0x60>
 8007abc:	2a25      	cmp	r2, #37	@ 0x25
 8007abe:	d1f9      	bne.n	8007ab4 <_svfiprintf_r+0x54>
 8007ac0:	ebba 0b04 	subs.w	fp, sl, r4
 8007ac4:	d00b      	beq.n	8007ade <_svfiprintf_r+0x7e>
 8007ac6:	465b      	mov	r3, fp
 8007ac8:	4622      	mov	r2, r4
 8007aca:	4629      	mov	r1, r5
 8007acc:	4638      	mov	r0, r7
 8007ace:	f7ff ff6b 	bl	80079a8 <__ssputs_r>
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	f000 80a7 	beq.w	8007c26 <_svfiprintf_r+0x1c6>
 8007ad8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ada:	445a      	add	r2, fp
 8007adc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ade:	f89a 3000 	ldrb.w	r3, [sl]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 809f 	beq.w	8007c26 <_svfiprintf_r+0x1c6>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007aee:	f10a 0a01 	add.w	sl, sl, #1
 8007af2:	9304      	str	r3, [sp, #16]
 8007af4:	9307      	str	r3, [sp, #28]
 8007af6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007afa:	931a      	str	r3, [sp, #104]	@ 0x68
 8007afc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b00:	4654      	mov	r4, sl
 8007b02:	2205      	movs	r2, #5
 8007b04:	484f      	ldr	r0, [pc, #316]	@ (8007c44 <_svfiprintf_r+0x1e4>)
 8007b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b0a:	f000 fa5f 	bl	8007fcc <memchr>
 8007b0e:	9a04      	ldr	r2, [sp, #16]
 8007b10:	b9d8      	cbnz	r0, 8007b4a <_svfiprintf_r+0xea>
 8007b12:	06d0      	lsls	r0, r2, #27
 8007b14:	bf44      	itt	mi
 8007b16:	2320      	movmi	r3, #32
 8007b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b1c:	0711      	lsls	r1, r2, #28
 8007b1e:	bf44      	itt	mi
 8007b20:	232b      	movmi	r3, #43	@ 0x2b
 8007b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b26:	f89a 3000 	ldrb.w	r3, [sl]
 8007b2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b2c:	d015      	beq.n	8007b5a <_svfiprintf_r+0xfa>
 8007b2e:	9a07      	ldr	r2, [sp, #28]
 8007b30:	4654      	mov	r4, sl
 8007b32:	2000      	movs	r0, #0
 8007b34:	f04f 0c0a 	mov.w	ip, #10
 8007b38:	4621      	mov	r1, r4
 8007b3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b3e:	3b30      	subs	r3, #48	@ 0x30
 8007b40:	2b09      	cmp	r3, #9
 8007b42:	d94b      	bls.n	8007bdc <_svfiprintf_r+0x17c>
 8007b44:	b1b0      	cbz	r0, 8007b74 <_svfiprintf_r+0x114>
 8007b46:	9207      	str	r2, [sp, #28]
 8007b48:	e014      	b.n	8007b74 <_svfiprintf_r+0x114>
 8007b4a:	eba0 0308 	sub.w	r3, r0, r8
 8007b4e:	46a2      	mov	sl, r4
 8007b50:	fa09 f303 	lsl.w	r3, r9, r3
 8007b54:	4313      	orrs	r3, r2
 8007b56:	9304      	str	r3, [sp, #16]
 8007b58:	e7d2      	b.n	8007b00 <_svfiprintf_r+0xa0>
 8007b5a:	9b03      	ldr	r3, [sp, #12]
 8007b5c:	1d19      	adds	r1, r3, #4
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	9103      	str	r1, [sp, #12]
 8007b64:	bfbb      	ittet	lt
 8007b66:	425b      	neglt	r3, r3
 8007b68:	f042 0202 	orrlt.w	r2, r2, #2
 8007b6c:	9307      	strge	r3, [sp, #28]
 8007b6e:	9307      	strlt	r3, [sp, #28]
 8007b70:	bfb8      	it	lt
 8007b72:	9204      	strlt	r2, [sp, #16]
 8007b74:	7823      	ldrb	r3, [r4, #0]
 8007b76:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b78:	d10a      	bne.n	8007b90 <_svfiprintf_r+0x130>
 8007b7a:	7863      	ldrb	r3, [r4, #1]
 8007b7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b7e:	d132      	bne.n	8007be6 <_svfiprintf_r+0x186>
 8007b80:	9b03      	ldr	r3, [sp, #12]
 8007b82:	3402      	adds	r4, #2
 8007b84:	1d1a      	adds	r2, r3, #4
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b8c:	9203      	str	r2, [sp, #12]
 8007b8e:	9305      	str	r3, [sp, #20]
 8007b90:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007c54 <_svfiprintf_r+0x1f4>
 8007b94:	2203      	movs	r2, #3
 8007b96:	7821      	ldrb	r1, [r4, #0]
 8007b98:	4650      	mov	r0, sl
 8007b9a:	f000 fa17 	bl	8007fcc <memchr>
 8007b9e:	b138      	cbz	r0, 8007bb0 <_svfiprintf_r+0x150>
 8007ba0:	eba0 000a 	sub.w	r0, r0, sl
 8007ba4:	2240      	movs	r2, #64	@ 0x40
 8007ba6:	9b04      	ldr	r3, [sp, #16]
 8007ba8:	3401      	adds	r4, #1
 8007baa:	4082      	lsls	r2, r0
 8007bac:	4313      	orrs	r3, r2
 8007bae:	9304      	str	r3, [sp, #16]
 8007bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb4:	2206      	movs	r2, #6
 8007bb6:	4824      	ldr	r0, [pc, #144]	@ (8007c48 <_svfiprintf_r+0x1e8>)
 8007bb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007bbc:	f000 fa06 	bl	8007fcc <memchr>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	d036      	beq.n	8007c32 <_svfiprintf_r+0x1d2>
 8007bc4:	4b21      	ldr	r3, [pc, #132]	@ (8007c4c <_svfiprintf_r+0x1ec>)
 8007bc6:	bb1b      	cbnz	r3, 8007c10 <_svfiprintf_r+0x1b0>
 8007bc8:	9b03      	ldr	r3, [sp, #12]
 8007bca:	3307      	adds	r3, #7
 8007bcc:	f023 0307 	bic.w	r3, r3, #7
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	9303      	str	r3, [sp, #12]
 8007bd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bd6:	4433      	add	r3, r6
 8007bd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bda:	e76a      	b.n	8007ab2 <_svfiprintf_r+0x52>
 8007bdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007be0:	460c      	mov	r4, r1
 8007be2:	2001      	movs	r0, #1
 8007be4:	e7a8      	b.n	8007b38 <_svfiprintf_r+0xd8>
 8007be6:	2300      	movs	r3, #0
 8007be8:	3401      	adds	r4, #1
 8007bea:	f04f 0c0a 	mov.w	ip, #10
 8007bee:	4619      	mov	r1, r3
 8007bf0:	9305      	str	r3, [sp, #20]
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bf8:	3a30      	subs	r2, #48	@ 0x30
 8007bfa:	2a09      	cmp	r2, #9
 8007bfc:	d903      	bls.n	8007c06 <_svfiprintf_r+0x1a6>
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d0c6      	beq.n	8007b90 <_svfiprintf_r+0x130>
 8007c02:	9105      	str	r1, [sp, #20]
 8007c04:	e7c4      	b.n	8007b90 <_svfiprintf_r+0x130>
 8007c06:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c0a:	4604      	mov	r4, r0
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e7f0      	b.n	8007bf2 <_svfiprintf_r+0x192>
 8007c10:	ab03      	add	r3, sp, #12
 8007c12:	462a      	mov	r2, r5
 8007c14:	a904      	add	r1, sp, #16
 8007c16:	4638      	mov	r0, r7
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c50 <_svfiprintf_r+0x1f0>)
 8007c1c:	f3af 8000 	nop.w
 8007c20:	1c42      	adds	r2, r0, #1
 8007c22:	4606      	mov	r6, r0
 8007c24:	d1d6      	bne.n	8007bd4 <_svfiprintf_r+0x174>
 8007c26:	89ab      	ldrh	r3, [r5, #12]
 8007c28:	065b      	lsls	r3, r3, #25
 8007c2a:	f53f af2d 	bmi.w	8007a88 <_svfiprintf_r+0x28>
 8007c2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c30:	e72c      	b.n	8007a8c <_svfiprintf_r+0x2c>
 8007c32:	ab03      	add	r3, sp, #12
 8007c34:	462a      	mov	r2, r5
 8007c36:	a904      	add	r1, sp, #16
 8007c38:	4638      	mov	r0, r7
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	4b04      	ldr	r3, [pc, #16]	@ (8007c50 <_svfiprintf_r+0x1f0>)
 8007c3e:	f000 f87d 	bl	8007d3c <_printf_i>
 8007c42:	e7ed      	b.n	8007c20 <_svfiprintf_r+0x1c0>
 8007c44:	0800866c 	.word	0x0800866c
 8007c48:	08008676 	.word	0x08008676
 8007c4c:	00000000 	.word	0x00000000
 8007c50:	080079a9 	.word	0x080079a9
 8007c54:	08008672 	.word	0x08008672

08007c58 <_printf_common>:
 8007c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c5c:	4616      	mov	r6, r2
 8007c5e:	4698      	mov	r8, r3
 8007c60:	688a      	ldr	r2, [r1, #8]
 8007c62:	4607      	mov	r7, r0
 8007c64:	690b      	ldr	r3, [r1, #16]
 8007c66:	460c      	mov	r4, r1
 8007c68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	bfb8      	it	lt
 8007c70:	4613      	movlt	r3, r2
 8007c72:	6033      	str	r3, [r6, #0]
 8007c74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c78:	b10a      	cbz	r2, 8007c7e <_printf_common+0x26>
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	6033      	str	r3, [r6, #0]
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	0699      	lsls	r1, r3, #26
 8007c82:	bf42      	ittt	mi
 8007c84:	6833      	ldrmi	r3, [r6, #0]
 8007c86:	3302      	addmi	r3, #2
 8007c88:	6033      	strmi	r3, [r6, #0]
 8007c8a:	6825      	ldr	r5, [r4, #0]
 8007c8c:	f015 0506 	ands.w	r5, r5, #6
 8007c90:	d106      	bne.n	8007ca0 <_printf_common+0x48>
 8007c92:	f104 0a19 	add.w	sl, r4, #25
 8007c96:	68e3      	ldr	r3, [r4, #12]
 8007c98:	6832      	ldr	r2, [r6, #0]
 8007c9a:	1a9b      	subs	r3, r3, r2
 8007c9c:	42ab      	cmp	r3, r5
 8007c9e:	dc2b      	bgt.n	8007cf8 <_printf_common+0xa0>
 8007ca0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ca4:	6822      	ldr	r2, [r4, #0]
 8007ca6:	3b00      	subs	r3, #0
 8007ca8:	bf18      	it	ne
 8007caa:	2301      	movne	r3, #1
 8007cac:	0692      	lsls	r2, r2, #26
 8007cae:	d430      	bmi.n	8007d12 <_printf_common+0xba>
 8007cb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007cb4:	4641      	mov	r1, r8
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	47c8      	blx	r9
 8007cba:	3001      	adds	r0, #1
 8007cbc:	d023      	beq.n	8007d06 <_printf_common+0xae>
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	341a      	adds	r4, #26
 8007cc2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8007cc6:	f003 0306 	and.w	r3, r3, #6
 8007cca:	2b04      	cmp	r3, #4
 8007ccc:	bf0a      	itet	eq
 8007cce:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8007cd2:	2500      	movne	r5, #0
 8007cd4:	6833      	ldreq	r3, [r6, #0]
 8007cd6:	f04f 0600 	mov.w	r6, #0
 8007cda:	bf08      	it	eq
 8007cdc:	1aed      	subeq	r5, r5, r3
 8007cde:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007ce2:	bf08      	it	eq
 8007ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	bfc4      	itt	gt
 8007cec:	1a9b      	subgt	r3, r3, r2
 8007cee:	18ed      	addgt	r5, r5, r3
 8007cf0:	42b5      	cmp	r5, r6
 8007cf2:	d11a      	bne.n	8007d2a <_printf_common+0xd2>
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	e008      	b.n	8007d0a <_printf_common+0xb2>
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	4652      	mov	r2, sl
 8007cfc:	4641      	mov	r1, r8
 8007cfe:	4638      	mov	r0, r7
 8007d00:	47c8      	blx	r9
 8007d02:	3001      	adds	r0, #1
 8007d04:	d103      	bne.n	8007d0e <_printf_common+0xb6>
 8007d06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d0e:	3501      	adds	r5, #1
 8007d10:	e7c1      	b.n	8007c96 <_printf_common+0x3e>
 8007d12:	18e1      	adds	r1, r4, r3
 8007d14:	1c5a      	adds	r2, r3, #1
 8007d16:	2030      	movs	r0, #48	@ 0x30
 8007d18:	3302      	adds	r3, #2
 8007d1a:	4422      	add	r2, r4
 8007d1c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d28:	e7c2      	b.n	8007cb0 <_printf_common+0x58>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	4622      	mov	r2, r4
 8007d2e:	4641      	mov	r1, r8
 8007d30:	4638      	mov	r0, r7
 8007d32:	47c8      	blx	r9
 8007d34:	3001      	adds	r0, #1
 8007d36:	d0e6      	beq.n	8007d06 <_printf_common+0xae>
 8007d38:	3601      	adds	r6, #1
 8007d3a:	e7d9      	b.n	8007cf0 <_printf_common+0x98>

08007d3c <_printf_i>:
 8007d3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d40:	7e0f      	ldrb	r7, [r1, #24]
 8007d42:	4691      	mov	r9, r2
 8007d44:	4680      	mov	r8, r0
 8007d46:	460c      	mov	r4, r1
 8007d48:	2f78      	cmp	r7, #120	@ 0x78
 8007d4a:	469a      	mov	sl, r3
 8007d4c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d52:	d807      	bhi.n	8007d64 <_printf_i+0x28>
 8007d54:	2f62      	cmp	r7, #98	@ 0x62
 8007d56:	d80a      	bhi.n	8007d6e <_printf_i+0x32>
 8007d58:	2f00      	cmp	r7, #0
 8007d5a:	f000 80d1 	beq.w	8007f00 <_printf_i+0x1c4>
 8007d5e:	2f58      	cmp	r7, #88	@ 0x58
 8007d60:	f000 80b8 	beq.w	8007ed4 <_printf_i+0x198>
 8007d64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d6c:	e03a      	b.n	8007de4 <_printf_i+0xa8>
 8007d6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d72:	2b15      	cmp	r3, #21
 8007d74:	d8f6      	bhi.n	8007d64 <_printf_i+0x28>
 8007d76:	a101      	add	r1, pc, #4	@ (adr r1, 8007d7c <_printf_i+0x40>)
 8007d78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d7c:	08007dd5 	.word	0x08007dd5
 8007d80:	08007de9 	.word	0x08007de9
 8007d84:	08007d65 	.word	0x08007d65
 8007d88:	08007d65 	.word	0x08007d65
 8007d8c:	08007d65 	.word	0x08007d65
 8007d90:	08007d65 	.word	0x08007d65
 8007d94:	08007de9 	.word	0x08007de9
 8007d98:	08007d65 	.word	0x08007d65
 8007d9c:	08007d65 	.word	0x08007d65
 8007da0:	08007d65 	.word	0x08007d65
 8007da4:	08007d65 	.word	0x08007d65
 8007da8:	08007ee7 	.word	0x08007ee7
 8007dac:	08007e13 	.word	0x08007e13
 8007db0:	08007ea1 	.word	0x08007ea1
 8007db4:	08007d65 	.word	0x08007d65
 8007db8:	08007d65 	.word	0x08007d65
 8007dbc:	08007f09 	.word	0x08007f09
 8007dc0:	08007d65 	.word	0x08007d65
 8007dc4:	08007e13 	.word	0x08007e13
 8007dc8:	08007d65 	.word	0x08007d65
 8007dcc:	08007d65 	.word	0x08007d65
 8007dd0:	08007ea9 	.word	0x08007ea9
 8007dd4:	6833      	ldr	r3, [r6, #0]
 8007dd6:	1d1a      	adds	r2, r3, #4
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	6032      	str	r2, [r6, #0]
 8007ddc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007de0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007de4:	2301      	movs	r3, #1
 8007de6:	e09c      	b.n	8007f22 <_printf_i+0x1e6>
 8007de8:	6833      	ldr	r3, [r6, #0]
 8007dea:	6820      	ldr	r0, [r4, #0]
 8007dec:	1d19      	adds	r1, r3, #4
 8007dee:	6031      	str	r1, [r6, #0]
 8007df0:	0606      	lsls	r6, r0, #24
 8007df2:	d501      	bpl.n	8007df8 <_printf_i+0xbc>
 8007df4:	681d      	ldr	r5, [r3, #0]
 8007df6:	e003      	b.n	8007e00 <_printf_i+0xc4>
 8007df8:	0645      	lsls	r5, r0, #25
 8007dfa:	d5fb      	bpl.n	8007df4 <_printf_i+0xb8>
 8007dfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e00:	2d00      	cmp	r5, #0
 8007e02:	da03      	bge.n	8007e0c <_printf_i+0xd0>
 8007e04:	232d      	movs	r3, #45	@ 0x2d
 8007e06:	426d      	negs	r5, r5
 8007e08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e0c:	4858      	ldr	r0, [pc, #352]	@ (8007f70 <_printf_i+0x234>)
 8007e0e:	230a      	movs	r3, #10
 8007e10:	e011      	b.n	8007e36 <_printf_i+0xfa>
 8007e12:	6821      	ldr	r1, [r4, #0]
 8007e14:	6833      	ldr	r3, [r6, #0]
 8007e16:	0608      	lsls	r0, r1, #24
 8007e18:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e1c:	d402      	bmi.n	8007e24 <_printf_i+0xe8>
 8007e1e:	0649      	lsls	r1, r1, #25
 8007e20:	bf48      	it	mi
 8007e22:	b2ad      	uxthmi	r5, r5
 8007e24:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e26:	6033      	str	r3, [r6, #0]
 8007e28:	4851      	ldr	r0, [pc, #324]	@ (8007f70 <_printf_i+0x234>)
 8007e2a:	bf14      	ite	ne
 8007e2c:	230a      	movne	r3, #10
 8007e2e:	2308      	moveq	r3, #8
 8007e30:	2100      	movs	r1, #0
 8007e32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e36:	6866      	ldr	r6, [r4, #4]
 8007e38:	2e00      	cmp	r6, #0
 8007e3a:	60a6      	str	r6, [r4, #8]
 8007e3c:	db05      	blt.n	8007e4a <_printf_i+0x10e>
 8007e3e:	6821      	ldr	r1, [r4, #0]
 8007e40:	432e      	orrs	r6, r5
 8007e42:	f021 0104 	bic.w	r1, r1, #4
 8007e46:	6021      	str	r1, [r4, #0]
 8007e48:	d04b      	beq.n	8007ee2 <_printf_i+0x1a6>
 8007e4a:	4616      	mov	r6, r2
 8007e4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e50:	fb03 5711 	mls	r7, r3, r1, r5
 8007e54:	5dc7      	ldrb	r7, [r0, r7]
 8007e56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e5a:	462f      	mov	r7, r5
 8007e5c:	460d      	mov	r5, r1
 8007e5e:	42bb      	cmp	r3, r7
 8007e60:	d9f4      	bls.n	8007e4c <_printf_i+0x110>
 8007e62:	2b08      	cmp	r3, #8
 8007e64:	d10b      	bne.n	8007e7e <_printf_i+0x142>
 8007e66:	6823      	ldr	r3, [r4, #0]
 8007e68:	07df      	lsls	r7, r3, #31
 8007e6a:	d508      	bpl.n	8007e7e <_printf_i+0x142>
 8007e6c:	6923      	ldr	r3, [r4, #16]
 8007e6e:	6861      	ldr	r1, [r4, #4]
 8007e70:	4299      	cmp	r1, r3
 8007e72:	bfde      	ittt	le
 8007e74:	2330      	movle	r3, #48	@ 0x30
 8007e76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e7a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007e7e:	1b92      	subs	r2, r2, r6
 8007e80:	6122      	str	r2, [r4, #16]
 8007e82:	464b      	mov	r3, r9
 8007e84:	aa03      	add	r2, sp, #12
 8007e86:	4621      	mov	r1, r4
 8007e88:	4640      	mov	r0, r8
 8007e8a:	f8cd a000 	str.w	sl, [sp]
 8007e8e:	f7ff fee3 	bl	8007c58 <_printf_common>
 8007e92:	3001      	adds	r0, #1
 8007e94:	d14a      	bne.n	8007f2c <_printf_i+0x1f0>
 8007e96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e9a:	b004      	add	sp, #16
 8007e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	f043 0320 	orr.w	r3, r3, #32
 8007ea6:	6023      	str	r3, [r4, #0]
 8007ea8:	2778      	movs	r7, #120	@ 0x78
 8007eaa:	4832      	ldr	r0, [pc, #200]	@ (8007f74 <_printf_i+0x238>)
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007eb2:	061f      	lsls	r7, r3, #24
 8007eb4:	6831      	ldr	r1, [r6, #0]
 8007eb6:	f851 5b04 	ldr.w	r5, [r1], #4
 8007eba:	d402      	bmi.n	8007ec2 <_printf_i+0x186>
 8007ebc:	065f      	lsls	r7, r3, #25
 8007ebe:	bf48      	it	mi
 8007ec0:	b2ad      	uxthmi	r5, r5
 8007ec2:	6031      	str	r1, [r6, #0]
 8007ec4:	07d9      	lsls	r1, r3, #31
 8007ec6:	bf44      	itt	mi
 8007ec8:	f043 0320 	orrmi.w	r3, r3, #32
 8007ecc:	6023      	strmi	r3, [r4, #0]
 8007ece:	b11d      	cbz	r5, 8007ed8 <_printf_i+0x19c>
 8007ed0:	2310      	movs	r3, #16
 8007ed2:	e7ad      	b.n	8007e30 <_printf_i+0xf4>
 8007ed4:	4826      	ldr	r0, [pc, #152]	@ (8007f70 <_printf_i+0x234>)
 8007ed6:	e7e9      	b.n	8007eac <_printf_i+0x170>
 8007ed8:	6823      	ldr	r3, [r4, #0]
 8007eda:	f023 0320 	bic.w	r3, r3, #32
 8007ede:	6023      	str	r3, [r4, #0]
 8007ee0:	e7f6      	b.n	8007ed0 <_printf_i+0x194>
 8007ee2:	4616      	mov	r6, r2
 8007ee4:	e7bd      	b.n	8007e62 <_printf_i+0x126>
 8007ee6:	6833      	ldr	r3, [r6, #0]
 8007ee8:	6825      	ldr	r5, [r4, #0]
 8007eea:	1d18      	adds	r0, r3, #4
 8007eec:	6961      	ldr	r1, [r4, #20]
 8007eee:	6030      	str	r0, [r6, #0]
 8007ef0:	062e      	lsls	r6, r5, #24
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	d501      	bpl.n	8007efa <_printf_i+0x1be>
 8007ef6:	6019      	str	r1, [r3, #0]
 8007ef8:	e002      	b.n	8007f00 <_printf_i+0x1c4>
 8007efa:	0668      	lsls	r0, r5, #25
 8007efc:	d5fb      	bpl.n	8007ef6 <_printf_i+0x1ba>
 8007efe:	8019      	strh	r1, [r3, #0]
 8007f00:	2300      	movs	r3, #0
 8007f02:	4616      	mov	r6, r2
 8007f04:	6123      	str	r3, [r4, #16]
 8007f06:	e7bc      	b.n	8007e82 <_printf_i+0x146>
 8007f08:	6833      	ldr	r3, [r6, #0]
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	1d1a      	adds	r2, r3, #4
 8007f0e:	6032      	str	r2, [r6, #0]
 8007f10:	681e      	ldr	r6, [r3, #0]
 8007f12:	6862      	ldr	r2, [r4, #4]
 8007f14:	4630      	mov	r0, r6
 8007f16:	f000 f859 	bl	8007fcc <memchr>
 8007f1a:	b108      	cbz	r0, 8007f20 <_printf_i+0x1e4>
 8007f1c:	1b80      	subs	r0, r0, r6
 8007f1e:	6060      	str	r0, [r4, #4]
 8007f20:	6863      	ldr	r3, [r4, #4]
 8007f22:	6123      	str	r3, [r4, #16]
 8007f24:	2300      	movs	r3, #0
 8007f26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f2a:	e7aa      	b.n	8007e82 <_printf_i+0x146>
 8007f2c:	6923      	ldr	r3, [r4, #16]
 8007f2e:	4632      	mov	r2, r6
 8007f30:	4649      	mov	r1, r9
 8007f32:	4640      	mov	r0, r8
 8007f34:	47d0      	blx	sl
 8007f36:	3001      	adds	r0, #1
 8007f38:	d0ad      	beq.n	8007e96 <_printf_i+0x15a>
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	079b      	lsls	r3, r3, #30
 8007f3e:	d413      	bmi.n	8007f68 <_printf_i+0x22c>
 8007f40:	68e0      	ldr	r0, [r4, #12]
 8007f42:	9b03      	ldr	r3, [sp, #12]
 8007f44:	4298      	cmp	r0, r3
 8007f46:	bfb8      	it	lt
 8007f48:	4618      	movlt	r0, r3
 8007f4a:	e7a6      	b.n	8007e9a <_printf_i+0x15e>
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	4632      	mov	r2, r6
 8007f50:	4649      	mov	r1, r9
 8007f52:	4640      	mov	r0, r8
 8007f54:	47d0      	blx	sl
 8007f56:	3001      	adds	r0, #1
 8007f58:	d09d      	beq.n	8007e96 <_printf_i+0x15a>
 8007f5a:	3501      	adds	r5, #1
 8007f5c:	68e3      	ldr	r3, [r4, #12]
 8007f5e:	9903      	ldr	r1, [sp, #12]
 8007f60:	1a5b      	subs	r3, r3, r1
 8007f62:	42ab      	cmp	r3, r5
 8007f64:	dcf2      	bgt.n	8007f4c <_printf_i+0x210>
 8007f66:	e7eb      	b.n	8007f40 <_printf_i+0x204>
 8007f68:	2500      	movs	r5, #0
 8007f6a:	f104 0619 	add.w	r6, r4, #25
 8007f6e:	e7f5      	b.n	8007f5c <_printf_i+0x220>
 8007f70:	0800867d 	.word	0x0800867d
 8007f74:	0800868e 	.word	0x0800868e

08007f78 <memmove>:
 8007f78:	4288      	cmp	r0, r1
 8007f7a:	b510      	push	{r4, lr}
 8007f7c:	eb01 0402 	add.w	r4, r1, r2
 8007f80:	d902      	bls.n	8007f88 <memmove+0x10>
 8007f82:	4284      	cmp	r4, r0
 8007f84:	4623      	mov	r3, r4
 8007f86:	d807      	bhi.n	8007f98 <memmove+0x20>
 8007f88:	1e43      	subs	r3, r0, #1
 8007f8a:	42a1      	cmp	r1, r4
 8007f8c:	d008      	beq.n	8007fa0 <memmove+0x28>
 8007f8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f96:	e7f8      	b.n	8007f8a <memmove+0x12>
 8007f98:	4402      	add	r2, r0
 8007f9a:	4601      	mov	r1, r0
 8007f9c:	428a      	cmp	r2, r1
 8007f9e:	d100      	bne.n	8007fa2 <memmove+0x2a>
 8007fa0:	bd10      	pop	{r4, pc}
 8007fa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007faa:	e7f7      	b.n	8007f9c <memmove+0x24>

08007fac <_sbrk_r>:
 8007fac:	b538      	push	{r3, r4, r5, lr}
 8007fae:	2300      	movs	r3, #0
 8007fb0:	4d05      	ldr	r5, [pc, #20]	@ (8007fc8 <_sbrk_r+0x1c>)
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	4608      	mov	r0, r1
 8007fb6:	602b      	str	r3, [r5, #0]
 8007fb8:	f7f9 f836 	bl	8001028 <_sbrk>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	d102      	bne.n	8007fc6 <_sbrk_r+0x1a>
 8007fc0:	682b      	ldr	r3, [r5, #0]
 8007fc2:	b103      	cbz	r3, 8007fc6 <_sbrk_r+0x1a>
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	200003a4 	.word	0x200003a4

08007fcc <memchr>:
 8007fcc:	b2c9      	uxtb	r1, r1
 8007fce:	4603      	mov	r3, r0
 8007fd0:	4402      	add	r2, r0
 8007fd2:	b510      	push	{r4, lr}
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	d101      	bne.n	8007fde <memchr+0x12>
 8007fda:	2000      	movs	r0, #0
 8007fdc:	e003      	b.n	8007fe6 <memchr+0x1a>
 8007fde:	7804      	ldrb	r4, [r0, #0]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	428c      	cmp	r4, r1
 8007fe4:	d1f6      	bne.n	8007fd4 <memchr+0x8>
 8007fe6:	bd10      	pop	{r4, pc}

08007fe8 <memcpy>:
 8007fe8:	440a      	add	r2, r1
 8007fea:	1e43      	subs	r3, r0, #1
 8007fec:	4291      	cmp	r1, r2
 8007fee:	d100      	bne.n	8007ff2 <memcpy+0xa>
 8007ff0:	4770      	bx	lr
 8007ff2:	b510      	push	{r4, lr}
 8007ff4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ff8:	4291      	cmp	r1, r2
 8007ffa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ffe:	d1f9      	bne.n	8007ff4 <memcpy+0xc>
 8008000:	bd10      	pop	{r4, pc}

08008002 <_realloc_r>:
 8008002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008006:	4607      	mov	r7, r0
 8008008:	4614      	mov	r4, r2
 800800a:	460d      	mov	r5, r1
 800800c:	b921      	cbnz	r1, 8008018 <_realloc_r+0x16>
 800800e:	4611      	mov	r1, r2
 8008010:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008014:	f7ff bc3c 	b.w	8007890 <_malloc_r>
 8008018:	b92a      	cbnz	r2, 8008026 <_realloc_r+0x24>
 800801a:	4625      	mov	r5, r4
 800801c:	f7ff fbcc 	bl	80077b8 <_free_r>
 8008020:	4628      	mov	r0, r5
 8008022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008026:	f000 f81a 	bl	800805e <_malloc_usable_size_r>
 800802a:	4284      	cmp	r4, r0
 800802c:	4606      	mov	r6, r0
 800802e:	d802      	bhi.n	8008036 <_realloc_r+0x34>
 8008030:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008034:	d8f4      	bhi.n	8008020 <_realloc_r+0x1e>
 8008036:	4621      	mov	r1, r4
 8008038:	4638      	mov	r0, r7
 800803a:	f7ff fc29 	bl	8007890 <_malloc_r>
 800803e:	4680      	mov	r8, r0
 8008040:	b908      	cbnz	r0, 8008046 <_realloc_r+0x44>
 8008042:	4645      	mov	r5, r8
 8008044:	e7ec      	b.n	8008020 <_realloc_r+0x1e>
 8008046:	42b4      	cmp	r4, r6
 8008048:	4622      	mov	r2, r4
 800804a:	4629      	mov	r1, r5
 800804c:	bf28      	it	cs
 800804e:	4632      	movcs	r2, r6
 8008050:	f7ff ffca 	bl	8007fe8 <memcpy>
 8008054:	4629      	mov	r1, r5
 8008056:	4638      	mov	r0, r7
 8008058:	f7ff fbae 	bl	80077b8 <_free_r>
 800805c:	e7f1      	b.n	8008042 <_realloc_r+0x40>

0800805e <_malloc_usable_size_r>:
 800805e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008062:	1f18      	subs	r0, r3, #4
 8008064:	2b00      	cmp	r3, #0
 8008066:	bfbc      	itt	lt
 8008068:	580b      	ldrlt	r3, [r1, r0]
 800806a:	18c0      	addlt	r0, r0, r3
 800806c:	4770      	bx	lr
	...

08008070 <_init>:
 8008070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008072:	bf00      	nop
 8008074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008076:	bc08      	pop	{r3}
 8008078:	469e      	mov	lr, r3
 800807a:	4770      	bx	lr

0800807c <_fini>:
 800807c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800807e:	bf00      	nop
 8008080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008082:	bc08      	pop	{r3}
 8008084:	469e      	mov	lr, r3
 8008086:	4770      	bx	lr
