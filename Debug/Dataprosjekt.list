
Dataprosjekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000873c  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000357  08008974  08008974  00009974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008ccc  08008ccc  00009ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008cd4  08008cd4  00009cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008cd8  08008cd8  00009cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000074  20000000  08008cdc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000368  20000074  08008d50  0000a074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200003dc  08008d50  0000a3dc  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013a68  00000000  00000000  0000a0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002798  00000000  00000000  0001db12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ec0  00000000  00000000  000202b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b57  00000000  00000000  00021170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000033cd  00000000  00000000  00021cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012e6a  00000000  00000000  00025094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001200ed  00000000  00000000  00037efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00157feb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000041e8  00000000  00000000  00158030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  0015c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000074 	.word	0x20000074
 8000254:	00000000 	.word	0x00000000
 8000258:	0800895c 	.word	0x0800895c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000078 	.word	0x20000078
 8000274:	0800895c 	.word	0x0800895c

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000298:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800029c:	f000 b9b0 	b.w	8000600 <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002bc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002be:	4688      	mov	r8, r1
 80002c0:	4604      	mov	r4, r0
 80002c2:	468e      	mov	lr, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14a      	bne.n	800035e <__udivmoddi4+0xa6>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	4617      	mov	r7, r2
 80002cc:	d95f      	bls.n	800038e <__udivmoddi4+0xd6>
 80002ce:	fab2 f682 	clz	r6, r2
 80002d2:	b14e      	cbz	r6, 80002e8 <__udivmoddi4+0x30>
 80002d4:	f1c6 0320 	rsb	r3, r6, #32
 80002d8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002dc:	40b7      	lsls	r7, r6
 80002de:	40b4      	lsls	r4, r6
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002e8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002ec:	fa1f fc87 	uxth.w	ip, r7
 80002f0:	0c23      	lsrs	r3, r4, #16
 80002f2:	fbbe f1f8 	udiv	r1, lr, r8
 80002f6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002fa:	fb01 f20c 	mul.w	r2, r1, ip
 80002fe:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x5e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x5c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 8154 	bhi.w	80005bc <__udivmoddi4+0x304>
 8000314:	4601      	mov	r1, r0
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	b2a2      	uxth	r2, r4
 800031a:	fbb3 f0f8 	udiv	r0, r3, r8
 800031e:	fb08 3310 	mls	r3, r8, r0, r3
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800032a:	4594      	cmp	ip, r2
 800032c:	d90b      	bls.n	8000346 <__udivmoddi4+0x8e>
 800032e:	18ba      	adds	r2, r7, r2
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000334:	bf2c      	ite	cs
 8000336:	2401      	movcs	r4, #1
 8000338:	2400      	movcc	r4, #0
 800033a:	4594      	cmp	ip, r2
 800033c:	d902      	bls.n	8000344 <__udivmoddi4+0x8c>
 800033e:	2c00      	cmp	r4, #0
 8000340:	f000 813f 	beq.w	80005c2 <__udivmoddi4+0x30a>
 8000344:	4618      	mov	r0, r3
 8000346:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034a:	eba2 020c 	sub.w	r2, r2, ip
 800034e:	2100      	movs	r1, #0
 8000350:	b11d      	cbz	r5, 800035a <__udivmoddi4+0xa2>
 8000352:	40f2      	lsrs	r2, r6
 8000354:	2300      	movs	r3, #0
 8000356:	e9c5 2300 	strd	r2, r3, [r5]
 800035a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d905      	bls.n	800036e <__udivmoddi4+0xb6>
 8000362:	b10d      	cbz	r5, 8000368 <__udivmoddi4+0xb0>
 8000364:	e9c5 0100 	strd	r0, r1, [r5]
 8000368:	2100      	movs	r1, #0
 800036a:	4608      	mov	r0, r1
 800036c:	e7f5      	b.n	800035a <__udivmoddi4+0xa2>
 800036e:	fab3 f183 	clz	r1, r3
 8000372:	2900      	cmp	r1, #0
 8000374:	d14e      	bne.n	8000414 <__udivmoddi4+0x15c>
 8000376:	4543      	cmp	r3, r8
 8000378:	f0c0 8112 	bcc.w	80005a0 <__udivmoddi4+0x2e8>
 800037c:	4282      	cmp	r2, r0
 800037e:	f240 810f 	bls.w	80005a0 <__udivmoddi4+0x2e8>
 8000382:	4608      	mov	r0, r1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e8      	beq.n	800035a <__udivmoddi4+0xa2>
 8000388:	e9c5 4e00 	strd	r4, lr, [r5]
 800038c:	e7e5      	b.n	800035a <__udivmoddi4+0xa2>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f000 80ac 	beq.w	80004ec <__udivmoddi4+0x234>
 8000394:	fab2 f682 	clz	r6, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	f040 80bb 	bne.w	8000514 <__udivmoddi4+0x25c>
 800039e:	1a8b      	subs	r3, r1, r2
 80003a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003a4:	b2bc      	uxth	r4, r7
 80003a6:	2101      	movs	r1, #1
 80003a8:	0c02      	lsrs	r2, r0, #16
 80003aa:	b280      	uxth	r0, r0
 80003ac:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003b8:	fb04 f20c 	mul.w	r2, r4, ip
 80003bc:	429a      	cmp	r2, r3
 80003be:	d90e      	bls.n	80003de <__udivmoddi4+0x126>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c6:	bf2c      	ite	cs
 80003c8:	f04f 0901 	movcs.w	r9, #1
 80003cc:	f04f 0900 	movcc.w	r9, #0
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d903      	bls.n	80003dc <__udivmoddi4+0x124>
 80003d4:	f1b9 0f00 	cmp.w	r9, #0
 80003d8:	f000 80ec 	beq.w	80005b4 <__udivmoddi4+0x2fc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003e4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003e8:	fb04 f408 	mul.w	r4, r4, r8
 80003ec:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x154>
 80003f4:	18ba      	adds	r2, r7, r2
 80003f6:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80003fa:	bf2c      	ite	cs
 80003fc:	2001      	movcs	r0, #1
 80003fe:	2000      	movcc	r0, #0
 8000400:	4294      	cmp	r4, r2
 8000402:	d902      	bls.n	800040a <__udivmoddi4+0x152>
 8000404:	2800      	cmp	r0, #0
 8000406:	f000 80d1 	beq.w	80005ac <__udivmoddi4+0x2f4>
 800040a:	4698      	mov	r8, r3
 800040c:	1b12      	subs	r2, r2, r4
 800040e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000412:	e79d      	b.n	8000350 <__udivmoddi4+0x98>
 8000414:	f1c1 0620 	rsb	r6, r1, #32
 8000418:	408b      	lsls	r3, r1
 800041a:	fa08 f401 	lsl.w	r4, r8, r1
 800041e:	fa00 f901 	lsl.w	r9, r0, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa28 f806 	lsr.w	r8, r8, r6
 800042a:	408a      	lsls	r2, r1
 800042c:	431f      	orrs	r7, r3
 800042e:	fa20 f306 	lsr.w	r3, r0, r6
 8000432:	0c38      	lsrs	r0, r7, #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fa1f fc87 	uxth.w	ip, r7
 800043a:	0c1c      	lsrs	r4, r3, #16
 800043c:	fbb8 fef0 	udiv	lr, r8, r0
 8000440:	fb00 881e 	mls	r8, r0, lr, r8
 8000444:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000448:	fb0e f80c 	mul.w	r8, lr, ip
 800044c:	45a0      	cmp	r8, r4
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a0      	cmp	r8, r4
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b4>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 80b8 	beq.w	80005dc <__udivmoddi4+0x324>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba4 0408 	sub.w	r4, r4, r8
 8000472:	fa1f f883 	uxth.w	r8, r3
 8000476:	fbb4 f3f0 	udiv	r3, r4, r0
 800047a:	fb00 4413 	mls	r4, r0, r3, r4
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000486:	45a4      	cmp	ip, r4
 8000488:	d90e      	bls.n	80004a8 <__udivmoddi4+0x1f0>
 800048a:	193c      	adds	r4, r7, r4
 800048c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000490:	bf2c      	ite	cs
 8000492:	f04f 0801 	movcs.w	r8, #1
 8000496:	f04f 0800 	movcc.w	r8, #0
 800049a:	45a4      	cmp	ip, r4
 800049c:	d903      	bls.n	80004a6 <__udivmoddi4+0x1ee>
 800049e:	f1b8 0f00 	cmp.w	r8, #0
 80004a2:	f000 809f 	beq.w	80005e4 <__udivmoddi4+0x32c>
 80004a6:	4603      	mov	r3, r0
 80004a8:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004ac:	eba4 040c 	sub.w	r4, r4, ip
 80004b0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004b4:	4564      	cmp	r4, ip
 80004b6:	4673      	mov	r3, lr
 80004b8:	46e0      	mov	r8, ip
 80004ba:	d302      	bcc.n	80004c2 <__udivmoddi4+0x20a>
 80004bc:	d107      	bne.n	80004ce <__udivmoddi4+0x216>
 80004be:	45f1      	cmp	r9, lr
 80004c0:	d205      	bcs.n	80004ce <__udivmoddi4+0x216>
 80004c2:	ebbe 0302 	subs.w	r3, lr, r2
 80004c6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	46e0      	mov	r8, ip
 80004ce:	b15d      	cbz	r5, 80004e8 <__udivmoddi4+0x230>
 80004d0:	ebb9 0203 	subs.w	r2, r9, r3
 80004d4:	eb64 0408 	sbc.w	r4, r4, r8
 80004d8:	fa04 f606 	lsl.w	r6, r4, r6
 80004dc:	fa22 f301 	lsr.w	r3, r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	431e      	orrs	r6, r3
 80004e4:	e9c5 6400 	strd	r6, r4, [r5]
 80004e8:	2100      	movs	r1, #0
 80004ea:	e736      	b.n	800035a <__udivmoddi4+0xa2>
 80004ec:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f0:	0c01      	lsrs	r1, r0, #16
 80004f2:	4614      	mov	r4, r2
 80004f4:	b280      	uxth	r0, r0
 80004f6:	4696      	mov	lr, r2
 80004f8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004fc:	2620      	movs	r6, #32
 80004fe:	4690      	mov	r8, r2
 8000500:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000504:	4610      	mov	r0, r2
 8000506:	fbb1 f1f2 	udiv	r1, r1, r2
 800050a:	eba3 0308 	sub.w	r3, r3, r8
 800050e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000512:	e74b      	b.n	80003ac <__udivmoddi4+0xf4>
 8000514:	40b7      	lsls	r7, r6
 8000516:	f1c6 0320 	rsb	r3, r6, #32
 800051a:	fa01 f206 	lsl.w	r2, r1, r6
 800051e:	fa21 f803 	lsr.w	r8, r1, r3
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	fa20 f303 	lsr.w	r3, r0, r3
 800052a:	b2bc      	uxth	r4, r7
 800052c:	40b0      	lsls	r0, r6
 800052e:	4313      	orrs	r3, r2
 8000530:	0c02      	lsrs	r2, r0, #16
 8000532:	0c19      	lsrs	r1, r3, #16
 8000534:	b280      	uxth	r0, r0
 8000536:	fbb8 f9fe 	udiv	r9, r8, lr
 800053a:	fb0e 8819 	mls	r8, lr, r9, r8
 800053e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	4588      	cmp	r8, r1
 8000548:	d951      	bls.n	80005ee <__udivmoddi4+0x336>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 8000550:	bf2c      	ite	cs
 8000552:	f04f 0a01 	movcs.w	sl, #1
 8000556:	f04f 0a00 	movcc.w	sl, #0
 800055a:	4588      	cmp	r8, r1
 800055c:	d902      	bls.n	8000564 <__udivmoddi4+0x2ac>
 800055e:	f1ba 0f00 	cmp.w	sl, #0
 8000562:	d031      	beq.n	80005c8 <__udivmoddi4+0x310>
 8000564:	eba1 0108 	sub.w	r1, r1, r8
 8000568:	fbb1 f9fe 	udiv	r9, r1, lr
 800056c:	fb09 f804 	mul.w	r8, r9, r4
 8000570:	fb0e 1119 	mls	r1, lr, r9, r1
 8000574:	b29b      	uxth	r3, r3
 8000576:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800057a:	4543      	cmp	r3, r8
 800057c:	d235      	bcs.n	80005ea <__udivmoddi4+0x332>
 800057e:	18fb      	adds	r3, r7, r3
 8000580:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000584:	bf2c      	ite	cs
 8000586:	f04f 0a01 	movcs.w	sl, #1
 800058a:	f04f 0a00 	movcc.w	sl, #0
 800058e:	4543      	cmp	r3, r8
 8000590:	d2bb      	bcs.n	800050a <__udivmoddi4+0x252>
 8000592:	f1ba 0f00 	cmp.w	sl, #0
 8000596:	d1b8      	bne.n	800050a <__udivmoddi4+0x252>
 8000598:	f1a9 0102 	sub.w	r1, r9, #2
 800059c:	443b      	add	r3, r7
 800059e:	e7b4      	b.n	800050a <__udivmoddi4+0x252>
 80005a0:	1a84      	subs	r4, r0, r2
 80005a2:	eb68 0203 	sbc.w	r2, r8, r3
 80005a6:	2001      	movs	r0, #1
 80005a8:	4696      	mov	lr, r2
 80005aa:	e6eb      	b.n	8000384 <__udivmoddi4+0xcc>
 80005ac:	443a      	add	r2, r7
 80005ae:	f1a8 0802 	sub.w	r8, r8, #2
 80005b2:	e72b      	b.n	800040c <__udivmoddi4+0x154>
 80005b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b8:	443b      	add	r3, r7
 80005ba:	e710      	b.n	80003de <__udivmoddi4+0x126>
 80005bc:	3902      	subs	r1, #2
 80005be:	443b      	add	r3, r7
 80005c0:	e6a9      	b.n	8000316 <__udivmoddi4+0x5e>
 80005c2:	443a      	add	r2, r7
 80005c4:	3802      	subs	r0, #2
 80005c6:	e6be      	b.n	8000346 <__udivmoddi4+0x8e>
 80005c8:	eba7 0808 	sub.w	r8, r7, r8
 80005cc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005d0:	4441      	add	r1, r8
 80005d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d6:	fb09 f804 	mul.w	r8, r9, r4
 80005da:	e7c9      	b.n	8000570 <__udivmoddi4+0x2b8>
 80005dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005e0:	443c      	add	r4, r7
 80005e2:	e744      	b.n	800046e <__udivmoddi4+0x1b6>
 80005e4:	3b02      	subs	r3, #2
 80005e6:	443c      	add	r4, r7
 80005e8:	e75e      	b.n	80004a8 <__udivmoddi4+0x1f0>
 80005ea:	4649      	mov	r1, r9
 80005ec:	e78d      	b.n	800050a <__udivmoddi4+0x252>
 80005ee:	eba1 0108 	sub.w	r1, r1, r8
 80005f2:	46cc      	mov	ip, r9
 80005f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f8:	fb09 f804 	mul.w	r8, r9, r4
 80005fc:	e7b8      	b.n	8000570 <__udivmoddi4+0x2b8>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <Game_Init>:
// External UART function
extern void UART_Printf(const char* format, ...);

// Initialize game
void Game_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
    pos.x = 0;
 8000608:	4b1c      	ldr	r3, [pc, #112]	@ (800067c <Game_Init+0x78>)
 800060a:	f04f 0200 	mov.w	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
    pos.y = 0;
 8000610:	4b1a      	ldr	r3, [pc, #104]	@ (800067c <Game_Init+0x78>)
 8000612:	f04f 0200 	mov.w	r2, #0
 8000616:	605a      	str	r2, [r3, #4]
    pos.z = 0;
 8000618:	4b18      	ldr	r3, [pc, #96]	@ (800067c <Game_Init+0x78>)
 800061a:	f04f 0200 	mov.w	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
    moving_forward = 1;
 8000620:	4b17      	ldr	r3, [pc, #92]	@ (8000680 <Game_Init+0x7c>)
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
    frame_count = 0;
 8000626:	4b17      	ldr	r3, [pc, #92]	@ (8000684 <Game_Init+0x80>)
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
    last_update = HAL_GetTick();
 800062c:	f001 f932 	bl	8001894 <HAL_GetTick>
 8000630:	4603      	mov	r3, r0
 8000632:	4a15      	ldr	r2, [pc, #84]	@ (8000688 <Game_Init+0x84>)
 8000634:	6013      	str	r3, [r2, #0]

    UART_Printf("\r\n=================================\r\n");
 8000636:	4815      	ldr	r0, [pc, #84]	@ (800068c <Game_Init+0x88>)
 8000638:	f000 faf8 	bl	8000c2c <UART_Printf>
    UART_Printf("SIMPLE POSITION TRACKER\r\n");
 800063c:	4814      	ldr	r0, [pc, #80]	@ (8000690 <Game_Init+0x8c>)
 800063e:	f000 faf5 	bl	8000c2c <UART_Printf>
    UART_Printf("=================================\r\n");
 8000642:	4814      	ldr	r0, [pc, #80]	@ (8000694 <Game_Init+0x90>)
 8000644:	f000 faf2 	bl	8000c2c <UART_Printf>
    UART_Printf("Controls:\r\n");
 8000648:	4813      	ldr	r0, [pc, #76]	@ (8000698 <Game_Init+0x94>)
 800064a:	f000 faef 	bl	8000c2c <UART_Printf>
    UART_Printf("  Button: 1 click = LEFT\r\n");
 800064e:	4813      	ldr	r0, [pc, #76]	@ (800069c <Game_Init+0x98>)
 8000650:	f000 faec 	bl	8000c2c <UART_Printf>
    UART_Printf("         2 clicks = RIGHT\r\n");
 8000654:	4812      	ldr	r0, [pc, #72]	@ (80006a0 <Game_Init+0x9c>)
 8000656:	f000 fae9 	bl	8000c2c <UART_Printf>
    UART_Printf("         Hold = STOP/START\r\n");
 800065a:	4812      	ldr	r0, [pc, #72]	@ (80006a4 <Game_Init+0xa0>)
 800065c:	f000 fae6 	bl	8000c2c <UART_Printf>
    UART_Printf("  Keys: A/D = left/right\r\n");
 8000660:	4811      	ldr	r0, [pc, #68]	@ (80006a8 <Game_Init+0xa4>)
 8000662:	f000 fae3 	bl	8000c2c <UART_Printf>
    UART_Printf("        S = stop, W = go\r\n");
 8000666:	4811      	ldr	r0, [pc, #68]	@ (80006ac <Game_Init+0xa8>)
 8000668:	f000 fae0 	bl	8000c2c <UART_Printf>
    UART_Printf("        R = reset\r\n");
 800066c:	4810      	ldr	r0, [pc, #64]	@ (80006b0 <Game_Init+0xac>)
 800066e:	f000 fadd 	bl	8000c2c <UART_Printf>
    UART_Printf("\r\nStarting...\r\n\r\n");
 8000672:	4810      	ldr	r0, [pc, #64]	@ (80006b4 <Game_Init+0xb0>)
 8000674:	f000 fada 	bl	8000c2c <UART_Printf>
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000090 	.word	0x20000090
 8000680:	20000000 	.word	0x20000000
 8000684:	200000ac 	.word	0x200000ac
 8000688:	200000b0 	.word	0x200000b0
 800068c:	08008974 	.word	0x08008974
 8000690:	0800899c 	.word	0x0800899c
 8000694:	080089b8 	.word	0x080089b8
 8000698:	080089dc 	.word	0x080089dc
 800069c:	080089e8 	.word	0x080089e8
 80006a0:	08008a04 	.word	0x08008a04
 80006a4:	08008a20 	.word	0x08008a20
 80006a8:	08008a40 	.word	0x08008a40
 80006ac:	08008a5c 	.word	0x08008a5c
 80006b0:	08008a78 	.word	0x08008a78
 80006b4:	08008a8c 	.word	0x08008a8c

080006b8 <Game_Update>:

// Main game update
void Game_Update(uint32_t current_time)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af02      	add	r7, sp, #8
 80006be:	6078      	str	r0, [r7, #4]
    // Check if it's time for position update
    if(current_time - last_update >= UPDATE_INTERVAL)
 80006c0:	4b30      	ldr	r3, [pc, #192]	@ (8000784 <Game_Update+0xcc>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	1ad3      	subs	r3, r2, r3
 80006c8:	f240 52db 	movw	r2, #1499	@ 0x5db
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d954      	bls.n	800077a <Game_Update+0xc2>
    {
        last_update = current_time;
 80006d0:	4a2c      	ldr	r2, [pc, #176]	@ (8000784 <Game_Update+0xcc>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6013      	str	r3, [r2, #0]
        frame_count++;
 80006d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <Game_Update+0xd0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3301      	adds	r3, #1
 80006dc:	4a2a      	ldr	r2, [pc, #168]	@ (8000788 <Game_Update+0xd0>)
 80006de:	6013      	str	r3, [r2, #0]

        // Move forward if enabled
        if(moving_forward)
 80006e0:	4b2a      	ldr	r3, [pc, #168]	@ (800078c <Game_Update+0xd4>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d009      	beq.n	80006fc <Game_Update+0x44>
        {
            pos.z += FORWARD_SPEED * (UPDATE_INTERVAL / 1000.0f);
 80006e8:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <Game_Update+0xd8>)
 80006ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80006ee:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80006f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006f6:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <Game_Update+0xd8>)
 80006f8:	edc3 7a02 	vstr	s15, [r3, #8]
        }

        // Keep X in bounds
        if(pos.x < WORLD_MIN_X) pos.x = WORLD_MIN_X;
 80006fc:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <Game_Update+0xd8>)
 80006fe:	edd3 7a00 	vldr	s15, [r3]
 8000702:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8000794 <Game_Update+0xdc>
 8000706:	eef4 7ac7 	vcmpe.f32	s15, s14
 800070a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800070e:	d502      	bpl.n	8000716 <Game_Update+0x5e>
 8000710:	4b1f      	ldr	r3, [pc, #124]	@ (8000790 <Game_Update+0xd8>)
 8000712:	4a21      	ldr	r2, [pc, #132]	@ (8000798 <Game_Update+0xe0>)
 8000714:	601a      	str	r2, [r3, #0]
        if(pos.x > WORLD_MAX_X) pos.x = WORLD_MAX_X;
 8000716:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <Game_Update+0xd8>)
 8000718:	edd3 7a00 	vldr	s15, [r3]
 800071c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800079c <Game_Update+0xe4>
 8000720:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000728:	dd02      	ble.n	8000730 <Game_Update+0x78>
 800072a:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <Game_Update+0xd8>)
 800072c:	4a1c      	ldr	r2, [pc, #112]	@ (80007a0 <Game_Update+0xe8>)
 800072e:	601a      	str	r2, [r3, #0]

        // Print position - USE INTEGER FORMAT!
        UART_Printf("\r\n[%lu] POS: X=%d, Y=%d, Z=%d %s\r\n",
 8000730:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <Game_Update+0xd0>)
 8000732:	6819      	ldr	r1, [r3, #0]
                   frame_count,
                   (int)pos.x,    // Cast to int for printing
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <Game_Update+0xd8>)
 8000736:	edd3 7a00 	vldr	s15, [r3]
        UART_Printf("\r\n[%lu] POS: X=%d, Y=%d, Z=%d %s\r\n",
 800073a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
                   (int)pos.y,
 800073e:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <Game_Update+0xd8>)
 8000740:	edd3 7a01 	vldr	s15, [r3, #4]
        UART_Printf("\r\n[%lu] POS: X=%d, Y=%d, Z=%d %s\r\n",
 8000744:	eefd 6ae7 	vcvt.s32.f32	s13, s15
                   (int)pos.z,
 8000748:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <Game_Update+0xd8>)
 800074a:	edd3 7a02 	vldr	s15, [r3, #8]
        UART_Printf("\r\n[%lu] POS: X=%d, Y=%d, Z=%d %s\r\n",
 800074e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000752:	ee17 2a90 	vmov	r2, s15
                   moving_forward ? "" : "(STOPPED)");
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <Game_Update+0xd4>)
 8000758:	781b      	ldrb	r3, [r3, #0]
        UART_Printf("\r\n[%lu] POS: X=%d, Y=%d, Z=%d %s\r\n",
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <Game_Update+0xaa>
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <Game_Update+0xec>)
 8000760:	e000      	b.n	8000764 <Game_Update+0xac>
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <Game_Update+0xf0>)
 8000764:	9301      	str	r3, [sp, #4]
 8000766:	9200      	str	r2, [sp, #0]
 8000768:	ee16 3a90 	vmov	r3, s13
 800076c:	ee17 2a10 	vmov	r2, s14
 8000770:	480e      	ldr	r0, [pc, #56]	@ (80007ac <Game_Update+0xf4>)
 8000772:	f000 fa5b 	bl	8000c2c <UART_Printf>

        // Send to FPGA
        Game_SendPositionToFPGA();
 8000776:	f000 f99b 	bl	8000ab0 <Game_SendPositionToFPGA>
    }
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200000b0 	.word	0x200000b0
 8000788:	200000ac 	.word	0x200000ac
 800078c:	20000000 	.word	0x20000000
 8000790:	20000090 	.word	0x20000090
 8000794:	c2c80000 	.word	0xc2c80000
 8000798:	c2c80000 	.word	0xc2c80000
 800079c:	42c80000 	.word	0x42c80000
 80007a0:	42c80000 	.word	0x42c80000
 80007a4:	08008aa0 	.word	0x08008aa0
 80007a8:	08008aa4 	.word	0x08008aa4
 80007ac:	08008ab0 	.word	0x08008ab0

080007b0 <Game_HandleButton>:

// Handle button input
void Game_HandleButton(uint8_t button_state, uint32_t current_time)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	6039      	str	r1, [r7, #0]
 80007ba:	71fb      	strb	r3, [r7, #7]
    // Detect press
    if(button_state && !btn.pressed)
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d00c      	beq.n	80007dc <Game_HandleButton+0x2c>
 80007c2:	4b48      	ldr	r3, [pc, #288]	@ (80008e4 <Game_HandleButton+0x134>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d108      	bne.n	80007dc <Game_HandleButton+0x2c>
    {
        btn.pressed = 1;
 80007ca:	4b46      	ldr	r3, [pc, #280]	@ (80008e4 <Game_HandleButton+0x134>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
        btn.press_time = current_time;
 80007d0:	4a44      	ldr	r2, [pc, #272]	@ (80008e4 <Game_HandleButton+0x134>)
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	6053      	str	r3, [r2, #4]
        BSP_LED_On(LED_GREEN);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f000 fdd4 	bl	8001384 <BSP_LED_On>
    }

    // Detect release
    if(!button_state && btn.pressed)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d17b      	bne.n	80008da <Game_HandleButton+0x12a>
 80007e2:	4b40      	ldr	r3, [pc, #256]	@ (80008e4 <Game_HandleButton+0x134>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d077      	beq.n	80008da <Game_HandleButton+0x12a>
    {
        btn.pressed = 0;
 80007ea:	4b3e      	ldr	r3, [pc, #248]	@ (80008e4 <Game_HandleButton+0x134>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
        btn.release_time = current_time;
 80007f0:	4a3c      	ldr	r2, [pc, #240]	@ (80008e4 <Game_HandleButton+0x134>)
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	6093      	str	r3, [r2, #8]
        uint32_t duration = btn.release_time - btn.press_time;
 80007f6:	4b3b      	ldr	r3, [pc, #236]	@ (80008e4 <Game_HandleButton+0x134>)
 80007f8:	689a      	ldr	r2, [r3, #8]
 80007fa:	4b3a      	ldr	r3, [pc, #232]	@ (80008e4 <Game_HandleButton+0x134>)
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	1ad3      	subs	r3, r2, r3
 8000800:	60fb      	str	r3, [r7, #12]
        BSP_LED_Off(LED_GREEN);
 8000802:	2000      	movs	r0, #0
 8000804:	f000 fddc 	bl	80013c0 <BSP_LED_Off>

        if(duration > 1000)
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800080e:	d915      	bls.n	800083c <Game_HandleButton+0x8c>
        {
            // Long press = toggle movement
            moving_forward = !moving_forward;
 8000810:	4b35      	ldr	r3, [pc, #212]	@ (80008e8 <Game_HandleButton+0x138>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf0c      	ite	eq
 8000818:	2301      	moveq	r3, #1
 800081a:	2300      	movne	r3, #0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	461a      	mov	r2, r3
 8000820:	4b31      	ldr	r3, [pc, #196]	@ (80008e8 <Game_HandleButton+0x138>)
 8000822:	701a      	strb	r2, [r3, #0]
            UART_Printf("[BUTTON] %s\r\n", moving_forward ? "START" : "STOP");
 8000824:	4b30      	ldr	r3, [pc, #192]	@ (80008e8 <Game_HandleButton+0x138>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <Game_HandleButton+0x80>
 800082c:	4b2f      	ldr	r3, [pc, #188]	@ (80008ec <Game_HandleButton+0x13c>)
 800082e:	e000      	b.n	8000832 <Game_HandleButton+0x82>
 8000830:	4b2f      	ldr	r3, [pc, #188]	@ (80008f0 <Game_HandleButton+0x140>)
 8000832:	4619      	mov	r1, r3
 8000834:	482f      	ldr	r0, [pc, #188]	@ (80008f4 <Game_HandleButton+0x144>)
 8000836:	f000 f9f9 	bl	8000c2c <UART_Printf>
            }

            btn.press_count = 0;
        }
    }
}
 800083a:	e04e      	b.n	80008da <Game_HandleButton+0x12a>
            btn.press_count++;
 800083c:	4b29      	ldr	r3, [pc, #164]	@ (80008e4 <Game_HandleButton+0x134>)
 800083e:	7b1b      	ldrb	r3, [r3, #12]
 8000840:	3301      	adds	r3, #1
 8000842:	b2da      	uxtb	r2, r3
 8000844:	4b27      	ldr	r3, [pc, #156]	@ (80008e4 <Game_HandleButton+0x134>)
 8000846:	731a      	strb	r2, [r3, #12]
            uint32_t wait_start = HAL_GetTick();
 8000848:	f001 f824 	bl	8001894 <HAL_GetTick>
 800084c:	60b8      	str	r0, [r7, #8]
            while(HAL_GetTick() - wait_start < 500)
 800084e:	e00c      	b.n	800086a <Game_HandleButton+0xba>
                if(BSP_PB_GetState(BUTTON_USER))
 8000850:	2000      	movs	r0, #0
 8000852:	f000 fe69 	bl	8001528 <BSP_PB_GetState>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d003      	beq.n	8000864 <Game_HandleButton+0xb4>
                    btn.press_count = 2;
 800085c:	4b21      	ldr	r3, [pc, #132]	@ (80008e4 <Game_HandleButton+0x134>)
 800085e:	2202      	movs	r2, #2
 8000860:	731a      	strb	r2, [r3, #12]
                    break;
 8000862:	e00a      	b.n	800087a <Game_HandleButton+0xca>
                HAL_Delay(10);
 8000864:	200a      	movs	r0, #10
 8000866:	f001 f821 	bl	80018ac <HAL_Delay>
            while(HAL_GetTick() - wait_start < 500)
 800086a:	f001 f813 	bl	8001894 <HAL_GetTick>
 800086e:	4602      	mov	r2, r0
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000878:	d3ea      	bcc.n	8000850 <Game_HandleButton+0xa0>
            if(btn.press_count == 2)
 800087a:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <Game_HandleButton+0x134>)
 800087c:	7b1b      	ldrb	r3, [r3, #12]
 800087e:	2b02      	cmp	r3, #2
 8000880:	d114      	bne.n	80008ac <Game_HandleButton+0xfc>
                pos.x += STRAFE_SPEED;
 8000882:	4b1d      	ldr	r3, [pc, #116]	@ (80008f8 <Game_HandleButton+0x148>)
 8000884:	edd3 7a00 	vldr	s15, [r3]
 8000888:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800088c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000890:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <Game_HandleButton+0x148>)
 8000892:	edc3 7a00 	vstr	s15, [r3]
                UART_Printf("[BUTTON] RIGHT -> X=%d\r\n", (int)pos.x);  // USE INT!
 8000896:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <Game_HandleButton+0x148>)
 8000898:	edd3 7a00 	vldr	s15, [r3]
 800089c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008a0:	ee17 1a90 	vmov	r1, s15
 80008a4:	4815      	ldr	r0, [pc, #84]	@ (80008fc <Game_HandleButton+0x14c>)
 80008a6:	f000 f9c1 	bl	8000c2c <UART_Printf>
 80008aa:	e013      	b.n	80008d4 <Game_HandleButton+0x124>
                pos.x -= STRAFE_SPEED;
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <Game_HandleButton+0x148>)
 80008ae:	edd3 7a00 	vldr	s15, [r3]
 80008b2:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80008b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <Game_HandleButton+0x148>)
 80008bc:	edc3 7a00 	vstr	s15, [r3]
                UART_Printf("[BUTTON] LEFT -> X=%d\r\n", (int)pos.x);   // USE INT!
 80008c0:	4b0d      	ldr	r3, [pc, #52]	@ (80008f8 <Game_HandleButton+0x148>)
 80008c2:	edd3 7a00 	vldr	s15, [r3]
 80008c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008ca:	ee17 1a90 	vmov	r1, s15
 80008ce:	480c      	ldr	r0, [pc, #48]	@ (8000900 <Game_HandleButton+0x150>)
 80008d0:	f000 f9ac 	bl	8000c2c <UART_Printf>
            btn.press_count = 0;
 80008d4:	4b03      	ldr	r3, [pc, #12]	@ (80008e4 <Game_HandleButton+0x134>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	731a      	strb	r2, [r3, #12]
}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2000009c 	.word	0x2000009c
 80008e8:	20000000 	.word	0x20000000
 80008ec:	08008ad4 	.word	0x08008ad4
 80008f0:	08008adc 	.word	0x08008adc
 80008f4:	08008ae4 	.word	0x08008ae4
 80008f8:	20000090 	.word	0x20000090
 80008fc:	08008af4 	.word	0x08008af4
 8000900:	08008b10 	.word	0x08008b10

08000904 <Game_HandleKeyboard>:

// Handle keyboard input
void Game_HandleKeyboard(uint8_t key)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
    switch(key)
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	3b41      	subs	r3, #65	@ 0x41
 8000912:	2b36      	cmp	r3, #54	@ 0x36
 8000914:	f200 80ba 	bhi.w	8000a8c <Game_HandleKeyboard+0x188>
 8000918:	a201      	add	r2, pc, #4	@ (adr r2, 8000920 <Game_HandleKeyboard+0x1c>)
 800091a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800091e:	bf00      	nop
 8000920:	080009fd 	.word	0x080009fd
 8000924:	08000a8d 	.word	0x08000a8d
 8000928:	08000a8d 	.word	0x08000a8d
 800092c:	08000a27 	.word	0x08000a27
 8000930:	08000a8d 	.word	0x08000a8d
 8000934:	08000a8d 	.word	0x08000a8d
 8000938:	08000a8d 	.word	0x08000a8d
 800093c:	08000a8d 	.word	0x08000a8d
 8000940:	08000a8d 	.word	0x08000a8d
 8000944:	08000a8d 	.word	0x08000a8d
 8000948:	08000a8d 	.word	0x08000a8d
 800094c:	08000a8d 	.word	0x08000a8d
 8000950:	08000a8d 	.word	0x08000a8d
 8000954:	08000a8d 	.word	0x08000a8d
 8000958:	08000a8d 	.word	0x08000a8d
 800095c:	08000a8d 	.word	0x08000a8d
 8000960:	08000a8d 	.word	0x08000a8d
 8000964:	08000a6d 	.word	0x08000a6d
 8000968:	08000a51 	.word	0x08000a51
 800096c:	08000a8d 	.word	0x08000a8d
 8000970:	08000a8d 	.word	0x08000a8d
 8000974:	08000a8d 	.word	0x08000a8d
 8000978:	08000a5f 	.word	0x08000a5f
 800097c:	08000a8d 	.word	0x08000a8d
 8000980:	08000a8d 	.word	0x08000a8d
 8000984:	08000a8d 	.word	0x08000a8d
 8000988:	08000a8d 	.word	0x08000a8d
 800098c:	08000a8d 	.word	0x08000a8d
 8000990:	08000a8d 	.word	0x08000a8d
 8000994:	08000a8d 	.word	0x08000a8d
 8000998:	08000a8d 	.word	0x08000a8d
 800099c:	08000a8d 	.word	0x08000a8d
 80009a0:	080009fd 	.word	0x080009fd
 80009a4:	08000a8d 	.word	0x08000a8d
 80009a8:	08000a8d 	.word	0x08000a8d
 80009ac:	08000a27 	.word	0x08000a27
 80009b0:	08000a8d 	.word	0x08000a8d
 80009b4:	08000a8d 	.word	0x08000a8d
 80009b8:	08000a8d 	.word	0x08000a8d
 80009bc:	08000a8d 	.word	0x08000a8d
 80009c0:	08000a8d 	.word	0x08000a8d
 80009c4:	08000a8d 	.word	0x08000a8d
 80009c8:	08000a8d 	.word	0x08000a8d
 80009cc:	08000a8d 	.word	0x08000a8d
 80009d0:	08000a8d 	.word	0x08000a8d
 80009d4:	08000a8d 	.word	0x08000a8d
 80009d8:	08000a8d 	.word	0x08000a8d
 80009dc:	08000a8d 	.word	0x08000a8d
 80009e0:	08000a8d 	.word	0x08000a8d
 80009e4:	08000a6d 	.word	0x08000a6d
 80009e8:	08000a51 	.word	0x08000a51
 80009ec:	08000a8d 	.word	0x08000a8d
 80009f0:	08000a8d 	.word	0x08000a8d
 80009f4:	08000a8d 	.word	0x08000a8d
 80009f8:	08000a5f 	.word	0x08000a5f
    {
        case 'a':
        case 'A':
            pos.x -= STRAFE_SPEED;
 80009fc:	4b25      	ldr	r3, [pc, #148]	@ (8000a94 <Game_HandleKeyboard+0x190>)
 80009fe:	edd3 7a00 	vldr	s15, [r3]
 8000a02:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000a06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a0a:	4b22      	ldr	r3, [pc, #136]	@ (8000a94 <Game_HandleKeyboard+0x190>)
 8000a0c:	edc3 7a00 	vstr	s15, [r3]
            UART_Printf("[KEY] LEFT -> X=%d\r\n", (int)pos.x);  // USE INT!
 8000a10:	4b20      	ldr	r3, [pc, #128]	@ (8000a94 <Game_HandleKeyboard+0x190>)
 8000a12:	edd3 7a00 	vldr	s15, [r3]
 8000a16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a1a:	ee17 1a90 	vmov	r1, s15
 8000a1e:	481e      	ldr	r0, [pc, #120]	@ (8000a98 <Game_HandleKeyboard+0x194>)
 8000a20:	f000 f904 	bl	8000c2c <UART_Printf>
            break;
 8000a24:	e032      	b.n	8000a8c <Game_HandleKeyboard+0x188>

        case 'd':
        case 'D':
            pos.x += STRAFE_SPEED;
 8000a26:	4b1b      	ldr	r3, [pc, #108]	@ (8000a94 <Game_HandleKeyboard+0x190>)
 8000a28:	edd3 7a00 	vldr	s15, [r3]
 8000a2c:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000a30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a34:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <Game_HandleKeyboard+0x190>)
 8000a36:	edc3 7a00 	vstr	s15, [r3]
            UART_Printf("[KEY] RIGHT -> X=%d\r\n", (int)pos.x); // USE INT!
 8000a3a:	4b16      	ldr	r3, [pc, #88]	@ (8000a94 <Game_HandleKeyboard+0x190>)
 8000a3c:	edd3 7a00 	vldr	s15, [r3]
 8000a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a44:	ee17 1a90 	vmov	r1, s15
 8000a48:	4814      	ldr	r0, [pc, #80]	@ (8000a9c <Game_HandleKeyboard+0x198>)
 8000a4a:	f000 f8ef 	bl	8000c2c <UART_Printf>
            break;
 8000a4e:	e01d      	b.n	8000a8c <Game_HandleKeyboard+0x188>

        case 's':
        case 'S':
            moving_forward = 0;
 8000a50:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <Game_HandleKeyboard+0x19c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
            UART_Printf("[KEY] STOP\r\n");
 8000a56:	4813      	ldr	r0, [pc, #76]	@ (8000aa4 <Game_HandleKeyboard+0x1a0>)
 8000a58:	f000 f8e8 	bl	8000c2c <UART_Printf>
            break;
 8000a5c:	e016      	b.n	8000a8c <Game_HandleKeyboard+0x188>

        case 'w':
        case 'W':
            moving_forward = 1;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	@ (8000aa0 <Game_HandleKeyboard+0x19c>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	701a      	strb	r2, [r3, #0]
            UART_Printf("[KEY] GO\r\n");
 8000a64:	4810      	ldr	r0, [pc, #64]	@ (8000aa8 <Game_HandleKeyboard+0x1a4>)
 8000a66:	f000 f8e1 	bl	8000c2c <UART_Printf>
            break;
 8000a6a:	e00f      	b.n	8000a8c <Game_HandleKeyboard+0x188>

        case 'r':
        case 'R':
            pos.x = 0;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <Game_HandleKeyboard+0x190>)
 8000a6e:	f04f 0200 	mov.w	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
            pos.y = 0;
 8000a74:	4b07      	ldr	r3, [pc, #28]	@ (8000a94 <Game_HandleKeyboard+0x190>)
 8000a76:	f04f 0200 	mov.w	r2, #0
 8000a7a:	605a      	str	r2, [r3, #4]
            pos.z = 0;
 8000a7c:	4b05      	ldr	r3, [pc, #20]	@ (8000a94 <Game_HandleKeyboard+0x190>)
 8000a7e:	f04f 0200 	mov.w	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
            UART_Printf("[KEY] RESET\r\n");
 8000a84:	4809      	ldr	r0, [pc, #36]	@ (8000aac <Game_HandleKeyboard+0x1a8>)
 8000a86:	f000 f8d1 	bl	8000c2c <UART_Printf>
            break;
 8000a8a:	bf00      	nop
    }
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000090 	.word	0x20000090
 8000a98:	08008b28 	.word	0x08008b28
 8000a9c:	08008b40 	.word	0x08008b40
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	08008b58 	.word	0x08008b58
 8000aa8:	08008b68 	.word	0x08008b68
 8000aac:	08008b74 	.word	0x08008b74

08000ab0 <Game_SendPositionToFPGA>:

// Send position to FPGA via SPI
void Game_SendPositionToFPGA(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af02      	add	r7, sp, #8
        int16_t x;
        int16_t y;
        int16_t z;
    } __attribute__((packed)) packet;

    packet.cmd = 0x01;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	703b      	strb	r3, [r7, #0]
    packet.x = (int16_t)pos.x;
 8000aba:	4b22      	ldr	r3, [pc, #136]	@ (8000b44 <Game_SendPositionToFPGA+0x94>)
 8000abc:	edd3 7a00 	vldr	s15, [r3]
 8000ac0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ac4:	ee17 3a90 	vmov	r3, s15
 8000ac8:	b21b      	sxth	r3, r3
 8000aca:	f8a7 3001 	strh.w	r3, [r7, #1]
    packet.y = (int16_t)pos.y;
 8000ace:	4b1d      	ldr	r3, [pc, #116]	@ (8000b44 <Game_SendPositionToFPGA+0x94>)
 8000ad0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ad8:	ee17 3a90 	vmov	r3, s15
 8000adc:	b21b      	sxth	r3, r3
 8000ade:	f8a7 3003 	strh.w	r3, [r7, #3]
    packet.z = (int16_t)pos.z;
 8000ae2:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <Game_SendPositionToFPGA+0x94>)
 8000ae4:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ae8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aec:	ee17 3a90 	vmov	r3, s15
 8000af0:	b21b      	sxth	r3, r3
 8000af2:	f8a7 3005 	strh.w	r3, [r7, #5]

    // Send via SPI
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // CS Low
 8000af6:	2200      	movs	r2, #0
 8000af8:	2110      	movs	r1, #16
 8000afa:	4813      	ldr	r0, [pc, #76]	@ (8000b48 <Game_SendPositionToFPGA+0x98>)
 8000afc:	f001 fb0e 	bl	800211c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&packet, sizeof(packet), 10);
 8000b00:	4639      	mov	r1, r7
 8000b02:	230a      	movs	r3, #10
 8000b04:	2207      	movs	r2, #7
 8000b06:	4811      	ldr	r0, [pc, #68]	@ (8000b4c <Game_SendPositionToFPGA+0x9c>)
 8000b08:	f005 fbc6 	bl	8006298 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);    // CS High
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2110      	movs	r1, #16
 8000b10:	480d      	ldr	r0, [pc, #52]	@ (8000b48 <Game_SendPositionToFPGA+0x98>)
 8000b12:	f001 fb03 	bl	800211c <HAL_GPIO_WritePin>

    // Show SPI data sent (hex values are fine)
    UART_Printf("SPI->[%02X %04X %04X %04X]\r\n",
                packet.cmd, packet.x, packet.y, packet.z);
 8000b16:	783b      	ldrb	r3, [r7, #0]
    UART_Printf("SPI->[%02X %04X %04X %04X]\r\n",
 8000b18:	4619      	mov	r1, r3
                packet.cmd, packet.x, packet.y, packet.z);
 8000b1a:	f9b7 3001 	ldrsh.w	r3, [r7, #1]
 8000b1e:	b21b      	sxth	r3, r3
    UART_Printf("SPI->[%02X %04X %04X %04X]\r\n",
 8000b20:	461a      	mov	r2, r3
                packet.cmd, packet.x, packet.y, packet.z);
 8000b22:	f9b7 3003 	ldrsh.w	r3, [r7, #3]
 8000b26:	b21b      	sxth	r3, r3
    UART_Printf("SPI->[%02X %04X %04X %04X]\r\n",
 8000b28:	4618      	mov	r0, r3
                packet.cmd, packet.x, packet.y, packet.z);
 8000b2a:	f9b7 3005 	ldrsh.w	r3, [r7, #5]
 8000b2e:	b21b      	sxth	r3, r3
    UART_Printf("SPI->[%02X %04X %04X %04X]\r\n",
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	4603      	mov	r3, r0
 8000b34:	4806      	ldr	r0, [pc, #24]	@ (8000b50 <Game_SendPositionToFPGA+0xa0>)
 8000b36:	f000 f879 	bl	8000c2c <UART_Printf>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000090 	.word	0x20000090
 8000b48:	42020000 	.word	0x42020000
 8000b4c:	200000b4 	.word	0x200000b4
 8000b50:	08008b84 	.word	0x08008b84

08000b54 <main>:

// ============================================
// MAIN
// ============================================
int main(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
    // System initialization
    HAL_Init();
 8000b5a:	f000 fde1 	bl	8001720 <HAL_Init>
    SystemPower_Config();
 8000b5e:	f000 f90e 	bl	8000d7e <SystemPower_Config>
    SystemClock_Config();
 8000b62:	f000 f8c3 	bl	8000cec <SystemClock_Config>

    // Peripheral initialization
    MX_GPIO_Init();
 8000b66:	f000 f9c9 	bl	8000efc <MX_GPIO_Init>
    MX_ICACHE_Init();
 8000b6a:	f000 f914 	bl	8000d96 <MX_ICACHE_Init>
    MX_SPI1_Init();
 8000b6e:	f000 f925 	bl	8000dbc <MX_SPI1_Init>
    MX_USART1_UART_Init();
 8000b72:	f000 f88b 	bl	8000c8c <MX_USART1_UART_Init>

    // BSP initialization
    BSP_LED_Init(LED_GREEN);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 fbc8 	bl	800130c <BSP_LED_Init>
    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f000 fc5a 	bl	8001438 <BSP_PB_Init>

    // Configure COM port
    BspCOMInit.BaudRate   = 115200;
 8000b84:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <main+0x90>)
 8000b86:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b8a:	601a      	str	r2, [r3, #0]
    BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000b8c:	4b15      	ldr	r3, [pc, #84]	@ (8000be4 <main+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	605a      	str	r2, [r3, #4]
    BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000b92:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <main+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	811a      	strh	r2, [r3, #8]
    BspCOMInit.Parity     = COM_PARITY_NONE;
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <main+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	815a      	strh	r2, [r3, #10]
    BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <main+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	819a      	strh	r2, [r3, #12]
    BSP_COM_Init(COM1, &BspCOMInit);
 8000ba4:	490f      	ldr	r1, [pc, #60]	@ (8000be4 <main+0x90>)
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f000 fcf6 	bl	8001598 <BSP_COM_Init>

    // Start UART interrupt
    HAL_UART_Receive_IT(&huart1, &uart_rx, 1);
 8000bac:	2201      	movs	r2, #1
 8000bae:	490e      	ldr	r1, [pc, #56]	@ (8000be8 <main+0x94>)
 8000bb0:	480e      	ldr	r0, [pc, #56]	@ (8000bec <main+0x98>)
 8000bb2:	f005 ff8d 	bl	8006ad0 <HAL_UART_Receive_IT>

    // Initialize game
    Game_Init();
 8000bb6:	f7ff fd25 	bl	8000604 <Game_Init>

    // Main loop
    while (1)
    {
        uint32_t now = HAL_GetTick();
 8000bba:	f000 fe6b 	bl	8001894 <HAL_GetTick>
 8000bbe:	6078      	str	r0, [r7, #4]

        // Handle button input
        uint8_t button_state = BSP_PB_GetState(BUTTON_USER);
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f000 fcb1 	bl	8001528 <BSP_PB_GetState>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	70fb      	strb	r3, [r7, #3]
        Game_HandleButton(button_state, now);
 8000bca:	78fb      	ldrb	r3, [r7, #3]
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fdee 	bl	80007b0 <Game_HandleButton>

        // Update game
        Game_Update(now);
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff fd6f 	bl	80006b8 <Game_Update>

        HAL_Delay(20);  // 50Hz polling
 8000bda:	2014      	movs	r0, #20
 8000bdc:	f000 fe66 	bl	80018ac <HAL_Delay>
    {
 8000be0:	bf00      	nop
 8000be2:	e7ea      	b.n	8000bba <main+0x66>
 8000be4:	200001d8 	.word	0x200001d8
 8000be8:	200001e8 	.word	0x200001e8
 8000bec:	20000144 	.word	0x20000144

08000bf0 <HAL_UART_RxCpltCallback>:
    }
}

// UART interrupt callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a08      	ldr	r2, [pc, #32]	@ (8000c20 <HAL_UART_RxCpltCallback+0x30>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d109      	bne.n	8000c16 <HAL_UART_RxCpltCallback+0x26>
    {
        Game_HandleKeyboard(uart_rx);
 8000c02:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <HAL_UART_RxCpltCallback+0x34>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fe7c 	bl	8000904 <Game_HandleKeyboard>
        HAL_UART_Receive_IT(&huart1, &uart_rx, 1);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4905      	ldr	r1, [pc, #20]	@ (8000c24 <HAL_UART_RxCpltCallback+0x34>)
 8000c10:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <HAL_UART_RxCpltCallback+0x38>)
 8000c12:	f005 ff5d 	bl	8006ad0 <HAL_UART_Receive_IT>
    }
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40013800 	.word	0x40013800
 8000c24:	200001e8 	.word	0x200001e8
 8000c28:	20000144 	.word	0x20000144

08000c2c <UART_Printf>:

// UART Printf implementation
void UART_Printf(const char* format, ...)
{
 8000c2c:	b40f      	push	{r0, r1, r2, r3}
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b0c2      	sub	sp, #264	@ 0x108
 8000c32:	af00      	add	r7, sp, #0
    char buffer[256];
    va_list args;
    va_start(args, format);
 8000c34:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8000c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c40:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c4a:	f107 0008 	add.w	r0, r7, #8
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000c54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c58:	f007 f9e2 	bl	8008020 <vsniprintf>
    va_end(args);

    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fb09 	bl	8000278 <strlen>
 8000c66:	4603      	mov	r3, r0
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	f107 0108 	add.w	r1, r7, #8
 8000c6e:	2364      	movs	r3, #100	@ 0x64
 8000c70:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <UART_Printf+0x5c>)
 8000c72:	f005 fe9f 	bl	80069b4 <HAL_UART_Transmit>
}
 8000c76:	bf00      	nop
 8000c78:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c82:	b004      	add	sp, #16
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000144 	.word	0x20000144

08000c8c <MX_USART1_UART_Init>:
// ============================================
// INITIALIZATION FUNCTIONS
// ============================================

static void MX_USART1_UART_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 8000c90:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000c92:	4a15      	ldr	r2, [pc, #84]	@ (8000ce8 <MX_USART1_UART_Init+0x5c>)
 8000c94:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8000c96:	4b13      	ldr	r3, [pc, #76]	@ (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000c98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c9c:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000cd0:	f005 fe20 	bl	8006914 <HAL_UART_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USART1_UART_Init+0x52>
    {
        Error_Handler();
 8000cda:	f000 f929 	bl	8000f30 <Error_Handler>
    }
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000144 	.word	0x20000144
 8000ce8:	40013800 	.word	0x40013800

08000cec <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b09e      	sub	sp, #120	@ 0x78
 8000cf0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf2:	f107 0318 	add.w	r3, r7, #24
 8000cf6:	2260      	movs	r2, #96	@ 0x60
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f007 f99e 	bl	800803c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d00:	463b      	mov	r3, r7
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]
 8000d0e:	615a      	str	r2, [r3, #20]

    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000d10:	2000      	movs	r0, #0
 8000d12:	f001 fa65 	bl	80021e0 <HAL_PWREx_ControlVoltageScaling>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0x34>
    {
        Error_Handler();
 8000d1c:	f000 f908 	bl	8000f30 <Error_Handler>
    }

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d20:	2310      	movs	r3, #16
 8000d22:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d24:	2301      	movs	r3, #1
 8000d26:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000d28:	2310      	movs	r3, #16
 8000d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000d2c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d36:	f107 0318 	add.w	r3, r7, #24
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 fb2c 	bl	8002398 <HAL_RCC_OscConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0x5e>
    {
        Error_Handler();
 8000d46:	f000 f8f3 	bl	8000f30 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4a:	231f      	movs	r3, #31
 8000d4c:	603b      	str	r3, [r7, #0]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                                |RCC_CLOCKTYPE_PCLK3;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d62:	463b      	mov	r3, r7
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f002 f9f2 	bl	8003150 <HAL_RCC_ClockConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0x8a>
    {
        Error_Handler();
 8000d72:	f000 f8dd 	bl	8000f30 <Error_Handler>
    }
}
 8000d76:	bf00      	nop
 8000d78:	3778      	adds	r7, #120	@ 0x78
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <SystemPower_Config>:

static void SystemPower_Config(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
    if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000d82:	2002      	movs	r0, #2
 8000d84:	f001 fab8 	bl	80022f8 <HAL_PWREx_ConfigSupply>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SystemPower_Config+0x14>
    {
        Error_Handler();
 8000d8e:	f000 f8cf 	bl	8000f30 <Error_Handler>
    }
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <MX_ICACHE_Init>:

static void MX_ICACHE_Init(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
    if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f001 f9f0 	bl	8002180 <HAL_ICACHE_ConfigAssociativityMode>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_ICACHE_Init+0x14>
    {
        Error_Handler();
 8000da6:	f000 f8c3 	bl	8000f30 <Error_Handler>
    }
    if (HAL_ICACHE_Enable() != HAL_OK)
 8000daa:	f001 fa09 	bl	80021c0 <HAL_ICACHE_Enable>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_ICACHE_Init+0x22>
    {
        Error_Handler();
 8000db4:	f000 f8bc 	bl	8000f30 <Error_Handler>
    }
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	@ 0x28
 8000dc0:	af00      	add	r7, sp, #0
    SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]

    hspi1.Instance = SPI1;
 8000dce:	4b47      	ldr	r3, [pc, #284]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000dd0:	4a47      	ldr	r2, [pc, #284]	@ (8000ef0 <MX_SPI1_Init+0x134>)
 8000dd2:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dd4:	4b45      	ldr	r3, [pc, #276]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000dd6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000dda:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ddc:	4b43      	ldr	r3, [pc, #268]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000de2:	4b42      	ldr	r3, [pc, #264]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000de4:	2207      	movs	r2, #7
 8000de6:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000de8:	4b40      	ldr	r3, [pc, #256]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dee:	4b3f      	ldr	r3, [pc, #252]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000df4:	4b3d      	ldr	r3, [pc, #244]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000df6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000dfa:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000dfc:	4b3b      	ldr	r3, [pc, #236]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000dfe:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000e02:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e04:	4b39      	ldr	r3, [pc, #228]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e0a:	4b38      	ldr	r3, [pc, #224]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e10:	4b36      	ldr	r3, [pc, #216]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 0x7;
 8000e16:	4b35      	ldr	r3, [pc, #212]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000e18:	2207      	movs	r2, #7
 8000e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e1c:	4b33      	ldr	r3, [pc, #204]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000e1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e22:	635a      	str	r2, [r3, #52]	@ 0x34
    hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e24:	4b31      	ldr	r3, [pc, #196]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e2a:	4b30      	ldr	r3, [pc, #192]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	63da      	str	r2, [r3, #60]	@ 0x3c
    hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e30:	4b2e      	ldr	r3, [pc, #184]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	649a      	str	r2, [r3, #72]	@ 0x48
    hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e36:	4b2d      	ldr	r3, [pc, #180]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e42:	4b2a      	ldr	r3, [pc, #168]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	655a      	str	r2, [r3, #84]	@ 0x54
    hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e48:	4b28      	ldr	r3, [pc, #160]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	659a      	str	r2, [r3, #88]	@ 0x58
    hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000e4e:	4b27      	ldr	r3, [pc, #156]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	65da      	str	r2, [r3, #92]	@ 0x5c
    hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000e54:	4b25      	ldr	r3, [pc, #148]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	661a      	str	r2, [r3, #96]	@ 0x60

    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e5a:	4824      	ldr	r0, [pc, #144]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000e5c:	f005 f906 	bl	800606c <HAL_SPI_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_SPI1_Init+0xae>
    {
        Error_Handler();
 8000e66:	f000 f863 	bl	8000f30 <Error_Handler>
    }

    HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
    HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000e6e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e72:	623b      	str	r3, [r7, #32]
    HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000e74:	2300      	movs	r3, #0
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24

    if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	481b      	ldr	r0, [pc, #108]	@ (8000eec <MX_SPI1_Init+0x130>)
 8000e80:	f005 fd07 	bl	8006892 <HAL_SPIEx_SetConfigAutonomousMode>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_SPI1_Init+0xd2>
    {
        Error_Handler();
 8000e8a:	f000 f851 	bl	8000f30 <Error_Handler>
    }

    // Configure CS pin (PA4)
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <MX_SPI1_Init+0x138>)
 8000ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ea4:	4a13      	ldr	r2, [pc, #76]	@ (8000ef4 <MX_SPI1_Init+0x138>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000eae:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <MX_SPI1_Init+0x138>)
 8000eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ebc:	2310      	movs	r3, #16
 8000ebe:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 0308 	add.w	r3, r7, #8
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4809      	ldr	r0, [pc, #36]	@ (8000ef8 <MX_SPI1_Init+0x13c>)
 8000ed4:	f000 ff2a 	bl	8001d2c <HAL_GPIO_Init>

    // CS high (inactive)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2110      	movs	r1, #16
 8000edc:	4806      	ldr	r0, [pc, #24]	@ (8000ef8 <MX_SPI1_Init+0x13c>)
 8000ede:	f001 f91d 	bl	800211c <HAL_GPIO_WritePin>
}
 8000ee2:	bf00      	nop
 8000ee4:	3728      	adds	r7, #40	@ 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200000b4 	.word	0x200000b4
 8000ef0:	40013000 	.word	0x40013000
 8000ef4:	46020c00 	.word	0x46020c00
 8000ef8:	42020000 	.word	0x42020000

08000efc <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <MX_GPIO_Init+0x30>)
 8000f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f08:	4a08      	ldr	r2, [pc, #32]	@ (8000f2c <MX_GPIO_Init+0x30>)
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <MX_GPIO_Init+0x30>)
 8000f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	687b      	ldr	r3, [r7, #4]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	46020c00 	.word	0x46020c00

08000f30 <Error_Handler>:

void Error_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f34:	b672      	cpsid	i
}
 8000f36:	bf00      	nop
    __disable_irq();
    while (1)
    {
        BSP_LED_Toggle(LED_GREEN);
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f000 fa5f 	bl	80013fc <BSP_LED_Toggle>
        HAL_Delay(100);
 8000f3e:	2064      	movs	r0, #100	@ 0x64
 8000f40:	f000 fcb4 	bl	80018ac <HAL_Delay>
        BSP_LED_Toggle(LED_GREEN);
 8000f44:	bf00      	nop
 8000f46:	e7f7      	b.n	8000f38 <Error_Handler+0x8>

08000f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <HAL_MspInit+0x30>)
 8000f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f54:	4a08      	ldr	r2, [pc, #32]	@ (8000f78 <HAL_MspInit+0x30>)
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <HAL_MspInit+0x30>)
 8000f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	46020c00 	.word	0x46020c00

08000f7c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b0ba      	sub	sp, #232	@ 0xe8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	22c0      	movs	r2, #192	@ 0xc0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f007 f84d 	bl	800803c <memset>
  if(hspi->Instance==SPI1)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a27      	ldr	r2, [pc, #156]	@ (8001044 <HAL_SPI_MspInit+0xc8>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d146      	bne.n	800103a <HAL_SPI_MspInit+0xbe>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000fac:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8000fb8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000fbc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f002 fc93 	bl	80038f0 <HAL_RCCEx_PeriphCLKConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8000fd0:	f7ff ffae 	bl	8000f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <HAL_SPI_MspInit+0xcc>)
 8000fd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000fda:	4a1b      	ldr	r2, [pc, #108]	@ (8001048 <HAL_SPI_MspInit+0xcc>)
 8000fdc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fe0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000fe4:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <HAL_SPI_MspInit+0xcc>)
 8000fe6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000fea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <HAL_SPI_MspInit+0xcc>)
 8000ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ff8:	4a13      	ldr	r2, [pc, #76]	@ (8001048 <HAL_SPI_MspInit+0xcc>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001002:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <HAL_SPI_MspInit+0xcc>)
 8001004:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001010:	23c2      	movs	r3, #194	@ 0xc2
 8001012:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001028:	2305      	movs	r3, #5
 800102a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	@ (800104c <HAL_SPI_MspInit+0xd0>)
 8001036:	f000 fe79 	bl	8001d2c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800103a:	bf00      	nop
 800103c:	37e8      	adds	r7, #232	@ 0xe8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40013000 	.word	0x40013000
 8001048:	46020c00 	.word	0x46020c00
 800104c:	42020000 	.word	0x42020000

08001050 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b0bc      	sub	sp, #240	@ 0xf0
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001068:	f107 0318 	add.w	r3, r7, #24
 800106c:	22c0      	movs	r2, #192	@ 0xc0
 800106e:	2100      	movs	r1, #0
 8001070:	4618      	mov	r0, r3
 8001072:	f006 ffe3 	bl	800803c <memset>
  if(huart->Instance==USART3)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a39      	ldr	r2, [pc, #228]	@ (8001160 <HAL_UART_MspInit+0x110>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d16a      	bne.n	8001156 <HAL_UART_MspInit+0x106>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001080:	f04f 0204 	mov.w	r2, #4
 8001084:	f04f 0300 	mov.w	r3, #0
 8001088:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800108c:	2300      	movs	r3, #0
 800108e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001090:	f107 0318 	add.w	r3, r7, #24
 8001094:	4618      	mov	r0, r3
 8001096:	f002 fc2b 	bl	80038f0 <HAL_RCCEx_PeriphCLKConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80010a0:	f7ff ff46 	bl	8000f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001164 <HAL_UART_MspInit+0x114>)
 80010a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010aa:	4a2e      	ldr	r2, [pc, #184]	@ (8001164 <HAL_UART_MspInit+0x114>)
 80010ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010b0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80010b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001164 <HAL_UART_MspInit+0x114>)
 80010b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	4b28      	ldr	r3, [pc, #160]	@ (8001164 <HAL_UART_MspInit+0x114>)
 80010c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010c8:	4a26      	ldr	r2, [pc, #152]	@ (8001164 <HAL_UART_MspInit+0x114>)
 80010ca:	f043 0302 	orr.w	r3, r3, #2
 80010ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010d2:	4b24      	ldr	r3, [pc, #144]	@ (8001164 <HAL_UART_MspInit+0x114>)
 80010d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e0:	4b20      	ldr	r3, [pc, #128]	@ (8001164 <HAL_UART_MspInit+0x114>)
 80010e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001164 <HAL_UART_MspInit+0x114>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001164 <HAL_UART_MspInit+0x114>)
 80010f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001102:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001118:	2307      	movs	r3, #7
 800111a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001122:	4619      	mov	r1, r3
 8001124:	4810      	ldr	r0, [pc, #64]	@ (8001168 <HAL_UART_MspInit+0x118>)
 8001126:	f000 fe01 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800112a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800112e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001144:	2307      	movs	r3, #7
 8001146:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800114e:	4619      	mov	r1, r3
 8001150:	4806      	ldr	r0, [pc, #24]	@ (800116c <HAL_UART_MspInit+0x11c>)
 8001152:	f000 fdeb 	bl	8001d2c <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001156:	bf00      	nop
 8001158:	37f0      	adds	r7, #240	@ 0xf0
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40004800 	.word	0x40004800
 8001164:	46020c00 	.word	0x46020c00
 8001168:	42020400 	.word	0x42020400
 800116c:	42020800 	.word	0x42020800

08001170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <NMI_Handler+0x4>

08001178 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <HardFault_Handler+0x4>

08001180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <MemManage_Handler+0x4>

08001188 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <BusFault_Handler+0x4>

08001190 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <UsageFault_Handler+0x4>

08001198 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c6:	f000 fb51 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}

080011ce <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f000 f9be 	bl	8001554 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}

080011dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e4:	4a14      	ldr	r2, [pc, #80]	@ (8001238 <_sbrk+0x5c>)
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <_sbrk+0x60>)
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f0:	4b13      	ldr	r3, [pc, #76]	@ (8001240 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f8:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <_sbrk+0x64>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	@ (8001244 <_sbrk+0x68>)
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011fe:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	429a      	cmp	r2, r3
 800120a:	d207      	bcs.n	800121c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800120c:	f006 ff1e 	bl	800804c <__errno>
 8001210:	4603      	mov	r3, r0
 8001212:	220c      	movs	r2, #12
 8001214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800121a:	e009      	b.n	8001230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800121c:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001222:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	4a05      	ldr	r2, [pc, #20]	@ (8001240 <_sbrk+0x64>)
 800122c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20040000 	.word	0x20040000
 800123c:	00000400 	.word	0x00000400
 8001240:	200001ec 	.word	0x200001ec
 8001244:	200003e0 	.word	0x200003e0

08001248 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800124c:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <SystemInit+0x68>)
 800124e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001252:	4a17      	ldr	r2, [pc, #92]	@ (80012b0 <SystemInit+0x68>)
 8001254:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001258:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <SystemInit+0x6c>)
 800125e:	2201      	movs	r2, #1
 8001260:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001262:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <SystemInit+0x6c>)
 8001264:	2200      	movs	r2, #0
 8001266:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <SystemInit+0x6c>)
 800126a:	2200      	movs	r2, #0
 800126c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800126e:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <SystemInit+0x6c>)
 8001270:	2200      	movs	r2, #0
 8001272:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <SystemInit+0x6c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0e      	ldr	r2, [pc, #56]	@ (80012b4 <SystemInit+0x6c>)
 800127a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800127e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001282:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001284:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <SystemInit+0x6c>)
 8001286:	2200      	movs	r2, #0
 8001288:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800128a:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <SystemInit+0x6c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a09      	ldr	r2, [pc, #36]	@ (80012b4 <SystemInit+0x6c>)
 8001290:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001294:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001296:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <SystemInit+0x6c>)
 8001298:	2200      	movs	r2, #0
 800129a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800129c:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <SystemInit+0x68>)
 800129e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80012a2:	609a      	str	r2, [r3, #8]
  #endif
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00
 80012b4:	46020c00 	.word	0x46020c00

080012b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012b8:	480d      	ldr	r0, [pc, #52]	@ (80012f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012bc:	f7ff ffc4 	bl	8001248 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c0:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80012c2:	490d      	ldr	r1, [pc, #52]	@ (80012f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c4:	4a0d      	ldr	r2, [pc, #52]	@ (80012fc <LoopForever+0xe>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001304 <LoopForever+0x16>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012e6:	f006 feb7 	bl	8008058 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ea:	f7ff fc33 	bl	8000b54 <main>

080012ee <LoopForever>:

LoopForever:
    b LoopForever
 80012ee:	e7fe      	b.n	80012ee <LoopForever>
  ldr   r0, =_estack
 80012f0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80012fc:	08008cdc 	.word	0x08008cdc
  ldr r2, =_sbss
 8001300:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001304:	200003dc 	.word	0x200003dc

08001308 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC1_IRQHandler>
	...

0800130c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	@ 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <BSP_LED_Init+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001320:	f06f 0301 	mvn.w	r3, #1
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
 8001326:	e023      	b.n	8001370 <BSP_LED_Init+0x64>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10e      	bne.n	800134c <BSP_LED_Init+0x40>
    {
      LED2_GPIO_CLK_ENABLE();
 800132e:	4b13      	ldr	r3, [pc, #76]	@ (800137c <BSP_LED_Init+0x70>)
 8001330:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001334:	4a11      	ldr	r2, [pc, #68]	@ (800137c <BSP_LED_Init+0x70>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800133e:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <BSP_LED_Init+0x70>)
 8001340:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]

      LED3_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800134c:	2320      	movs	r3, #32
 800134e:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001350:	2301      	movs	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	4a08      	ldr	r2, [pc, #32]	@ (8001380 <BSP_LED_Init+0x74>)
 8001360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001364:	f107 0210 	add.w	r2, r7, #16
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f000 fcde 	bl	8001d2c <HAL_GPIO_Init>
  }

  return ret;
 8001370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001372:	4618      	mov	r0, r3
 8001374:	3728      	adds	r7, #40	@ 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	46020c00 	.word	0x46020c00
 8001380:	2000000c 	.word	0x2000000c

08001384 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <BSP_LED_On+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001398:	f06f 0301 	mvn.w	r3, #1
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	e008      	b.n	80013b2 <BSP_LED_On+0x2e>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	4a06      	ldr	r2, [pc, #24]	@ (80013bc <BSP_LED_On+0x38>)
 80013a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a8:	2120      	movs	r1, #32
 80013aa:	2201      	movs	r2, #1
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 feb5 	bl	800211c <HAL_GPIO_WritePin>
  }

  return ret;
 80013b2:	68fb      	ldr	r3, [r7, #12]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	2000000c 	.word	0x2000000c

080013c0 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <BSP_LED_Off+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80013d4:	f06f 0301 	mvn.w	r3, #1
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	e008      	b.n	80013ee <BSP_LED_Off+0x2e>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	4a06      	ldr	r2, [pc, #24]	@ (80013f8 <BSP_LED_Off+0x38>)
 80013e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e4:	2120      	movs	r1, #32
 80013e6:	2200      	movs	r2, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fe97 	bl	800211c <HAL_GPIO_WritePin>
  }

  return ret;
 80013ee:	68fb      	ldr	r3, [r7, #12]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	2000000c 	.word	0x2000000c

080013fc <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <BSP_LED_Toggle+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001410:	f06f 0301 	mvn.w	r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	e008      	b.n	800142a <BSP_LED_Toggle+0x2e>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	4a06      	ldr	r2, [pc, #24]	@ (8001434 <BSP_LED_Toggle+0x38>)
 800141c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001420:	2220      	movs	r2, #32
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f000 fe91 	bl	800214c <HAL_GPIO_TogglePin>
  }

  return ret;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2000000c 	.word	0x2000000c

08001438 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	460a      	mov	r2, r1
 8001442:	71fb      	strb	r3, [r7, #7]
 8001444:	4613      	mov	r3, r2
 8001446:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001448:	4b30      	ldr	r3, [pc, #192]	@ (800150c <BSP_PB_Init+0xd4>)
 800144a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800144e:	4a2f      	ldr	r2, [pc, #188]	@ (800150c <BSP_PB_Init+0xd4>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001458:	4b2c      	ldr	r3, [pc, #176]	@ (800150c <BSP_PB_Init+0xd4>)
 800145a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001466:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800146a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800146c:	2302      	movs	r3, #2
 800146e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001470:	2302      	movs	r3, #2
 8001472:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001474:	79bb      	ldrb	r3, [r7, #6]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10c      	bne.n	8001494 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	4a23      	ldr	r2, [pc, #140]	@ (8001510 <BSP_PB_Init+0xd8>)
 8001482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001486:	f107 020c 	add.w	r2, r7, #12
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f000 fc4d 	bl	8001d2c <HAL_GPIO_Init>
 8001492:	e036      	b.n	8001502 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001494:	4b1f      	ldr	r3, [pc, #124]	@ (8001514 <BSP_PB_Init+0xdc>)
 8001496:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	4a1d      	ldr	r2, [pc, #116]	@ (8001510 <BSP_PB_Init+0xd8>)
 800149c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a0:	f107 020c 	add.w	r2, r7, #12
 80014a4:	4611      	mov	r1, r2
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 fc40 	bl	8001d2c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80014ac:	79fa      	ldrb	r2, [r7, #7]
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4a18      	ldr	r2, [pc, #96]	@ (8001518 <BSP_PB_Init+0xe0>)
 80014b8:	441a      	add	r2, r3
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	4917      	ldr	r1, [pc, #92]	@ (800151c <BSP_PB_Init+0xe4>)
 80014be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014c2:	4619      	mov	r1, r3
 80014c4:	4610      	mov	r0, r2
 80014c6:	f000 fbd5 	bl	8001c74 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80014ca:	79fa      	ldrb	r2, [r7, #7]
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4a10      	ldr	r2, [pc, #64]	@ (8001518 <BSP_PB_Init+0xe0>)
 80014d6:	1898      	adds	r0, r3, r2
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	4a11      	ldr	r2, [pc, #68]	@ (8001520 <BSP_PB_Init+0xe8>)
 80014dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e0:	461a      	mov	r2, r3
 80014e2:	2100      	movs	r1, #0
 80014e4:	f000 fb9a 	bl	8001c1c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80014e8:	2018      	movs	r0, #24
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001524 <BSP_PB_Init+0xec>)
 80014ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f2:	2200      	movs	r2, #0
 80014f4:	4619      	mov	r1, r3
 80014f6:	f000 fab5 	bl	8001a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80014fa:	2318      	movs	r3, #24
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 facb 	bl	8001a98 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3720      	adds	r7, #32
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	46020c00 	.word	0x46020c00
 8001510:	20000010 	.word	0x20000010
 8001514:	10110000 	.word	0x10110000
 8001518:	200001f0 	.word	0x200001f0
 800151c:	08008bfc 	.word	0x08008bfc
 8001520:	20000014 	.word	0x20000014
 8001524:	20000018 	.word	0x20000018

08001528 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_USER: Wakeup Push Button
  * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	4a06      	ldr	r2, [pc, #24]	@ (8001550 <BSP_PB_GetState+0x28>)
 8001536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f000 fdd3 	bl	80020ec <HAL_GPIO_ReadPin>
 8001546:	4603      	mov	r3, r0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000010 	.word	0x20000010

08001554 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800155e:	79fa      	ldrb	r2, [r7, #7]
 8001560:	4613      	mov	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4a04      	ldr	r2, [pc, #16]	@ (800157c <BSP_PB_IRQHandler+0x28>)
 800156a:	4413      	add	r3, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f000 fb95 	bl	8001c9c <HAL_EXTI_IRQHandler>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200001f0 	.word	0x200001f0

08001580 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80015ae:	f06f 0301 	mvn.w	r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	e018      	b.n	80015e8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2294      	movs	r2, #148	@ 0x94
 80015ba:	fb02 f303 	mul.w	r3, r2, r3
 80015be:	4a0d      	ldr	r2, [pc, #52]	@ (80015f4 <BSP_COM_Init+0x5c>)
 80015c0:	4413      	add	r3, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f854 	bl	8001670 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	2294      	movs	r2, #148	@ 0x94
 80015cc:	fb02 f303 	mul.w	r3, r2, r3
 80015d0:	4a08      	ldr	r2, [pc, #32]	@ (80015f4 <BSP_COM_Init+0x5c>)
 80015d2:	4413      	add	r3, r2
 80015d4:	6839      	ldr	r1, [r7, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f80e 	bl	80015f8 <MX_USART1_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d002      	beq.n	80015e8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80015e2:	f06f 0303 	mvn.w	r3, #3
 80015e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80015e8:	68fb      	ldr	r3, [r7, #12]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200001fc 	.word	0x200001fc

080015f8 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001602:	4b16      	ldr	r3, [pc, #88]	@ (800165c <MX_USART1_Init+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	220c      	movs	r2, #12
 8001616:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	895b      	ldrh	r3, [r3, #10]
 800161c:	461a      	mov	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	891b      	ldrh	r3, [r3, #8]
 800162e:	461a      	mov	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	899b      	ldrh	r3, [r3, #12]
 8001638:	461a      	mov	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001644:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f005 f961 	bl	8006914 <HAL_UART_Init>
 8001652:	4603      	mov	r3, r0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000008 	.word	0x20000008

08001660 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001664:	2000      	movs	r0, #0
 8001666:	f7ff ff8b 	bl	8001580 <BSP_PB_Callback>
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	@ 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001678:	4b27      	ldr	r3, [pc, #156]	@ (8001718 <COM1_MspInit+0xa8>)
 800167a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800167e:	4a26      	ldr	r2, [pc, #152]	@ (8001718 <COM1_MspInit+0xa8>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001688:	4b23      	ldr	r3, [pc, #140]	@ (8001718 <COM1_MspInit+0xa8>)
 800168a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001696:	4b20      	ldr	r3, [pc, #128]	@ (8001718 <COM1_MspInit+0xa8>)
 8001698:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800169c:	4a1e      	ldr	r2, [pc, #120]	@ (8001718 <COM1_MspInit+0xa8>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001718 <COM1_MspInit+0xa8>)
 80016a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80016b4:	4b18      	ldr	r3, [pc, #96]	@ (8001718 <COM1_MspInit+0xa8>)
 80016b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80016ba:	4a17      	ldr	r2, [pc, #92]	@ (8001718 <COM1_MspInit+0xa8>)
 80016bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80016c4:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <COM1_MspInit+0xa8>)
 80016c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80016ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80016d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016d6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80016dc:	2302      	movs	r3, #2
 80016de:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80016e4:	2307      	movs	r3, #7
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	480b      	ldr	r0, [pc, #44]	@ (800171c <COM1_MspInit+0xac>)
 80016f0:	f000 fb1c 	bl	8001d2c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 80016f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016f8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80016fe:	2307      	movs	r3, #7
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	4804      	ldr	r0, [pc, #16]	@ (800171c <COM1_MspInit+0xac>)
 800170a:	f000 fb0f 	bl	8001d2c <HAL_GPIO_Init>
}
 800170e:	bf00      	nop
 8001710:	3728      	adds	r7, #40	@ 0x28
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	46020c00 	.word	0x46020c00
 800171c:	42020000 	.word	0x42020000

08001720 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001724:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <HAL_Init+0x50>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a11      	ldr	r2, [pc, #68]	@ (8001770 <HAL_Init+0x50>)
 800172a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800172e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001730:	2003      	movs	r0, #3
 8001732:	f000 f98c 	bl	8001a4e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001736:	f001 fefd 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 800173a:	4602      	mov	r2, r0
 800173c:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <HAL_Init+0x54>)
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	f003 030f 	and.w	r3, r3, #15
 8001744:	490c      	ldr	r1, [pc, #48]	@ (8001778 <HAL_Init+0x58>)
 8001746:	5ccb      	ldrb	r3, [r1, r3]
 8001748:	fa22 f303 	lsr.w	r3, r2, r3
 800174c:	4a0b      	ldr	r2, [pc, #44]	@ (800177c <HAL_Init+0x5c>)
 800174e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001750:	2004      	movs	r0, #4
 8001752:	f000 f9d1 	bl	8001af8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001756:	200f      	movs	r0, #15
 8001758:	f000 f812 	bl	8001780 <HAL_InitTick>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e002      	b.n	800176c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001766:	f7ff fbef 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40022000 	.word	0x40022000
 8001774:	46020c00 	.word	0x46020c00
 8001778:	08008ba4 	.word	0x08008ba4
 800177c:	20000004 	.word	0x20000004

08001780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800178c:	4b33      	ldr	r3, [pc, #204]	@ (800185c <HAL_InitTick+0xdc>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e05c      	b.n	8001852 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001798:	4b31      	ldr	r3, [pc, #196]	@ (8001860 <HAL_InitTick+0xe0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d10c      	bne.n	80017be <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80017a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001864 <HAL_InitTick+0xe4>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b2c      	ldr	r3, [pc, #176]	@ (800185c <HAL_InitTick+0xdc>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	4619      	mov	r1, r3
 80017ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	e037      	b.n	800182e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80017be:	f000 f9f3 	bl	8001ba8 <HAL_SYSTICK_GetCLKSourceConfig>
 80017c2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d023      	beq.n	8001812 <HAL_InitTick+0x92>
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d82d      	bhi.n	800182c <HAL_InitTick+0xac>
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_InitTick+0x5e>
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d00d      	beq.n	80017f8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80017dc:	e026      	b.n	800182c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80017de:	4b21      	ldr	r3, [pc, #132]	@ (8001864 <HAL_InitTick+0xe4>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	4b1e      	ldr	r3, [pc, #120]	@ (800185c <HAL_InitTick+0xdc>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	4619      	mov	r1, r3
 80017e8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80017ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f4:	60fb      	str	r3, [r7, #12]
        break;
 80017f6:	e01a      	b.n	800182e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80017f8:	4b18      	ldr	r3, [pc, #96]	@ (800185c <HAL_InitTick+0xdc>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001802:	fbb3 f3f2 	udiv	r3, r3, r2
 8001806:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800180a:	fbb2 f3f3 	udiv	r3, r2, r3
 800180e:	60fb      	str	r3, [r7, #12]
        break;
 8001810:	e00d      	b.n	800182e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001812:	4b12      	ldr	r3, [pc, #72]	@ (800185c <HAL_InitTick+0xdc>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800181c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001820:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001824:	fbb2 f3f3 	udiv	r3, r2, r3
 8001828:	60fb      	str	r3, [r7, #12]
        break;
 800182a:	e000      	b.n	800182e <HAL_InitTick+0xae>
        break;
 800182c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 f940 	bl	8001ab4 <HAL_SYSTICK_Config>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e009      	b.n	8001852 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800183e:	2200      	movs	r2, #0
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001846:	f000 f90d 	bl	8001a64 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800184a:	4a07      	ldr	r2, [pc, #28]	@ (8001868 <HAL_InitTick+0xe8>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000020 	.word	0x20000020
 8001860:	e000e010 	.word	0xe000e010
 8001864:	20000004 	.word	0x20000004
 8001868:	2000001c 	.word	0x2000001c

0800186c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <HAL_IncTick+0x20>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <HAL_IncTick+0x24>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a04      	ldr	r2, [pc, #16]	@ (8001890 <HAL_IncTick+0x24>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000020 	.word	0x20000020
 8001890:	20000290 	.word	0x20000290

08001894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b03      	ldr	r3, [pc, #12]	@ (80018a8 <HAL_GetTick+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000290 	.word	0x20000290

080018ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff ffee 	bl	8001894 <HAL_GetTick>
 80018b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018c4:	d005      	beq.n	80018d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c6:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <HAL_Delay+0x44>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018d2:	bf00      	nop
 80018d4:	f7ff ffde 	bl	8001894 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d8f7      	bhi.n	80018d4 <HAL_Delay+0x28>
  {
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000020 	.word	0x20000020

080018f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800191c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001926:	4a04      	ldr	r2, [pc, #16]	@ (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	60d3      	str	r3, [r2, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b04      	ldr	r3, [pc, #16]	@ (8001954 <__NVIC_GetPriorityGrouping+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0307 	and.w	r3, r3, #7
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	2b00      	cmp	r3, #0
 8001968:	db0b      	blt.n	8001982 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	f003 021f 	and.w	r2, r3, #31
 8001970:	4907      	ldr	r1, [pc, #28]	@ (8001990 <__NVIC_EnableIRQ+0x38>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	2001      	movs	r0, #1
 800197a:	fa00 f202 	lsl.w	r2, r0, r2
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000e100 	.word	0xe000e100

08001994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db0a      	blt.n	80019be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	490c      	ldr	r1, [pc, #48]	@ (80019e0 <__NVIC_SetPriority+0x4c>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019bc:	e00a      	b.n	80019d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	@ (80019e4 <__NVIC_SetPriority+0x50>)
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3b04      	subs	r3, #4
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	761a      	strb	r2, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	@ 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf28      	it	cs
 8001a06:	2304      	movcs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d902      	bls.n	8001a18 <NVIC_EncodePriority+0x30>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b03      	subs	r3, #3
 8001a16:	e000      	b.n	8001a1a <NVIC_EncodePriority+0x32>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	4313      	orrs	r3, r2
         );
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	@ 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ff4c 	bl	80018f4 <__NVIC_SetPriorityGrouping>
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a72:	f7ff ff63 	bl	800193c <__NVIC_GetPriorityGrouping>
 8001a76:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	68b9      	ldr	r1, [r7, #8]
 8001a7c:	6978      	ldr	r0, [r7, #20]
 8001a7e:	f7ff ffb3 	bl	80019e8 <NVIC_EncodePriority>
 8001a82:	4602      	mov	r2, r0
 8001a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a88:	4611      	mov	r1, r2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff ff82 	bl	8001994 <__NVIC_SetPriority>
}
 8001a90:	bf00      	nop
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff ff56 	bl	8001958 <__NVIC_EnableIRQ>
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ac4:	d301      	bcc.n	8001aca <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00d      	b.n	8001ae6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001aca:	4a0a      	ldr	r2, [pc, #40]	@ (8001af4 <HAL_SYSTICK_Config+0x40>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001ad2:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <HAL_SYSTICK_Config+0x40>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <HAL_SYSTICK_Config+0x40>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a05      	ldr	r2, [pc, #20]	@ (8001af4 <HAL_SYSTICK_Config+0x40>)
 8001ade:	f043 0303 	orr.w	r3, r3, #3
 8001ae2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000e010 	.word	0xe000e010

08001af8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d844      	bhi.n	8001b90 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001b06:	a201      	add	r2, pc, #4	@ (adr r2, 8001b0c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0c:	08001b2f 	.word	0x08001b2f
 8001b10:	08001b4d 	.word	0x08001b4d
 8001b14:	08001b6f 	.word	0x08001b6f
 8001b18:	08001b91 	.word	0x08001b91
 8001b1c:	08001b21 	.word	0x08001b21
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001b20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a1e      	ldr	r2, [pc, #120]	@ (8001ba0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b26:	f043 0304 	orr.w	r3, r3, #4
 8001b2a:	6013      	str	r3, [r2, #0]
      break;
 8001b2c:	e031      	b.n	8001b92 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a1b      	ldr	r2, [pc, #108]	@ (8001ba0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b34:	f023 0304 	bic.w	r3, r3, #4
 8001b38:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b40:	4a18      	ldr	r2, [pc, #96]	@ (8001ba4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b42:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001b46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001b4a:	e022      	b.n	8001b92 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001b4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ba0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a13      	ldr	r2, [pc, #76]	@ (8001ba0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b52:	f023 0304 	bic.w	r3, r3, #4
 8001b56:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001b58:	4b12      	ldr	r3, [pc, #72]	@ (8001ba4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b5e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001b62:	4a10      	ldr	r2, [pc, #64]	@ (8001ba4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001b6c:	e011      	b.n	8001b92 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a0b      	ldr	r2, [pc, #44]	@ (8001ba0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b74:	f023 0304 	bic.w	r3, r3, #4
 8001b78:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b80:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001b84:	4a07      	ldr	r2, [pc, #28]	@ (8001ba4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b86:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001b8e:	e000      	b.n	8001b92 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001b90:	bf00      	nop
  }
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000e010 	.word	0xe000e010
 8001ba4:	46020c00 	.word	0x46020c00

08001ba8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001bae:	4b19      	ldr	r3, [pc, #100]	@ (8001c14 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d002      	beq.n	8001bc0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001bba:	2304      	movs	r3, #4
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	e021      	b.n	8001c04 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001bc0:	4b15      	ldr	r3, [pc, #84]	@ (8001c18 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bc6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001bca:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001bd2:	d011      	beq.n	8001bf8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001bda:	d810      	bhi.n	8001bfe <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d004      	beq.n	8001bec <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001be8:	d003      	beq.n	8001bf2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001bea:	e008      	b.n	8001bfe <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001bec:	2300      	movs	r3, #0
 8001bee:	607b      	str	r3, [r7, #4]
        break;
 8001bf0:	e008      	b.n	8001c04 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	607b      	str	r3, [r7, #4]
        break;
 8001bf6:	e005      	b.n	8001c04 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	607b      	str	r3, [r7, #4]
        break;
 8001bfc:	e002      	b.n	8001c04 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
        break;
 8001c02:	bf00      	nop
    }
  }
  return systick_source;
 8001c04:	687b      	ldr	r3, [r7, #4]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000e010 	.word	0xe000e010
 8001c18:	46020c00 	.word	0x46020c00

08001c1c <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	460b      	mov	r3, r1
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001c2e:	7afb      	ldrb	r3, [r7, #11]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d011      	beq.n	8001c58 <HAL_EXTI_RegisterCallback+0x3c>
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	dc13      	bgt.n	8001c60 <HAL_EXTI_RegisterCallback+0x44>
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <HAL_EXTI_RegisterCallback+0x26>
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d007      	beq.n	8001c50 <HAL_EXTI_RegisterCallback+0x34>
 8001c40:	e00e      	b.n	8001c60 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
      break;
 8001c4e:	e00a      	b.n	8001c66 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	605a      	str	r2, [r3, #4]
      break;
 8001c56:	e006      	b.n	8001c66 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
      break;
 8001c5e:	e002      	b.n	8001c66 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	75fb      	strb	r3, [r7, #23]
      break;
 8001c64:	bf00      	nop
  }

  return status;
 8001c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	371c      	adds	r7, #28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e003      	b.n	8001c90 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
  }
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	0c1b      	lsrs	r3, r3, #16
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	2201      	movs	r2, #1
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	015a      	lsls	r2, r3, #5
 8001cc4:	4b17      	ldr	r3, [pc, #92]	@ (8001d24 <HAL_EXTI_IRQHandler+0x88>)
 8001cc6:	4413      	add	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d009      	beq.n	8001cee <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	015a      	lsls	r2, r3, #5
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d28 <HAL_EXTI_IRQHandler+0x8c>)
 8001cf4:	4413      	add	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d009      	beq.n	8001d1c <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d002      	beq.n	8001d1c <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	4798      	blx	r3
    }
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	4602200c 	.word	0x4602200c
 8001d28:	46022010 	.word	0x46022010

08001d2c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	@ 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001d3e:	e1c2      	b.n	80020c6 <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2101      	movs	r1, #1
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 81b2 	beq.w	80020c0 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a55      	ldr	r2, [pc, #340]	@ (8001eb4 <HAL_GPIO_Init+0x188>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d15d      	bne.n	8001e20 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69fa      	ldr	r2, [r7, #28]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 0201 	and.w	r2, r3, #1
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69fa      	ldr	r2, [r7, #28]
 8001d92:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001d94:	4a48      	ldr	r2, [pc, #288]	@ (8001eb8 <HAL_GPIO_Init+0x18c>)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001d9c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001d9e:	4a46      	ldr	r2, [pc, #280]	@ (8001eb8 <HAL_GPIO_Init+0x18c>)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4413      	add	r3, r2
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	08da      	lsrs	r2, r3, #3
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	3208      	adds	r2, #8
 8001db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	220f      	movs	r2, #15
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69fa      	ldr	r2, [r7, #28]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	220b      	movs	r2, #11
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	08da      	lsrs	r2, r3, #3
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	3208      	adds	r2, #8
 8001dea:	69f9      	ldr	r1, [r7, #28]
 8001dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	e067      	b.n	8001ef0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x104>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b12      	cmp	r3, #18
 8001e2e:	d145      	bne.n	8001ebc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	08da      	lsrs	r2, r3, #3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3208      	adds	r2, #8
 8001e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e3c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	220f      	movs	r2, #15
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69fa      	ldr	r2, [r7, #28]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	f003 020f 	and.w	r2, r3, #15
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	08da      	lsrs	r2, r3, #3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3208      	adds	r2, #8
 8001e76:	69f9      	ldr	r1, [r7, #28]
 8001e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2203      	movs	r2, #3
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0203 	and.w	r2, r3, #3
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	69fa      	ldr	r2, [r7, #28]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	e01e      	b.n	8001ef0 <HAL_GPIO_Init+0x1c4>
 8001eb2:	bf00      	nop
 8001eb4:	46020000 	.word	0x46020000
 8001eb8:	08008c00 	.word	0x08008c00
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0203 	and.w	r2, r3, #3
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69fa      	ldr	r2, [r7, #28]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	69fa      	ldr	r2, [r7, #28]
 8001eee:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d00b      	beq.n	8001f10 <HAL_GPIO_Init+0x1e4>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d007      	beq.n	8001f10 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f04:	2b11      	cmp	r3, #17
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b12      	cmp	r3, #18
 8001f0e:	d130      	bne.n	8001f72 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69fa      	ldr	r2, [r7, #28]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69fa      	ldr	r2, [r7, #28]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	69fa      	ldr	r2, [r7, #28]
 8001f3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001f46:	2201      	movs	r2, #1
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69fa      	ldr	r2, [r7, #28]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	091b      	lsrs	r3, r3, #4
 8001f5c:	f003 0201 	and.w	r2, r3, #1
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	69fa      	ldr	r2, [r7, #28]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	69fa      	ldr	r2, [r7, #28]
 8001f70:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d107      	bne.n	8001f8a <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d11b      	bne.n	8001fba <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d017      	beq.n	8001fba <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	2203      	movs	r2, #3
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69fa      	ldr	r2, [r7, #28]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d07c      	beq.n	80020c0 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001fc6:	4a47      	ldr	r2, [pc, #284]	@ (80020e4 <HAL_GPIO_Init+0x3b8>)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	089b      	lsrs	r3, r3, #2
 8001fcc:	3318      	adds	r3, #24
 8001fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	220f      	movs	r2, #15
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69fa      	ldr	r2, [r7, #28]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	0a9a      	lsrs	r2, r3, #10
 8001fee:	4b3e      	ldr	r3, [pc, #248]	@ (80020e8 <HAL_GPIO_Init+0x3bc>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	f002 0203 	and.w	r2, r2, #3
 8001ff8:	00d2      	lsls	r2, r2, #3
 8001ffa:	4093      	lsls	r3, r2
 8001ffc:	69fa      	ldr	r2, [r7, #28]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002002:	4938      	ldr	r1, [pc, #224]	@ (80020e4 <HAL_GPIO_Init+0x3b8>)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	3318      	adds	r3, #24
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002010:	4b34      	ldr	r3, [pc, #208]	@ (80020e4 <HAL_GPIO_Init+0x3b8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	43db      	mvns	r3, r3
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	4013      	ands	r3, r2
 800201e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 800202c:	69fa      	ldr	r2, [r7, #28]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4313      	orrs	r3, r2
 8002032:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002034:	4a2b      	ldr	r2, [pc, #172]	@ (80020e4 <HAL_GPIO_Init+0x3b8>)
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800203a:	4b2a      	ldr	r3, [pc, #168]	@ (80020e4 <HAL_GPIO_Init+0x3b8>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	43db      	mvns	r3, r3
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	4013      	ands	r3, r2
 8002048:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800205e:	4a21      	ldr	r2, [pc, #132]	@ (80020e4 <HAL_GPIO_Init+0x3b8>)
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002064:	4b1f      	ldr	r3, [pc, #124]	@ (80020e4 <HAL_GPIO_Init+0x3b8>)
 8002066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800206a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	43db      	mvns	r3, r3
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	4013      	ands	r3, r2
 8002074:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 8002082:	69fa      	ldr	r2, [r7, #28]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4313      	orrs	r3, r2
 8002088:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800208a:	4a16      	ldr	r2, [pc, #88]	@ (80020e4 <HAL_GPIO_Init+0x3b8>)
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002092:	4b14      	ldr	r3, [pc, #80]	@ (80020e4 <HAL_GPIO_Init+0x3b8>)
 8002094:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002098:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	43db      	mvns	r3, r3
 800209e:	69fa      	ldr	r2, [r7, #28]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 80020b0:	69fa      	ldr	r2, [r7, #28]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80020b8:	4a0a      	ldr	r2, [pc, #40]	@ (80020e4 <HAL_GPIO_Init+0x3b8>)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3301      	adds	r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f47f ae35 	bne.w	8001d40 <HAL_GPIO_Init+0x14>
  }
}
 80020d6:	bf00      	nop
 80020d8:	bf00      	nop
 80020da:	3724      	adds	r7, #36	@ 0x24
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	46022000 	.word	0x46022000
 80020e8:	002f7f7f 	.word	0x002f7f7f

080020ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	887b      	ldrh	r3, [r7, #2]
 80020fe:	4013      	ands	r3, r2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002104:	2301      	movs	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
 8002108:	e001      	b.n	800210e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 800210e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]
 8002128:	4613      	mov	r3, r2
 800212a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800212c:	787b      	ldrb	r3, [r7, #1]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002132:	887a      	ldrh	r2, [r7, #2]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002138:	e002      	b.n	8002140 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800213a:	887a      	ldrh	r2, [r7, #2]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800215e:	887a      	ldrh	r2, [r7, #2]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4013      	ands	r3, r2
 8002164:	041a      	lsls	r2, r3, #16
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	43d9      	mvns	r1, r3
 800216a:	887b      	ldrh	r3, [r7, #2]
 800216c:	400b      	ands	r3, r1
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	619a      	str	r2, [r3, #24]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800218c:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	e007      	b.n	80021ae <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800219e:	4b07      	ldr	r3, [pc, #28]	@ (80021bc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 0204 	bic.w	r2, r3, #4
 80021a6:	4905      	ldr	r1, [pc, #20]	@ (80021bc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]
  }

  return status;
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	40030400 	.word	0x40030400

080021c0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80021c4:	4b05      	ldr	r3, [pc, #20]	@ (80021dc <HAL_ICACHE_Enable+0x1c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a04      	ldr	r2, [pc, #16]	@ (80021dc <HAL_ICACHE_Enable+0x1c>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	40030400 	.word	0x40030400

080021e0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80021e8:	4b39      	ldr	r3, [pc, #228]	@ (80022d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021f0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d10b      	bne.n	8002212 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002200:	d905      	bls.n	800220e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002202:	4b33      	ldr	r3, [pc, #204]	@ (80022d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	4a32      	ldr	r2, [pc, #200]	@ (80022d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800220c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	e057      	b.n	80022c2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002218:	d90a      	bls.n	8002230 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800221a:	4b2d      	ldr	r3, [pc, #180]	@ (80022d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4313      	orrs	r3, r2
 8002226:	4a2a      	ldr	r2, [pc, #168]	@ (80022d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002228:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800222c:	60d3      	str	r3, [r2, #12]
 800222e:	e007      	b.n	8002240 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002230:	4b27      	ldr	r3, [pc, #156]	@ (80022d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002238:	4925      	ldr	r1, [pc, #148]	@ (80022d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4313      	orrs	r3, r2
 800223e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002240:	4b24      	ldr	r3, [pc, #144]	@ (80022d4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a24      	ldr	r2, [pc, #144]	@ (80022d8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	099b      	lsrs	r3, r3, #6
 800224c:	2232      	movs	r2, #50	@ 0x32
 800224e:	fb02 f303 	mul.w	r3, r2, r3
 8002252:	4a21      	ldr	r2, [pc, #132]	@ (80022d8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	099b      	lsrs	r3, r3, #6
 800225a:	3301      	adds	r3, #1
 800225c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800225e:	e002      	b.n	8002266 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	3b01      	subs	r3, #1
 8002264:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002266:	4b1a      	ldr	r3, [pc, #104]	@ (80022d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x98>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f3      	bne.n	8002260 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d01b      	beq.n	80022b6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800227e:	4b15      	ldr	r3, [pc, #84]	@ (80022d4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a15      	ldr	r2, [pc, #84]	@ (80022d8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002284:	fba2 2303 	umull	r2, r3, r2, r3
 8002288:	099b      	lsrs	r3, r3, #6
 800228a:	2232      	movs	r2, #50	@ 0x32
 800228c:	fb02 f303 	mul.w	r3, r2, r3
 8002290:	4a11      	ldr	r2, [pc, #68]	@ (80022d8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	099b      	lsrs	r3, r3, #6
 8002298:	3301      	adds	r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800229c:	e002      	b.n	80022a4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80022a4:	4b0a      	ldr	r3, [pc, #40]	@ (80022d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80022a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f3      	bne.n	800229e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e000      	b.n	80022c2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	46020800 	.word	0x46020800
 80022d4:	20000004 	.word	0x20000004
 80022d8:	10624dd3 	.word	0x10624dd3

080022dc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80022e0:	4b04      	ldr	r3, [pc, #16]	@ (80022f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80022e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	46020800 	.word	0x46020800

080022f8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002300:	4b22      	ldr	r3, [pc, #136]	@ (800238c <HAL_PWREx_ConfigSupply+0x94>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a22      	ldr	r2, [pc, #136]	@ (8002390 <HAL_PWREx_ConfigSupply+0x98>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	099b      	lsrs	r3, r3, #6
 800230c:	2232      	movs	r2, #50	@ 0x32
 800230e:	fb02 f303 	mul.w	r3, r2, r3
 8002312:	4a1f      	ldr	r2, [pc, #124]	@ (8002390 <HAL_PWREx_ConfigSupply+0x98>)
 8002314:	fba2 2303 	umull	r2, r3, r2, r3
 8002318:	099b      	lsrs	r3, r3, #6
 800231a:	3301      	adds	r3, #1
 800231c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d113      	bne.n	800234c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002324:	4b1b      	ldr	r3, [pc, #108]	@ (8002394 <HAL_PWREx_ConfigSupply+0x9c>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	4a1a      	ldr	r2, [pc, #104]	@ (8002394 <HAL_PWREx_ConfigSupply+0x9c>)
 800232a:	f023 0302 	bic.w	r3, r3, #2
 800232e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002330:	e002      	b.n	8002338 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	3b01      	subs	r3, #1
 8002336:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002338:	4b16      	ldr	r3, [pc, #88]	@ (8002394 <HAL_PWREx_ConfigSupply+0x9c>)
 800233a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b02      	cmp	r3, #2
 8002342:	d116      	bne.n	8002372 <HAL_PWREx_ConfigSupply+0x7a>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f3      	bne.n	8002332 <HAL_PWREx_ConfigSupply+0x3a>
 800234a:	e012      	b.n	8002372 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800234c:	4b11      	ldr	r3, [pc, #68]	@ (8002394 <HAL_PWREx_ConfigSupply+0x9c>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4a10      	ldr	r2, [pc, #64]	@ (8002394 <HAL_PWREx_ConfigSupply+0x9c>)
 8002352:	f043 0302 	orr.w	r3, r3, #2
 8002356:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002358:	e002      	b.n	8002360 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3b01      	subs	r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002360:	4b0c      	ldr	r3, [pc, #48]	@ (8002394 <HAL_PWREx_ConfigSupply+0x9c>)
 8002362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d102      	bne.n	8002372 <HAL_PWREx_ConfigSupply+0x7a>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f3      	bne.n	800235a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e000      	b.n	800237e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000004 	.word	0x20000004
 8002390:	10624dd3 	.word	0x10624dd3
 8002394:	46020800 	.word	0x46020800

08002398 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08e      	sub	sp, #56	@ 0x38
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80023a0:	2300      	movs	r3, #0
 80023a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d102      	bne.n	80023b2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	f000 bec8 	b.w	8003142 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b2:	4b99      	ldr	r3, [pc, #612]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023bc:	4b96      	ldr	r3, [pc, #600]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 80023be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 816c 	beq.w	80026ac <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80023d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d007      	beq.n	80023ea <HAL_RCC_OscConfig+0x52>
 80023da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023dc:	2b0c      	cmp	r3, #12
 80023de:	f040 80de 	bne.w	800259e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	f040 80da 	bne.w	800259e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d102      	bne.n	80023f8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	f000 bea5 	b.w	8003142 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023fc:	4b86      	ldr	r3, [pc, #536]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d004      	beq.n	8002412 <HAL_RCC_OscConfig+0x7a>
 8002408:	4b83      	ldr	r3, [pc, #524]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002410:	e005      	b.n	800241e <HAL_RCC_OscConfig+0x86>
 8002412:	4b81      	ldr	r3, [pc, #516]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 8002414:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002418:	041b      	lsls	r3, r3, #16
 800241a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800241e:	4293      	cmp	r3, r2
 8002420:	d255      	bcs.n	80024ce <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10a      	bne.n	800243e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242c:	4618      	mov	r0, r3
 800242e:	f001 f9d9 	bl	80037e4 <RCC_SetFlashLatencyFromMSIRange>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	f000 be82 	b.w	8003142 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800243e:	4b76      	ldr	r3, [pc, #472]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	4a75      	ldr	r2, [pc, #468]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 8002444:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002448:	6093      	str	r3, [r2, #8]
 800244a:	4b73      	ldr	r3, [pc, #460]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002456:	4970      	ldr	r1, [pc, #448]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 8002458:	4313      	orrs	r3, r2
 800245a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002460:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002464:	d309      	bcc.n	800247a <HAL_RCC_OscConfig+0xe2>
 8002466:	4b6c      	ldr	r3, [pc, #432]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f023 021f 	bic.w	r2, r3, #31
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	4969      	ldr	r1, [pc, #420]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 8002474:	4313      	orrs	r3, r2
 8002476:	60cb      	str	r3, [r1, #12]
 8002478:	e07e      	b.n	8002578 <HAL_RCC_OscConfig+0x1e0>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247e:	2b00      	cmp	r3, #0
 8002480:	da0a      	bge.n	8002498 <HAL_RCC_OscConfig+0x100>
 8002482:	4b65      	ldr	r3, [pc, #404]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	015b      	lsls	r3, r3, #5
 8002490:	4961      	ldr	r1, [pc, #388]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 8002492:	4313      	orrs	r3, r2
 8002494:	60cb      	str	r3, [r1, #12]
 8002496:	e06f      	b.n	8002578 <HAL_RCC_OscConfig+0x1e0>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024a0:	d30a      	bcc.n	80024b8 <HAL_RCC_OscConfig+0x120>
 80024a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	029b      	lsls	r3, r3, #10
 80024b0:	4959      	ldr	r1, [pc, #356]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60cb      	str	r3, [r1, #12]
 80024b6:	e05f      	b.n	8002578 <HAL_RCC_OscConfig+0x1e0>
 80024b8:	4b57      	ldr	r3, [pc, #348]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	03db      	lsls	r3, r3, #15
 80024c6:	4954      	ldr	r1, [pc, #336]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60cb      	str	r3, [r1, #12]
 80024cc:	e054      	b.n	8002578 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80024ce:	4b52      	ldr	r3, [pc, #328]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	4a51      	ldr	r2, [pc, #324]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 80024d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024d8:	6093      	str	r3, [r2, #8]
 80024da:	4b4f      	ldr	r3, [pc, #316]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e6:	494c      	ldr	r1, [pc, #304]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80024f4:	d309      	bcc.n	800250a <HAL_RCC_OscConfig+0x172>
 80024f6:	4b48      	ldr	r3, [pc, #288]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f023 021f 	bic.w	r2, r3, #31
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4945      	ldr	r1, [pc, #276]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 8002504:	4313      	orrs	r3, r2
 8002506:	60cb      	str	r3, [r1, #12]
 8002508:	e028      	b.n	800255c <HAL_RCC_OscConfig+0x1c4>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250e:	2b00      	cmp	r3, #0
 8002510:	da0a      	bge.n	8002528 <HAL_RCC_OscConfig+0x190>
 8002512:	4b41      	ldr	r3, [pc, #260]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	015b      	lsls	r3, r3, #5
 8002520:	493d      	ldr	r1, [pc, #244]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 8002522:	4313      	orrs	r3, r2
 8002524:	60cb      	str	r3, [r1, #12]
 8002526:	e019      	b.n	800255c <HAL_RCC_OscConfig+0x1c4>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002530:	d30a      	bcc.n	8002548 <HAL_RCC_OscConfig+0x1b0>
 8002532:	4b39      	ldr	r3, [pc, #228]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	029b      	lsls	r3, r3, #10
 8002540:	4935      	ldr	r1, [pc, #212]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 8002542:	4313      	orrs	r3, r2
 8002544:	60cb      	str	r3, [r1, #12]
 8002546:	e009      	b.n	800255c <HAL_RCC_OscConfig+0x1c4>
 8002548:	4b33      	ldr	r3, [pc, #204]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	03db      	lsls	r3, r3, #15
 8002556:	4930      	ldr	r1, [pc, #192]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 8002558:	4313      	orrs	r3, r2
 800255a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800255c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10a      	bne.n	8002578 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002566:	4618      	mov	r0, r3
 8002568:	f001 f93c 	bl	80037e4 <RCC_SetFlashLatencyFromMSIRange>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	f000 bde5 	b.w	8003142 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002578:	f001 f8de 	bl	8003738 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800257c:	4b27      	ldr	r3, [pc, #156]	@ (800261c <HAL_RCC_OscConfig+0x284>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff f8fd 	bl	8001780 <HAL_InitTick>
 8002586:	4603      	mov	r3, r0
 8002588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800258c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 808a 	beq.w	80026aa <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8002596:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800259a:	f000 bdd2 	b.w	8003142 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d066      	beq.n	8002674 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80025a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80025b2:	f7ff f96f 	bl	8001894 <HAL_GetTick>
 80025b6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80025b8:	e009      	b.n	80025ce <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025ba:	f7ff f96b 	bl	8001894 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d902      	bls.n	80025ce <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	f000 bdba 	b.w	8003142 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80025ce:	4b12      	ldr	r3, [pc, #72]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0ef      	beq.n	80025ba <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80025da:	4b0f      	ldr	r3, [pc, #60]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	4a0e      	ldr	r2, [pc, #56]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 80025e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025e4:	6093      	str	r3, [r2, #8]
 80025e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f2:	4909      	ldr	r1, [pc, #36]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002600:	d30e      	bcc.n	8002620 <HAL_RCC_OscConfig+0x288>
 8002602:	4b05      	ldr	r3, [pc, #20]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f023 021f 	bic.w	r2, r3, #31
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	4902      	ldr	r1, [pc, #8]	@ (8002618 <HAL_RCC_OscConfig+0x280>)
 8002610:	4313      	orrs	r3, r2
 8002612:	60cb      	str	r3, [r1, #12]
 8002614:	e04a      	b.n	80026ac <HAL_RCC_OscConfig+0x314>
 8002616:	bf00      	nop
 8002618:	46020c00 	.word	0x46020c00
 800261c:	2000001c 	.word	0x2000001c
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002624:	2b00      	cmp	r3, #0
 8002626:	da0a      	bge.n	800263e <HAL_RCC_OscConfig+0x2a6>
 8002628:	4b98      	ldr	r3, [pc, #608]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	015b      	lsls	r3, r3, #5
 8002636:	4995      	ldr	r1, [pc, #596]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 8002638:	4313      	orrs	r3, r2
 800263a:	60cb      	str	r3, [r1, #12]
 800263c:	e036      	b.n	80026ac <HAL_RCC_OscConfig+0x314>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002646:	d30a      	bcc.n	800265e <HAL_RCC_OscConfig+0x2c6>
 8002648:	4b90      	ldr	r3, [pc, #576]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	029b      	lsls	r3, r3, #10
 8002656:	498d      	ldr	r1, [pc, #564]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 8002658:	4313      	orrs	r3, r2
 800265a:	60cb      	str	r3, [r1, #12]
 800265c:	e026      	b.n	80026ac <HAL_RCC_OscConfig+0x314>
 800265e:	4b8b      	ldr	r3, [pc, #556]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	03db      	lsls	r3, r3, #15
 800266c:	4987      	ldr	r1, [pc, #540]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 800266e:	4313      	orrs	r3, r2
 8002670:	60cb      	str	r3, [r1, #12]
 8002672:	e01b      	b.n	80026ac <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002674:	4b85      	ldr	r3, [pc, #532]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a84      	ldr	r2, [pc, #528]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002680:	f7ff f908 	bl	8001894 <HAL_GetTick>
 8002684:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002686:	e009      	b.n	800269c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002688:	f7ff f904 	bl	8001894 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d902      	bls.n	800269c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	f000 bd53 	b.w	8003142 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800269c:	4b7b      	ldr	r3, [pc, #492]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1ef      	bne.n	8002688 <HAL_RCC_OscConfig+0x2f0>
 80026a8:	e000      	b.n	80026ac <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80026aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 808b 	beq.w	80027d0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80026ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d005      	beq.n	80026cc <HAL_RCC_OscConfig+0x334>
 80026c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c2:	2b0c      	cmp	r3, #12
 80026c4:	d109      	bne.n	80026da <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d106      	bne.n	80026da <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d17d      	bne.n	80027d0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	f000 bd34 	b.w	8003142 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026e2:	d106      	bne.n	80026f2 <HAL_RCC_OscConfig+0x35a>
 80026e4:	4b69      	ldr	r3, [pc, #420]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a68      	ldr	r2, [pc, #416]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 80026ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	e041      	b.n	8002776 <HAL_RCC_OscConfig+0x3de>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026fa:	d112      	bne.n	8002722 <HAL_RCC_OscConfig+0x38a>
 80026fc:	4b63      	ldr	r3, [pc, #396]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a62      	ldr	r2, [pc, #392]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 8002702:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	4b60      	ldr	r3, [pc, #384]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a5f      	ldr	r2, [pc, #380]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 800270e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	4b5d      	ldr	r3, [pc, #372]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a5c      	ldr	r2, [pc, #368]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 800271a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	e029      	b.n	8002776 <HAL_RCC_OscConfig+0x3de>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800272a:	d112      	bne.n	8002752 <HAL_RCC_OscConfig+0x3ba>
 800272c:	4b57      	ldr	r3, [pc, #348]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a56      	ldr	r2, [pc, #344]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 8002732:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	4b54      	ldr	r3, [pc, #336]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a53      	ldr	r2, [pc, #332]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 800273e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	4b51      	ldr	r3, [pc, #324]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a50      	ldr	r2, [pc, #320]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 800274a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	e011      	b.n	8002776 <HAL_RCC_OscConfig+0x3de>
 8002752:	4b4e      	ldr	r3, [pc, #312]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a4d      	ldr	r2, [pc, #308]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 8002758:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	4b4b      	ldr	r3, [pc, #300]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a4a      	ldr	r2, [pc, #296]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 8002764:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b48      	ldr	r3, [pc, #288]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a47      	ldr	r2, [pc, #284]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 8002770:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002774:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d014      	beq.n	80027a8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800277e:	f7ff f889 	bl	8001894 <HAL_GetTick>
 8002782:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002784:	e009      	b.n	800279a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002786:	f7ff f885 	bl	8001894 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b64      	cmp	r3, #100	@ 0x64
 8002792:	d902      	bls.n	800279a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	f000 bcd4 	b.w	8003142 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800279a:	4b3c      	ldr	r3, [pc, #240]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0ef      	beq.n	8002786 <HAL_RCC_OscConfig+0x3ee>
 80027a6:	e013      	b.n	80027d0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80027a8:	f7ff f874 	bl	8001894 <HAL_GetTick>
 80027ac:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ae:	e009      	b.n	80027c4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b0:	f7ff f870 	bl	8001894 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	@ 0x64
 80027bc:	d902      	bls.n	80027c4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	f000 bcbf 	b.w	8003142 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027c4:	4b31      	ldr	r3, [pc, #196]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1ef      	bne.n	80027b0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d05f      	beq.n	800289c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80027dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d005      	beq.n	80027ee <HAL_RCC_OscConfig+0x456>
 80027e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e4:	2b0c      	cmp	r3, #12
 80027e6:	d114      	bne.n	8002812 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d111      	bne.n	8002812 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d102      	bne.n	80027fc <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	f000 bca3 	b.w	8003142 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80027fc:	4b23      	ldr	r3, [pc, #140]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	041b      	lsls	r3, r3, #16
 800280a:	4920      	ldr	r1, [pc, #128]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 800280c:	4313      	orrs	r3, r2
 800280e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002810:	e044      	b.n	800289c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d024      	beq.n	8002864 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800281a:	4b1c      	ldr	r3, [pc, #112]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a1b      	ldr	r2, [pc, #108]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 8002820:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002824:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002826:	f7ff f835 	bl	8001894 <HAL_GetTick>
 800282a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800282c:	e009      	b.n	8002842 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282e:	f7ff f831 	bl	8001894 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d902      	bls.n	8002842 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	f000 bc80 	b.w	8003142 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002842:	4b12      	ldr	r3, [pc, #72]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0ef      	beq.n	800282e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800284e:	4b0f      	ldr	r3, [pc, #60]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	041b      	lsls	r3, r3, #16
 800285c:	490b      	ldr	r1, [pc, #44]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 800285e:	4313      	orrs	r3, r2
 8002860:	610b      	str	r3, [r1, #16]
 8002862:	e01b      	b.n	800289c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002864:	4b09      	ldr	r3, [pc, #36]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a08      	ldr	r2, [pc, #32]	@ (800288c <HAL_RCC_OscConfig+0x4f4>)
 800286a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800286e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002870:	f7ff f810 	bl	8001894 <HAL_GetTick>
 8002874:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002876:	e00b      	b.n	8002890 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002878:	f7ff f80c 	bl	8001894 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d904      	bls.n	8002890 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	f000 bc5b 	b.w	8003142 <HAL_RCC_OscConfig+0xdaa>
 800288c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002890:	4baf      	ldr	r3, [pc, #700]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1ed      	bne.n	8002878 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80c8 	beq.w	8002a3a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b0:	4ba7      	ldr	r3, [pc, #668]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 80028b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d111      	bne.n	80028e2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028be:	4ba4      	ldr	r3, [pc, #656]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 80028c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028c4:	4aa2      	ldr	r2, [pc, #648]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 80028c6:	f043 0304 	orr.w	r3, r3, #4
 80028ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80028ce:	4ba0      	ldr	r3, [pc, #640]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 80028d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80028dc:	2301      	movs	r3, #1
 80028de:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80028e2:	4b9c      	ldr	r3, [pc, #624]	@ (8002b54 <HAL_RCC_OscConfig+0x7bc>)
 80028e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d119      	bne.n	8002922 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80028ee:	4b99      	ldr	r3, [pc, #612]	@ (8002b54 <HAL_RCC_OscConfig+0x7bc>)
 80028f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f2:	4a98      	ldr	r2, [pc, #608]	@ (8002b54 <HAL_RCC_OscConfig+0x7bc>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028fa:	f7fe ffcb 	bl	8001894 <HAL_GetTick>
 80028fe:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002900:	e009      	b.n	8002916 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002902:	f7fe ffc7 	bl	8001894 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d902      	bls.n	8002916 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	f000 bc16 	b.w	8003142 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002916:	4b8f      	ldr	r3, [pc, #572]	@ (8002b54 <HAL_RCC_OscConfig+0x7bc>)
 8002918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0ef      	beq.n	8002902 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d05f      	beq.n	80029ea <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800292a:	4b89      	ldr	r3, [pc, #548]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 800292c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002930:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293c:	429a      	cmp	r2, r3
 800293e:	d037      	beq.n	80029b0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d006      	beq.n	8002958 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e3f4      	b.n	8003142 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d01b      	beq.n	800299a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002962:	4b7b      	ldr	r3, [pc, #492]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 8002964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002968:	4a79      	ldr	r2, [pc, #484]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 800296a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800296e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8002972:	f7fe ff8f 	bl	8001894 <HAL_GetTick>
 8002976:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800297a:	f7fe ff8b 	bl	8001894 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b05      	cmp	r3, #5
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e3da      	b.n	8003142 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800298c:	4b70      	ldr	r3, [pc, #448]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 800298e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002992:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1ef      	bne.n	800297a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800299a:	4b6d      	ldr	r3, [pc, #436]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 800299c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029a0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	4969      	ldr	r1, [pc, #420]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80029b0:	4b67      	ldr	r3, [pc, #412]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 80029b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029b6:	4a66      	ldr	r2, [pc, #408]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 80029b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80029bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80029c0:	f7fe ff68 	bl	8001894 <HAL_GetTick>
 80029c4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c8:	f7fe ff64 	bl	8001894 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b05      	cmp	r3, #5
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e3b3      	b.n	8003142 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80029da:	4b5d      	ldr	r3, [pc, #372]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 80029dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0ef      	beq.n	80029c8 <HAL_RCC_OscConfig+0x630>
 80029e8:	e01b      	b.n	8002a22 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80029ea:	4b59      	ldr	r3, [pc, #356]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 80029ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029f0:	4a57      	ldr	r2, [pc, #348]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 80029f2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80029f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80029fa:	f7fe ff4b 	bl	8001894 <HAL_GetTick>
 80029fe:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a02:	f7fe ff47 	bl	8001894 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e396      	b.n	8003142 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002a14:	4b4e      	ldr	r3, [pc, #312]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 8002a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1ef      	bne.n	8002a02 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a22:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d107      	bne.n	8002a3a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2a:	4b49      	ldr	r3, [pc, #292]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 8002a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a30:	4a47      	ldr	r2, [pc, #284]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 8002a32:	f023 0304 	bic.w	r3, r3, #4
 8002a36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 8111 	beq.w	8002c6a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a4e:	4b40      	ldr	r3, [pc, #256]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 8002a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d111      	bne.n	8002a80 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a5c:	4b3c      	ldr	r3, [pc, #240]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 8002a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a62:	4a3b      	ldr	r2, [pc, #236]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 8002a64:	f043 0304 	orr.w	r3, r3, #4
 8002a68:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002a6c:	4b38      	ldr	r3, [pc, #224]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 8002a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a80:	4b34      	ldr	r3, [pc, #208]	@ (8002b54 <HAL_RCC_OscConfig+0x7bc>)
 8002a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d118      	bne.n	8002abe <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002a8c:	4b31      	ldr	r3, [pc, #196]	@ (8002b54 <HAL_RCC_OscConfig+0x7bc>)
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a90:	4a30      	ldr	r2, [pc, #192]	@ (8002b54 <HAL_RCC_OscConfig+0x7bc>)
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a98:	f7fe fefc 	bl	8001894 <HAL_GetTick>
 8002a9c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa0:	f7fe fef8 	bl	8001894 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e347      	b.n	8003142 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002ab2:	4b28      	ldr	r3, [pc, #160]	@ (8002b54 <HAL_RCC_OscConfig+0x7bc>)
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d01f      	beq.n	8002b0a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d010      	beq.n	8002af8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 8002ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002adc:	4a1c      	ldr	r2, [pc, #112]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 8002ade:	f043 0304 	orr.w	r3, r3, #4
 8002ae2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 8002ae8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002aec:	4a18      	ldr	r2, [pc, #96]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002af6:	e018      	b.n	8002b2a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002af8:	4b15      	ldr	r3, [pc, #84]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 8002afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002afe:	4a14      	ldr	r2, [pc, #80]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b08:	e00f      	b.n	8002b2a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b0a:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 8002b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b10:	4a0f      	ldr	r2, [pc, #60]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 8002b1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b20:	4a0b      	ldr	r2, [pc, #44]	@ (8002b50 <HAL_RCC_OscConfig+0x7b8>)
 8002b22:	f023 0304 	bic.w	r3, r3, #4
 8002b26:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d057      	beq.n	8002be2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002b32:	f7fe feaf 	bl	8001894 <HAL_GetTick>
 8002b36:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b38:	e00e      	b.n	8002b58 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3a:	f7fe feab 	bl	8001894 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d905      	bls.n	8002b58 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e2f8      	b.n	8003142 <HAL_RCC_OscConfig+0xdaa>
 8002b50:	46020c00 	.word	0x46020c00
 8002b54:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b58:	4b9c      	ldr	r3, [pc, #624]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002b5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0e9      	beq.n	8002b3a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d01b      	beq.n	8002baa <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b72:	4b96      	ldr	r3, [pc, #600]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002b74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b78:	4a94      	ldr	r2, [pc, #592]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002b82:	e00a      	b.n	8002b9a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b84:	f7fe fe86 	bl	8001894 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e2d3      	b.n	8003142 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002b9a:	4b8c      	ldr	r3, [pc, #560]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002b9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ba0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0ed      	beq.n	8002b84 <HAL_RCC_OscConfig+0x7ec>
 8002ba8:	e053      	b.n	8002c52 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002baa:	4b88      	ldr	r3, [pc, #544]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002bac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bb0:	4a86      	ldr	r2, [pc, #536]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002bb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bbc:	f7fe fe6a 	bl	8001894 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e2b7      	b.n	8003142 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002bd2:	4b7e      	ldr	r3, [pc, #504]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1ed      	bne.n	8002bbc <HAL_RCC_OscConfig+0x824>
 8002be0:	e037      	b.n	8002c52 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002be2:	f7fe fe57 	bl	8001894 <HAL_GetTick>
 8002be6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002be8:	e00a      	b.n	8002c00 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bea:	f7fe fe53 	bl	8001894 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e2a0      	b.n	8003142 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c00:	4b72      	ldr	r3, [pc, #456]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002c02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1ed      	bne.n	8002bea <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002c0e:	4b6f      	ldr	r3, [pc, #444]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002c10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d01a      	beq.n	8002c52 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002c1c:	4b6b      	ldr	r3, [pc, #428]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002c1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c22:	4a6a      	ldr	r2, [pc, #424]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002c24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c2c:	e00a      	b.n	8002c44 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2e:	f7fe fe31 	bl	8001894 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e27e      	b.n	8003142 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c44:	4b61      	ldr	r3, [pc, #388]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002c46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1ed      	bne.n	8002c2e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c52:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d107      	bne.n	8002c6a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c5a:	4b5c      	ldr	r3, [pc, #368]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c60:	4a5a      	ldr	r2, [pc, #360]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002c62:	f023 0304 	bic.w	r3, r3, #4
 8002c66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d036      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d019      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002c7e:	4b53      	ldr	r3, [pc, #332]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a52      	ldr	r2, [pc, #328]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002c84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c88:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002c8a:	f7fe fe03 	bl	8001894 <HAL_GetTick>
 8002c8e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c92:	f7fe fdff 	bl	8001894 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e24e      	b.n	8003142 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002ca4:	4b49      	ldr	r3, [pc, #292]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x8fa>
 8002cb0:	e018      	b.n	8002ce4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002cb2:	4b46      	ldr	r3, [pc, #280]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a45      	ldr	r2, [pc, #276]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002cb8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cbc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002cbe:	f7fe fde9 	bl	8001894 <HAL_GetTick>
 8002cc2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cc6:	f7fe fde5 	bl	8001894 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e234      	b.n	8003142 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002cd8:	4b3c      	ldr	r3, [pc, #240]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1f0      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d036      	beq.n	8002d5e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d019      	beq.n	8002d2c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002cf8:	4b34      	ldr	r3, [pc, #208]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a33      	ldr	r2, [pc, #204]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002cfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d02:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002d04:	f7fe fdc6 	bl	8001894 <HAL_GetTick>
 8002d08:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002d0c:	f7fe fdc2 	bl	8001894 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e211      	b.n	8003142 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002d1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x974>
 8002d2a:	e018      	b.n	8002d5e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002d2c:	4b27      	ldr	r3, [pc, #156]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a26      	ldr	r2, [pc, #152]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002d32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d36:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002d38:	f7fe fdac 	bl	8001894 <HAL_GetTick>
 8002d3c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002d40:	f7fe fda8 	bl	8001894 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e1f7      	b.n	8003142 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002d52:	4b1e      	ldr	r3, [pc, #120]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d07f      	beq.n	8002e6a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d062      	beq.n	8002e38 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002d72:	4b16      	ldr	r3, [pc, #88]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	4a15      	ldr	r2, [pc, #84]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002d78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d7c:	6093      	str	r3, [r2, #8]
 8002d7e:	4b13      	ldr	r3, [pc, #76]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8a:	4910      	ldr	r1, [pc, #64]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002d98:	d309      	bcc.n	8002dae <HAL_RCC_OscConfig+0xa16>
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f023 021f 	bic.w	r2, r3, #31
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	4909      	ldr	r1, [pc, #36]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60cb      	str	r3, [r1, #12]
 8002dac:	e02a      	b.n	8002e04 <HAL_RCC_OscConfig+0xa6c>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	da0c      	bge.n	8002dd0 <HAL_RCC_OscConfig+0xa38>
 8002db6:	4b05      	ldr	r3, [pc, #20]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	015b      	lsls	r3, r3, #5
 8002dc4:	4901      	ldr	r1, [pc, #4]	@ (8002dcc <HAL_RCC_OscConfig+0xa34>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60cb      	str	r3, [r1, #12]
 8002dca:	e01b      	b.n	8002e04 <HAL_RCC_OscConfig+0xa6c>
 8002dcc:	46020c00 	.word	0x46020c00
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dd8:	d30a      	bcc.n	8002df0 <HAL_RCC_OscConfig+0xa58>
 8002dda:	4ba1      	ldr	r3, [pc, #644]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	029b      	lsls	r3, r3, #10
 8002de8:	499d      	ldr	r1, [pc, #628]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60cb      	str	r3, [r1, #12]
 8002dee:	e009      	b.n	8002e04 <HAL_RCC_OscConfig+0xa6c>
 8002df0:	4b9b      	ldr	r3, [pc, #620]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	03db      	lsls	r3, r3, #15
 8002dfe:	4998      	ldr	r1, [pc, #608]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002e04:	4b96      	ldr	r3, [pc, #600]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a95      	ldr	r2, [pc, #596]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002e0a:	f043 0310 	orr.w	r3, r3, #16
 8002e0e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002e10:	f7fe fd40 	bl	8001894 <HAL_GetTick>
 8002e14:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002e18:	f7fe fd3c 	bl	8001894 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e18b      	b.n	8003142 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002e2a:	4b8d      	ldr	r3, [pc, #564]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0xa80>
 8002e36:	e018      	b.n	8002e6a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002e38:	4b89      	ldr	r3, [pc, #548]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a88      	ldr	r2, [pc, #544]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002e3e:	f023 0310 	bic.w	r3, r3, #16
 8002e42:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002e44:	f7fe fd26 	bl	8001894 <HAL_GetTick>
 8002e48:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002e4c:	f7fe fd22 	bl	8001894 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e171      	b.n	8003142 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002e5e:	4b80      	ldr	r3, [pc, #512]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 8166 	beq.w	8003140 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002e74:	2300      	movs	r3, #0
 8002e76:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e7a:	4b79      	ldr	r3, [pc, #484]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b0c      	cmp	r3, #12
 8002e84:	f000 80f2 	beq.w	800306c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	f040 80c5 	bne.w	800301c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002e92:	4b73      	ldr	r3, [pc, #460]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a72      	ldr	r2, [pc, #456]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002e98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e9c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002e9e:	f7fe fcf9 	bl	8001894 <HAL_GetTick>
 8002ea2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea6:	f7fe fcf5 	bl	8001894 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e144      	b.n	8003142 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002eb8:	4b69      	ldr	r3, [pc, #420]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f0      	bne.n	8002ea6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ec4:	4b66      	ldr	r3, [pc, #408]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d111      	bne.n	8002ef6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002ed2:	4b63      	ldr	r3, [pc, #396]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ed8:	4a61      	ldr	r2, [pc, #388]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002eda:	f043 0304 	orr.w	r3, r3, #4
 8002ede:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002ee2:	4b5f      	ldr	r3, [pc, #380]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002ef6:	4b5b      	ldr	r3, [pc, #364]	@ (8003064 <HAL_RCC_OscConfig+0xccc>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002efe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f02:	d102      	bne.n	8002f0a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002f0a:	4b56      	ldr	r3, [pc, #344]	@ (8003064 <HAL_RCC_OscConfig+0xccc>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	4a55      	ldr	r2, [pc, #340]	@ (8003064 <HAL_RCC_OscConfig+0xccc>)
 8002f10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f14:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002f16:	4b52      	ldr	r3, [pc, #328]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f1e:	f023 0303 	bic.w	r3, r3, #3
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f2a:	3a01      	subs	r2, #1
 8002f2c:	0212      	lsls	r2, r2, #8
 8002f2e:	4311      	orrs	r1, r2
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002f34:	430a      	orrs	r2, r1
 8002f36:	494a      	ldr	r1, [pc, #296]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	628b      	str	r3, [r1, #40]	@ 0x28
 8002f3c:	4b48      	ldr	r3, [pc, #288]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002f3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f40:	4b49      	ldr	r3, [pc, #292]	@ (8003068 <HAL_RCC_OscConfig+0xcd0>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f48:	3a01      	subs	r2, #1
 8002f4a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f52:	3a01      	subs	r2, #1
 8002f54:	0252      	lsls	r2, r2, #9
 8002f56:	b292      	uxth	r2, r2
 8002f58:	4311      	orrs	r1, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f5e:	3a01      	subs	r2, #1
 8002f60:	0412      	lsls	r2, r2, #16
 8002f62:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002f66:	4311      	orrs	r1, r2
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002f6c:	3a01      	subs	r2, #1
 8002f6e:	0612      	lsls	r2, r2, #24
 8002f70:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002f74:	430a      	orrs	r2, r1
 8002f76:	493a      	ldr	r1, [pc, #232]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002f7c:	4b38      	ldr	r3, [pc, #224]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f80:	4a37      	ldr	r2, [pc, #220]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002f82:	f023 0310 	bic.w	r3, r3, #16
 8002f86:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8c:	4a34      	ldr	r2, [pc, #208]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002f92:	4b33      	ldr	r3, [pc, #204]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f96:	4a32      	ldr	r2, [pc, #200]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002f98:	f043 0310 	orr.w	r3, r3, #16
 8002f9c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002f9e:	4b30      	ldr	r3, [pc, #192]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa2:	f023 020c 	bic.w	r2, r3, #12
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002faa:	492d      	ldr	r1, [pc, #180]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8002fb0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d105      	bne.n	8002fc4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002fb8:	4b2a      	ldr	r3, [pc, #168]	@ (8003064 <HAL_RCC_OscConfig+0xccc>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4a29      	ldr	r2, [pc, #164]	@ (8003064 <HAL_RCC_OscConfig+0xccc>)
 8002fbe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fc2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002fc4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d107      	bne.n	8002fdc <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002fcc:	4b24      	ldr	r3, [pc, #144]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fd2:	4a23      	ldr	r2, [pc, #140]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002fd4:	f023 0304 	bic.w	r3, r3, #4
 8002fd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002fdc:	4b20      	ldr	r3, [pc, #128]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8002fe2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fe6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002fe8:	f7fe fc54 	bl	8001894 <HAL_GetTick>
 8002fec:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7fe fc50 	bl	8001894 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e09f      	b.n	8003142 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003002:	4b17      	ldr	r3, [pc, #92]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800300e:	4b14      	ldr	r3, [pc, #80]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8003010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003012:	4a13      	ldr	r2, [pc, #76]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8003014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003018:	6293      	str	r3, [r2, #40]	@ 0x28
 800301a:	e091      	b.n	8003140 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800301c:	4b10      	ldr	r3, [pc, #64]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a0f      	ldr	r2, [pc, #60]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8003022:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003026:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003028:	f7fe fc34 	bl	8001894 <HAL_GetTick>
 800302c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003030:	f7fe fc30 	bl	8001894 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e07f      	b.n	8003142 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003042:	4b07      	ldr	r3, [pc, #28]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800304e:	4b04      	ldr	r3, [pc, #16]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8003050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003052:	4a03      	ldr	r2, [pc, #12]	@ (8003060 <HAL_RCC_OscConfig+0xcc8>)
 8003054:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003058:	f023 0303 	bic.w	r3, r3, #3
 800305c:	6293      	str	r3, [r2, #40]	@ 0x28
 800305e:	e06f      	b.n	8003140 <HAL_RCC_OscConfig+0xda8>
 8003060:	46020c00 	.word	0x46020c00
 8003064:	46020800 	.word	0x46020800
 8003068:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800306c:	4b37      	ldr	r3, [pc, #220]	@ (800314c <HAL_RCC_OscConfig+0xdb4>)
 800306e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003070:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003072:	4b36      	ldr	r3, [pc, #216]	@ (800314c <HAL_RCC_OscConfig+0xdb4>)
 8003074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003076:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307c:	2b01      	cmp	r3, #1
 800307e:	d039      	beq.n	80030f4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f003 0203 	and.w	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800308a:	429a      	cmp	r2, r3
 800308c:	d132      	bne.n	80030f4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	0a1b      	lsrs	r3, r3, #8
 8003092:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800309c:	429a      	cmp	r2, r3
 800309e:	d129      	bne.n	80030f4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d122      	bne.n	80030f4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030b8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d11a      	bne.n	80030f4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	0a5b      	lsrs	r3, r3, #9
 80030c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d111      	bne.n	80030f4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	0c1b      	lsrs	r3, r3, #16
 80030d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030dc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030de:	429a      	cmp	r2, r3
 80030e0:	d108      	bne.n	80030f4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	0e1b      	lsrs	r3, r3, #24
 80030e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ee:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e024      	b.n	8003142 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80030f8:	4b14      	ldr	r3, [pc, #80]	@ (800314c <HAL_RCC_OscConfig+0xdb4>)
 80030fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030fc:	08db      	lsrs	r3, r3, #3
 80030fe:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003106:	429a      	cmp	r2, r3
 8003108:	d01a      	beq.n	8003140 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800310a:	4b10      	ldr	r3, [pc, #64]	@ (800314c <HAL_RCC_OscConfig+0xdb4>)
 800310c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310e:	4a0f      	ldr	r2, [pc, #60]	@ (800314c <HAL_RCC_OscConfig+0xdb4>)
 8003110:	f023 0310 	bic.w	r3, r3, #16
 8003114:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003116:	f7fe fbbd 	bl	8001894 <HAL_GetTick>
 800311a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800311c:	bf00      	nop
 800311e:	f7fe fbb9 	bl	8001894 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003126:	4293      	cmp	r3, r2
 8003128:	d0f9      	beq.n	800311e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312e:	4a07      	ldr	r2, [pc, #28]	@ (800314c <HAL_RCC_OscConfig+0xdb4>)
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003134:	4b05      	ldr	r3, [pc, #20]	@ (800314c <HAL_RCC_OscConfig+0xdb4>)
 8003136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003138:	4a04      	ldr	r2, [pc, #16]	@ (800314c <HAL_RCC_OscConfig+0xdb4>)
 800313a:	f043 0310 	orr.w	r3, r3, #16
 800313e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3738      	adds	r7, #56	@ 0x38
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	46020c00 	.word	0x46020c00

08003150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e1d9      	b.n	8003518 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003164:	4b9b      	ldr	r3, [pc, #620]	@ (80033d4 <HAL_RCC_ClockConfig+0x284>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d910      	bls.n	8003194 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b98      	ldr	r3, [pc, #608]	@ (80033d4 <HAL_RCC_ClockConfig+0x284>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 020f 	bic.w	r2, r3, #15
 800317a:	4996      	ldr	r1, [pc, #600]	@ (80033d4 <HAL_RCC_ClockConfig+0x284>)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b94      	ldr	r3, [pc, #592]	@ (80033d4 <HAL_RCC_ClockConfig+0x284>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e1c1      	b.n	8003518 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	2b00      	cmp	r3, #0
 800319e:	d010      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	695a      	ldr	r2, [r3, #20]
 80031a4:	4b8c      	ldr	r3, [pc, #560]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d908      	bls.n	80031c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80031b0:	4b89      	ldr	r3, [pc, #548]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 80031b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	4986      	ldr	r1, [pc, #536]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d012      	beq.n	80031f4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691a      	ldr	r2, [r3, #16]
 80031d2:	4b81      	ldr	r3, [pc, #516]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	091b      	lsrs	r3, r3, #4
 80031d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031dc:	429a      	cmp	r2, r3
 80031de:	d909      	bls.n	80031f4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80031e0:	4b7d      	ldr	r3, [pc, #500]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	497a      	ldr	r1, [pc, #488]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d010      	beq.n	8003222 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	4b74      	ldr	r3, [pc, #464]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800320c:	429a      	cmp	r2, r3
 800320e:	d908      	bls.n	8003222 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003210:	4b71      	ldr	r3, [pc, #452]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	496e      	ldr	r1, [pc, #440]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 800321e:	4313      	orrs	r3, r2
 8003220:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d010      	beq.n	8003250 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	4b69      	ldr	r3, [pc, #420]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	429a      	cmp	r2, r3
 800323c:	d908      	bls.n	8003250 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800323e:	4b66      	ldr	r3, [pc, #408]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	f023 020f 	bic.w	r2, r3, #15
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	4963      	ldr	r1, [pc, #396]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 800324c:	4313      	orrs	r3, r2
 800324e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 80d2 	beq.w	8003402 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800325e:	2300      	movs	r3, #0
 8003260:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b03      	cmp	r3, #3
 8003268:	d143      	bne.n	80032f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800326a:	4b5b      	ldr	r3, [pc, #364]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 800326c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d110      	bne.n	800329a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003278:	4b57      	ldr	r3, [pc, #348]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 800327a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800327e:	4a56      	ldr	r2, [pc, #344]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 8003280:	f043 0304 	orr.w	r3, r3, #4
 8003284:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003288:	4b53      	ldr	r3, [pc, #332]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 800328a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003296:	2301      	movs	r3, #1
 8003298:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800329a:	f7fe fafb 	bl	8001894 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80032a0:	4b4e      	ldr	r3, [pc, #312]	@ (80033dc <HAL_RCC_ClockConfig+0x28c>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00f      	beq.n	80032cc <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80032ae:	f7fe faf1 	bl	8001894 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e12b      	b.n	8003518 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80032c0:	4b46      	ldr	r3, [pc, #280]	@ (80033dc <HAL_RCC_ClockConfig+0x28c>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d107      	bne.n	80032e2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80032d2:	4b41      	ldr	r3, [pc, #260]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 80032d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032d8:	4a3f      	ldr	r2, [pc, #252]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 80032da:	f023 0304 	bic.w	r3, r3, #4
 80032de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80032e2:	4b3d      	ldr	r3, [pc, #244]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d121      	bne.n	8003332 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e112      	b.n	8003518 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d107      	bne.n	800330a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032fa:	4b37      	ldr	r3, [pc, #220]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d115      	bne.n	8003332 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e106      	b.n	8003518 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d107      	bne.n	8003322 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003312:	4b31      	ldr	r3, [pc, #196]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e0fa      	b.n	8003518 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003322:	4b2d      	ldr	r3, [pc, #180]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e0f2      	b.n	8003518 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8003332:	4b29      	ldr	r3, [pc, #164]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f023 0203 	bic.w	r2, r3, #3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4926      	ldr	r1, [pc, #152]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 8003340:	4313      	orrs	r3, r2
 8003342:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003344:	f7fe faa6 	bl	8001894 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b03      	cmp	r3, #3
 8003350:	d112      	bne.n	8003378 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003352:	e00a      	b.n	800336a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003354:	f7fe fa9e 	bl	8001894 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e0d6      	b.n	8003518 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800336a:	4b1b      	ldr	r3, [pc, #108]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	2b0c      	cmp	r3, #12
 8003374:	d1ee      	bne.n	8003354 <HAL_RCC_ClockConfig+0x204>
 8003376:	e044      	b.n	8003402 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b02      	cmp	r3, #2
 800337e:	d112      	bne.n	80033a6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003380:	e00a      	b.n	8003398 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003382:	f7fe fa87 	bl	8001894 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e0bf      	b.n	8003518 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003398:	4b0f      	ldr	r3, [pc, #60]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d1ee      	bne.n	8003382 <HAL_RCC_ClockConfig+0x232>
 80033a4:	e02d      	b.n	8003402 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d123      	bne.n	80033f6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80033ae:	e00a      	b.n	80033c6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b0:	f7fe fa70 	bl	8001894 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e0a8      	b.n	8003518 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80033c6:	4b04      	ldr	r3, [pc, #16]	@ (80033d8 <HAL_RCC_ClockConfig+0x288>)
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1ee      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x260>
 80033d2:	e016      	b.n	8003402 <HAL_RCC_ClockConfig+0x2b2>
 80033d4:	40022000 	.word	0x40022000
 80033d8:	46020c00 	.word	0x46020c00
 80033dc:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e0:	f7fe fa58 	bl	8001894 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e090      	b.n	8003518 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003520 <HAL_RCC_ClockConfig+0x3d0>)
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d1ee      	bne.n	80033e0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d010      	beq.n	8003430 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	4b43      	ldr	r3, [pc, #268]	@ (8003520 <HAL_RCC_ClockConfig+0x3d0>)
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	429a      	cmp	r2, r3
 800341c:	d208      	bcs.n	8003430 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800341e:	4b40      	ldr	r3, [pc, #256]	@ (8003520 <HAL_RCC_ClockConfig+0x3d0>)
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	f023 020f 	bic.w	r2, r3, #15
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	493d      	ldr	r1, [pc, #244]	@ (8003520 <HAL_RCC_ClockConfig+0x3d0>)
 800342c:	4313      	orrs	r3, r2
 800342e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003430:	4b3c      	ldr	r3, [pc, #240]	@ (8003524 <HAL_RCC_ClockConfig+0x3d4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d210      	bcs.n	8003460 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343e:	4b39      	ldr	r3, [pc, #228]	@ (8003524 <HAL_RCC_ClockConfig+0x3d4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 020f 	bic.w	r2, r3, #15
 8003446:	4937      	ldr	r1, [pc, #220]	@ (8003524 <HAL_RCC_ClockConfig+0x3d4>)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800344e:	4b35      	ldr	r3, [pc, #212]	@ (8003524 <HAL_RCC_ClockConfig+0x3d4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d001      	beq.n	8003460 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e05b      	b.n	8003518 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d010      	beq.n	800348e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	4b2b      	ldr	r3, [pc, #172]	@ (8003520 <HAL_RCC_ClockConfig+0x3d0>)
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003478:	429a      	cmp	r2, r3
 800347a:	d208      	bcs.n	800348e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800347c:	4b28      	ldr	r3, [pc, #160]	@ (8003520 <HAL_RCC_ClockConfig+0x3d0>)
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4925      	ldr	r1, [pc, #148]	@ (8003520 <HAL_RCC_ClockConfig+0x3d0>)
 800348a:	4313      	orrs	r3, r2
 800348c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d012      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691a      	ldr	r2, [r3, #16]
 800349e:	4b20      	ldr	r3, [pc, #128]	@ (8003520 <HAL_RCC_ClockConfig+0x3d0>)
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	091b      	lsrs	r3, r3, #4
 80034a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d209      	bcs.n	80034c0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80034ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003520 <HAL_RCC_ClockConfig+0x3d0>)
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	4919      	ldr	r1, [pc, #100]	@ (8003520 <HAL_RCC_ClockConfig+0x3d0>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d010      	beq.n	80034ee <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	695a      	ldr	r2, [r3, #20]
 80034d0:	4b13      	ldr	r3, [pc, #76]	@ (8003520 <HAL_RCC_ClockConfig+0x3d0>)
 80034d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034d8:	429a      	cmp	r2, r3
 80034da:	d208      	bcs.n	80034ee <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80034dc:	4b10      	ldr	r3, [pc, #64]	@ (8003520 <HAL_RCC_ClockConfig+0x3d0>)
 80034de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	490d      	ldr	r1, [pc, #52]	@ (8003520 <HAL_RCC_ClockConfig+0x3d0>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80034ee:	f000 f821 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 80034f2:	4602      	mov	r2, r0
 80034f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003520 <HAL_RCC_ClockConfig+0x3d0>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	490a      	ldr	r1, [pc, #40]	@ (8003528 <HAL_RCC_ClockConfig+0x3d8>)
 80034fe:	5ccb      	ldrb	r3, [r1, r3]
 8003500:	fa22 f303 	lsr.w	r3, r2, r3
 8003504:	4a09      	ldr	r2, [pc, #36]	@ (800352c <HAL_RCC_ClockConfig+0x3dc>)
 8003506:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003508:	4b09      	ldr	r3, [pc, #36]	@ (8003530 <HAL_RCC_ClockConfig+0x3e0>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7fe f937 	bl	8001780 <HAL_InitTick>
 8003512:	4603      	mov	r3, r0
 8003514:	73fb      	strb	r3, [r7, #15]

  return status;
 8003516:	7bfb      	ldrb	r3, [r7, #15]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	46020c00 	.word	0x46020c00
 8003524:	40022000 	.word	0x40022000
 8003528:	08008ba4 	.word	0x08008ba4
 800352c:	20000004 	.word	0x20000004
 8003530:	2000001c 	.word	0x2000001c

08003534 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003534:	b480      	push	{r7}
 8003536:	b08b      	sub	sp, #44	@ 0x2c
 8003538:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003542:	4b78      	ldr	r3, [pc, #480]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800354c:	4b75      	ldr	r3, [pc, #468]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800354e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003550:	f003 0303 	and.w	r3, r3, #3
 8003554:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x34>
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	2b0c      	cmp	r3, #12
 8003560:	d121      	bne.n	80035a6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d11e      	bne.n	80035a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003568:	4b6e      	ldr	r3, [pc, #440]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d107      	bne.n	8003584 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003574:	4b6b      	ldr	r3, [pc, #428]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003576:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800357a:	0b1b      	lsrs	r3, r3, #12
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	627b      	str	r3, [r7, #36]	@ 0x24
 8003582:	e005      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003584:	4b67      	ldr	r3, [pc, #412]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	0f1b      	lsrs	r3, r3, #28
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003590:	4a65      	ldr	r2, [pc, #404]	@ (8003728 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003598:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d110      	bne.n	80035c2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035a4:	e00d      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035a6:	4b5f      	ldr	r3, [pc, #380]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d102      	bne.n	80035b8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035b2:	4b5e      	ldr	r3, [pc, #376]	@ (800372c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80035b4:	623b      	str	r3, [r7, #32]
 80035b6:	e004      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035be:	4b5b      	ldr	r3, [pc, #364]	@ (800372c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80035c0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	2b0c      	cmp	r3, #12
 80035c6:	f040 80a5 	bne.w	8003714 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80035ca:	4b56      	ldr	r3, [pc, #344]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80035d4:	4b53      	ldr	r3, [pc, #332]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d8:	0a1b      	lsrs	r3, r3, #8
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	3301      	adds	r3, #1
 80035e0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80035e2:	4b50      	ldr	r3, [pc, #320]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e6:	091b      	lsrs	r3, r3, #4
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80035ee:	4b4d      	ldr	r3, [pc, #308]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f2:	08db      	lsrs	r3, r3, #3
 80035f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	ee07 3a90 	vmov	s15, r3
 8003602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003606:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2b02      	cmp	r3, #2
 800360e:	d003      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0xe4>
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2b03      	cmp	r3, #3
 8003614:	d022      	beq.n	800365c <HAL_RCC_GetSysClockFreq+0x128>
 8003616:	e043      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	ee07 3a90 	vmov	s15, r3
 800361e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003622:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8003730 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800362a:	4b3e      	ldr	r3, [pc, #248]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800362c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800362e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003632:	ee07 3a90 	vmov	s15, r3
 8003636:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800363a:	ed97 6a01 	vldr	s12, [r7, #4]
 800363e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8003734 <HAL_RCC_GetSysClockFreq+0x200>
 8003642:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003646:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800364a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800364e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003656:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800365a:	e046      	b.n	80036ea <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003666:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8003730 <HAL_RCC_GetSysClockFreq+0x1fc>
 800366a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800366e:	4b2d      	ldr	r3, [pc, #180]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003676:	ee07 3a90 	vmov	s15, r3
 800367a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800367e:	ed97 6a01 	vldr	s12, [r7, #4]
 8003682:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8003734 <HAL_RCC_GetSysClockFreq+0x200>
 8003686:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800368a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800368e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003692:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800369a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800369e:	e024      	b.n	80036ea <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a2:	ee07 3a90 	vmov	s15, r3
 80036a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	ee07 3a90 	vmov	s15, r3
 80036b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80036ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c0:	ee07 3a90 	vmov	s15, r3
 80036c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80036c8:	ed97 6a01 	vldr	s12, [r7, #4]
 80036cc:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8003734 <HAL_RCC_GetSysClockFreq+0x200>
 80036d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80036d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036e8:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80036ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80036ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ee:	0e1b      	lsrs	r3, r3, #24
 80036f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036f4:	3301      	adds	r3, #1
 80036f6:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	ee07 3a90 	vmov	s15, r3
 80036fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003702:	edd7 6a07 	vldr	s13, [r7, #28]
 8003706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800370a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800370e:	ee17 3a90 	vmov	r3, s15
 8003712:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003714:	6a3b      	ldr	r3, [r7, #32]
}
 8003716:	4618      	mov	r0, r3
 8003718:	372c      	adds	r7, #44	@ 0x2c
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	46020c00 	.word	0x46020c00
 8003728:	08008bbc 	.word	0x08008bbc
 800372c:	00f42400 	.word	0x00f42400
 8003730:	4b742400 	.word	0x4b742400
 8003734:	46000000 	.word	0x46000000

08003738 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800373c:	f7ff fefa 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 8003740:	4602      	mov	r2, r0
 8003742:	4b07      	ldr	r3, [pc, #28]	@ (8003760 <HAL_RCC_GetHCLKFreq+0x28>)
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	4906      	ldr	r1, [pc, #24]	@ (8003764 <HAL_RCC_GetHCLKFreq+0x2c>)
 800374c:	5ccb      	ldrb	r3, [r1, r3]
 800374e:	fa22 f303 	lsr.w	r3, r2, r3
 8003752:	4a05      	ldr	r2, [pc, #20]	@ (8003768 <HAL_RCC_GetHCLKFreq+0x30>)
 8003754:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003756:	4b04      	ldr	r3, [pc, #16]	@ (8003768 <HAL_RCC_GetHCLKFreq+0x30>)
 8003758:	681b      	ldr	r3, [r3, #0]
}
 800375a:	4618      	mov	r0, r3
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	46020c00 	.word	0x46020c00
 8003764:	08008ba4 	.word	0x08008ba4
 8003768:	20000004 	.word	0x20000004

0800376c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003770:	f7ff ffe2 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 8003774:	4602      	mov	r2, r0
 8003776:	4b05      	ldr	r3, [pc, #20]	@ (800378c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	4903      	ldr	r1, [pc, #12]	@ (8003790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003788:	4618      	mov	r0, r3
 800378a:	bd80      	pop	{r7, pc}
 800378c:	46020c00 	.word	0x46020c00
 8003790:	08008bb4 	.word	0x08008bb4

08003794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003798:	f7ff ffce 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 800379c:	4602      	mov	r2, r0
 800379e:	4b05      	ldr	r3, [pc, #20]	@ (80037b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	0a1b      	lsrs	r3, r3, #8
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	4903      	ldr	r1, [pc, #12]	@ (80037b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037aa:	5ccb      	ldrb	r3, [r1, r3]
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	46020c00 	.word	0x46020c00
 80037b8:	08008bb4 	.word	0x08008bb4

080037bc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80037c0:	f7ff ffba 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4b05      	ldr	r3, [pc, #20]	@ (80037dc <HAL_RCC_GetPCLK3Freq+0x20>)
 80037c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ca:	091b      	lsrs	r3, r3, #4
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	4903      	ldr	r1, [pc, #12]	@ (80037e0 <HAL_RCC_GetPCLK3Freq+0x24>)
 80037d2:	5ccb      	ldrb	r3, [r1, r3]
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d8:	4618      	mov	r0, r3
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	46020c00 	.word	0x46020c00
 80037e0:	08008bb4 	.word	0x08008bb4

080037e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037ec:	4b3e      	ldr	r3, [pc, #248]	@ (80038e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80037ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037fa:	f7fe fd6f 	bl	80022dc <HAL_PWREx_GetVoltageRange>
 80037fe:	6178      	str	r0, [r7, #20]
 8003800:	e019      	b.n	8003836 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003802:	4b39      	ldr	r3, [pc, #228]	@ (80038e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003804:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003808:	4a37      	ldr	r2, [pc, #220]	@ (80038e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800380a:	f043 0304 	orr.w	r3, r3, #4
 800380e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003812:	4b35      	ldr	r3, [pc, #212]	@ (80038e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003820:	f7fe fd5c 	bl	80022dc <HAL_PWREx_GetVoltageRange>
 8003824:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003826:	4b30      	ldr	r3, [pc, #192]	@ (80038e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003828:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800382c:	4a2e      	ldr	r2, [pc, #184]	@ (80038e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800382e:	f023 0304 	bic.w	r3, r3, #4
 8003832:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800383c:	d003      	beq.n	8003846 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003844:	d109      	bne.n	800385a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800384c:	d202      	bcs.n	8003854 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800384e:	2301      	movs	r3, #1
 8003850:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003852:	e033      	b.n	80038bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003854:	2300      	movs	r3, #0
 8003856:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003858:	e030      	b.n	80038bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003860:	d208      	bcs.n	8003874 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003868:	d102      	bne.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800386a:	2303      	movs	r3, #3
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	e025      	b.n	80038bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e035      	b.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800387a:	d90f      	bls.n	800389c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d109      	bne.n	8003896 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003888:	d902      	bls.n	8003890 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	e015      	b.n	80038bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003890:	2301      	movs	r3, #1
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	e012      	b.n	80038bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003896:	2300      	movs	r3, #0
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	e00f      	b.n	80038bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038a2:	d109      	bne.n	80038b8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038aa:	d102      	bne.n	80038b2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80038ac:	2301      	movs	r3, #1
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	e004      	b.n	80038bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80038b2:	2302      	movs	r3, #2
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	e001      	b.n	80038bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80038b8:	2301      	movs	r3, #1
 80038ba:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038bc:	4b0b      	ldr	r3, [pc, #44]	@ (80038ec <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f023 020f 	bic.w	r2, r3, #15
 80038c4:	4909      	ldr	r1, [pc, #36]	@ (80038ec <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80038cc:	4b07      	ldr	r3, [pc, #28]	@ (80038ec <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d001      	beq.n	80038de <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	46020c00 	.word	0x46020c00
 80038ec:	40022000 	.word	0x40022000

080038f0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80038f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f4:	b0b6      	sub	sp, #216	@ 0xd8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038fc:	2300      	movs	r3, #0
 80038fe:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003902:	2300      	movs	r3, #0
 8003904:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003908:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800390c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003910:	f002 0401 	and.w	r4, r2, #1
 8003914:	2500      	movs	r5, #0
 8003916:	ea54 0305 	orrs.w	r3, r4, r5
 800391a:	d00b      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800391c:	4bc5      	ldr	r3, [pc, #788]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800391e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003922:	f023 0103 	bic.w	r1, r3, #3
 8003926:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800392a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800392c:	4ac1      	ldr	r2, [pc, #772]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800392e:	430b      	orrs	r3, r1
 8003930:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003934:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393c:	f002 0804 	and.w	r8, r2, #4
 8003940:	f04f 0900 	mov.w	r9, #0
 8003944:	ea58 0309 	orrs.w	r3, r8, r9
 8003948:	d00b      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800394a:	4bba      	ldr	r3, [pc, #744]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800394c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003950:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003954:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800395a:	4ab6      	ldr	r2, [pc, #728]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800395c:	430b      	orrs	r3, r1
 800395e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003962:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396a:	f002 0a08 	and.w	sl, r2, #8
 800396e:	f04f 0b00 	mov.w	fp, #0
 8003972:	ea5a 030b 	orrs.w	r3, sl, fp
 8003976:	d00b      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003978:	4bae      	ldr	r3, [pc, #696]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800397a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800397e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003982:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003988:	4aaa      	ldr	r2, [pc, #680]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800398a:	430b      	orrs	r3, r1
 800398c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003990:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003998:	f002 0310 	and.w	r3, r2, #16
 800399c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039a0:	2300      	movs	r3, #0
 80039a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80039a6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80039aa:	460b      	mov	r3, r1
 80039ac:	4313      	orrs	r3, r2
 80039ae:	d00b      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80039b0:	4ba0      	ldr	r3, [pc, #640]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80039b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80039ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c0:	4a9c      	ldr	r2, [pc, #624]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80039c2:	430b      	orrs	r3, r1
 80039c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d0:	f002 0320 	and.w	r3, r2, #32
 80039d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039d8:	2300      	movs	r3, #0
 80039da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039de:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4313      	orrs	r3, r2
 80039e6:	d00b      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80039e8:	4b92      	ldr	r3, [pc, #584]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80039ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80039ee:	f023 0107 	bic.w	r1, r3, #7
 80039f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f8:	4a8e      	ldr	r2, [pc, #568]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80039fa:	430b      	orrs	r3, r1
 80039fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a08:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a10:	2300      	movs	r3, #0
 8003a12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a16:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	d00b      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003a20:	4b84      	ldr	r3, [pc, #528]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a26:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003a2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a30:	4a80      	ldr	r2, [pc, #512]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a32:	430b      	orrs	r3, r1
 8003a34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a40:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003a44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003a4e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4313      	orrs	r3, r2
 8003a56:	d00b      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003a58:	4b76      	ldr	r3, [pc, #472]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a68:	4a72      	ldr	r2, [pc, #456]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a78:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003a7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a80:	2300      	movs	r3, #0
 8003a82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a86:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	d00b      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003a90:	4b68      	ldr	r3, [pc, #416]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aa0:	4a64      	ldr	r2, [pc, #400]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003aa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003ab4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003abe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	d00b      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003ac8:	4b5a      	ldr	r3, [pc, #360]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ace:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8003ad2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad8:	4a56      	ldr	r2, [pc, #344]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003ada:	430b      	orrs	r3, r1
 8003adc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ae0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003aec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003af6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003afa:	460b      	mov	r3, r1
 8003afc:	4313      	orrs	r3, r2
 8003afe:	d00b      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003b00:	4b4c      	ldr	r3, [pc, #304]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b06:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003b0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b10:	4a48      	ldr	r2, [pc, #288]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b12:	430b      	orrs	r3, r1
 8003b14:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b20:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003b24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b2e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003b32:	460b      	mov	r3, r1
 8003b34:	4313      	orrs	r3, r2
 8003b36:	d00b      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003b38:	4b3e      	ldr	r3, [pc, #248]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b3e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003b42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b48:	4a3a      	ldr	r2, [pc, #232]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b4a:	430b      	orrs	r3, r1
 8003b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003b50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b58:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003b5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b5e:	2300      	movs	r3, #0
 8003b60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b62:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003b66:	460b      	mov	r3, r1
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	d00b      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003b6c:	4b31      	ldr	r3, [pc, #196]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b72:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b7c:	4a2d      	ldr	r2, [pc, #180]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b7e:	430b      	orrs	r3, r1
 8003b80:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003b90:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b92:	2300      	movs	r3, #0
 8003b94:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b96:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	d04f      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003ba0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ba8:	2b80      	cmp	r3, #128	@ 0x80
 8003baa:	d02d      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003bac:	2b80      	cmp	r3, #128	@ 0x80
 8003bae:	d827      	bhi.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003bb0:	2b60      	cmp	r3, #96	@ 0x60
 8003bb2:	d02b      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8003bb4:	2b60      	cmp	r3, #96	@ 0x60
 8003bb6:	d823      	bhi.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003bb8:	2b40      	cmp	r3, #64	@ 0x40
 8003bba:	d006      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003bbc:	2b40      	cmp	r3, #64	@ 0x40
 8003bbe:	d81f      	bhi.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d009      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003bc4:	2b20      	cmp	r3, #32
 8003bc6:	d011      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003bc8:	e01a      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003bca:	4b1a      	ldr	r3, [pc, #104]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bce:	4a19      	ldr	r2, [pc, #100]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003bd6:	e01a      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003bd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003bdc:	3308      	adds	r3, #8
 8003bde:	4618      	mov	r0, r3
 8003be0:	f002 f914 	bl	8005e0c <RCCEx_PLL2_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003bea:	e010      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003bec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003bf0:	332c      	adds	r3, #44	@ 0x2c
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f002 f9a2 	bl	8005f3c <RCCEx_PLL3_Config>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003bfe:	e006      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003c06:	e002      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8003c08:	bf00      	nop
 8003c0a:	e000      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8003c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c0e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d110      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003c16:	4b07      	ldr	r3, [pc, #28]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c1c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8003c20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c28:	4a02      	ldr	r2, [pc, #8]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c2a:	430b      	orrs	r3, r1
 8003c2c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003c30:	e006      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003c32:	bf00      	nop
 8003c34:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c38:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003c3c:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003c40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c48:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003c4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c4e:	2300      	movs	r3, #0
 8003c50:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c52:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003c56:	460b      	mov	r3, r1
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	d046      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003c5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c64:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003c68:	d028      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003c6a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003c6e:	d821      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003c70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c74:	d022      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003c76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c7a:	d81b      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003c7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c80:	d01c      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003c82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c86:	d815      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003c88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c8c:	d008      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8003c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c92:	d80f      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d011      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c9c:	d00e      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003c9e:	e009      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ca0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ca4:	3308      	adds	r3, #8
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f002 f8b0 	bl	8005e0c <RCCEx_PLL2_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003cb2:	e004      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003cba:	e000      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8003cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cbe:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10d      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003cc6:	4bb6      	ldr	r3, [pc, #728]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003cc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ccc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003cd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cd4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003cd8:	4ab1      	ldr	r2, [pc, #708]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003cda:	430b      	orrs	r3, r1
 8003cdc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003ce0:	e003      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003ce6:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003cea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003cf6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8003cfc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003d00:	460b      	mov	r3, r1
 8003d02:	4313      	orrs	r3, r2
 8003d04:	d03e      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003d06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d81d      	bhi.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8003d12:	a201      	add	r2, pc, #4	@ (adr r2, 8003d18 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d18:	08003d57 	.word	0x08003d57
 8003d1c:	08003d2d 	.word	0x08003d2d
 8003d20:	08003d3b 	.word	0x08003d3b
 8003d24:	08003d57 	.word	0x08003d57
 8003d28:	08003d57 	.word	0x08003d57
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d2c:	4b9c      	ldr	r3, [pc, #624]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d30:	4a9b      	ldr	r2, [pc, #620]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003d32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d36:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003d38:	e00e      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d3e:	332c      	adds	r3, #44	@ 0x2c
 8003d40:	4618      	mov	r0, r3
 8003d42:	f002 f8fb 	bl	8005f3c <RCCEx_PLL3_Config>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003d4c:	e004      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003d54:	e000      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 8003d56:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003d58:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10d      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003d60:	4b8f      	ldr	r3, [pc, #572]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003d62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003d66:	f023 0107 	bic.w	r1, r3, #7
 8003d6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d72:	4a8b      	ldr	r2, [pc, #556]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003d74:	430b      	orrs	r3, r1
 8003d76:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003d7a:	e003      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003d80:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003d84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003d90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d92:	2300      	movs	r3, #0
 8003d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d96:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	d04a      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003da0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003dac:	d028      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003dae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003db2:	d821      	bhi.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003db4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003db8:	d024      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003dba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003dbe:	d81b      	bhi.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003dc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003dc4:	d00e      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003dc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003dca:	d815      	bhi.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01b      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dd4:	d110      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003dd6:	4b72      	ldr	r3, [pc, #456]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dda:	4a71      	ldr	r2, [pc, #452]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003de2:	e012      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003de4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003de8:	332c      	adds	r3, #44	@ 0x2c
 8003dea:	4618      	mov	r0, r3
 8003dec:	f002 f8a6 	bl	8005f3c <RCCEx_PLL3_Config>
 8003df0:	4603      	mov	r3, r0
 8003df2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003df6:	e008      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003dfe:	e004      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003e00:	bf00      	nop
 8003e02:	e002      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003e04:	bf00      	nop
 8003e06:	e000      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003e08:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003e0a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10d      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003e12:	4b63      	ldr	r3, [pc, #396]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003e14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e18:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003e1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e24:	4a5e      	ldr	r2, [pc, #376]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003e26:	430b      	orrs	r3, r1
 8003e28:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003e2c:	e003      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e2e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003e32:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003e42:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e44:	2300      	movs	r3, #0
 8003e46:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e48:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f000 80ba 	beq.w	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e54:	2300      	movs	r3, #0
 8003e56:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e5a:	4b51      	ldr	r3, [pc, #324]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d113      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e68:	4b4d      	ldr	r3, [pc, #308]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e6e:	4a4c      	ldr	r2, [pc, #304]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003e70:	f043 0304 	orr.w	r3, r3, #4
 8003e74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003e78:	4b49      	ldr	r3, [pc, #292]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003e90:	4b44      	ldr	r3, [pc, #272]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8003e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e94:	4a43      	ldr	r2, [pc, #268]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e9c:	f7fd fcfa 	bl	8001894 <HAL_GetTick>
 8003ea0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ea4:	e00b      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea6:	f7fd fcf5 	bl	8001894 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d903      	bls.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003ebc:	e005      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ebe:	4b39      	ldr	r3, [pc, #228]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0ed      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 8003eca:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d16a      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ed2:	4b33      	ldr	r3, [pc, #204]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003ed4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ed8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003edc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003ee0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d023      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8003ee8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003eec:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8003ef0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d01b      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ef8:	4b29      	ldr	r3, [pc, #164]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003efa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003efe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f06:	4b26      	ldr	r3, [pc, #152]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f0c:	4a24      	ldr	r2, [pc, #144]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f16:	4b22      	ldr	r3, [pc, #136]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f1c:	4a20      	ldr	r2, [pc, #128]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f26:	4a1e      	ldr	r2, [pc, #120]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f2c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d019      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3c:	f7fd fcaa 	bl	8001894 <HAL_GetTick>
 8003f40:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f44:	e00d      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f46:	f7fd fca5 	bl	8001894 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f50:	1ad2      	subs	r2, r2, r3
 8003f52:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d903      	bls.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 8003f60:	e006      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f62:	4b0f      	ldr	r3, [pc, #60]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0ea      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 8003f70:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10d      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003f78:	4b09      	ldr	r3, [pc, #36]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f86:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003f8a:	4a05      	ldr	r2, [pc, #20]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f92:	e00d      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f94:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003f98:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8003f9e:	bf00      	nop
 8003fa0:	46020c00 	.word	0x46020c00
 8003fa4:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa8:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003fac:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fb0:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d107      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb8:	4bb2      	ldr	r3, [pc, #712]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fbe:	4ab1      	ldr	r2, [pc, #708]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003fc0:	f023 0304 	bic.w	r3, r3, #4
 8003fc4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003fc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fda:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	d042      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003fe4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fec:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003ff0:	d022      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003ff2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003ff6:	d81b      	bhi.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003ff8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ffc:	d011      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x732>
 8003ffe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004002:	d815      	bhi.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004004:	2b00      	cmp	r3, #0
 8004006:	d019      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8004008:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800400c:	d110      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800400e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004012:	3308      	adds	r3, #8
 8004014:	4618      	mov	r0, r3
 8004016:	f001 fef9 	bl	8005e0c <RCCEx_PLL2_Config>
 800401a:	4603      	mov	r3, r0
 800401c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004020:	e00d      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004022:	4b98      	ldr	r3, [pc, #608]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004026:	4a97      	ldr	r2, [pc, #604]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800402c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800402e:	e006      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004036:	e002      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8004038:	bf00      	nop
 800403a:	e000      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 800403c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800403e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10d      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8004046:	4b8f      	ldr	r3, [pc, #572]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800404c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004050:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004054:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004058:	4a8a      	ldr	r2, [pc, #552]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800405a:	430b      	orrs	r3, r1
 800405c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004060:	e003      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004062:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004066:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800406a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004072:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004076:	643b      	str	r3, [r7, #64]	@ 0x40
 8004078:	2300      	movs	r3, #0
 800407a:	647b      	str	r3, [r7, #68]	@ 0x44
 800407c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004080:	460b      	mov	r3, r1
 8004082:	4313      	orrs	r3, r2
 8004084:	d02d      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004086:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004092:	d00b      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8004094:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004098:	d804      	bhi.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 800409a:	2b00      	cmp	r3, #0
 800409c:	d008      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800409e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040a2:	d007      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80040aa:	e004      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80040ac:	bf00      	nop
 80040ae:	e002      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80040b0:	bf00      	nop
 80040b2:	e000      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80040b4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80040b6:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10d      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80040be:	4b71      	ldr	r3, [pc, #452]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80040c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80040c4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d0:	4a6c      	ldr	r2, [pc, #432]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80040d2:	430b      	orrs	r3, r1
 80040d4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80040d8:	e003      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040da:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80040de:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80040e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80040ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040f0:	2300      	movs	r3, #0
 80040f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040f4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80040f8:	460b      	mov	r3, r1
 80040fa:	4313      	orrs	r3, r2
 80040fc:	d00c      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80040fe:	4b61      	ldr	r3, [pc, #388]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004100:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004104:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8004108:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800410c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004110:	4a5c      	ldr	r2, [pc, #368]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004112:	430b      	orrs	r3, r1
 8004114:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004118:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800411c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004120:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004124:	633b      	str	r3, [r7, #48]	@ 0x30
 8004126:	2300      	movs	r3, #0
 8004128:	637b      	str	r3, [r7, #52]	@ 0x34
 800412a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800412e:	460b      	mov	r3, r1
 8004130:	4313      	orrs	r3, r2
 8004132:	d019      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004134:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004138:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800413c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004140:	d105      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004142:	4b50      	ldr	r3, [pc, #320]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004146:	4a4f      	ldr	r2, [pc, #316]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800414c:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800414e:	4b4d      	ldr	r3, [pc, #308]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004150:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004154:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004158:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800415c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004160:	4a48      	ldr	r2, [pc, #288]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004162:	430b      	orrs	r3, r1
 8004164:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004168:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004174:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004176:	2300      	movs	r3, #0
 8004178:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800417a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800417e:	460b      	mov	r3, r1
 8004180:	4313      	orrs	r3, r2
 8004182:	d00c      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004184:	4b3f      	ldr	r3, [pc, #252]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800418a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800418e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004192:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004196:	493b      	ldr	r1, [pc, #236]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800419e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a6:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80041aa:	623b      	str	r3, [r7, #32]
 80041ac:	2300      	movs	r3, #0
 80041ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80041b4:	460b      	mov	r3, r1
 80041b6:	4313      	orrs	r3, r2
 80041b8:	d00c      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80041ba:	4b32      	ldr	r3, [pc, #200]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80041bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80041cc:	492d      	ldr	r1, [pc, #180]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80041d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80041e0:	61bb      	str	r3, [r7, #24]
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
 80041e6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80041ea:	460b      	mov	r3, r1
 80041ec:	4313      	orrs	r3, r2
 80041ee:	d00c      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80041f0:	4b24      	ldr	r3, [pc, #144]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80041f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80041f6:	f023 0218 	bic.w	r2, r3, #24
 80041fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004202:	4920      	ldr	r1, [pc, #128]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800420a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800420e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004212:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	2300      	movs	r3, #0
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004220:	460b      	mov	r3, r1
 8004222:	4313      	orrs	r3, r2
 8004224:	d034      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004226:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800422a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800422e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004232:	d105      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004234:	4b13      	ldr	r3, [pc, #76]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004238:	4a12      	ldr	r2, [pc, #72]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800423a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800423e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004240:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004244:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004248:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800424c:	d108      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800424e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004252:	3308      	adds	r3, #8
 8004254:	4618      	mov	r0, r3
 8004256:	f001 fdd9 	bl	8005e0c <RCCEx_PLL2_Config>
 800425a:	4603      	mov	r3, r0
 800425c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 8004260:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10f      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004268:	4b06      	ldr	r3, [pc, #24]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800426a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800426e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004272:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004276:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800427a:	4902      	ldr	r1, [pc, #8]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004282:	e005      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8004284:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800428c:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004290:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800429c:	60bb      	str	r3, [r7, #8]
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80042a6:	460b      	mov	r3, r1
 80042a8:	4313      	orrs	r3, r2
 80042aa:	d03a      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80042ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042b8:	d00e      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80042ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042be:	d815      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d017      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80042c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042c8:	d110      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042ca:	4b27      	ldr	r3, [pc, #156]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80042cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ce:	4a26      	ldr	r2, [pc, #152]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80042d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042d4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80042d6:	e00e      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042dc:	3308      	adds	r3, #8
 80042de:	4618      	mov	r0, r3
 80042e0:	f001 fd94 	bl	8005e0c <RCCEx_PLL2_Config>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80042ea:	e004      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80042f2:	e000      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 80042f4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80042f6:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10d      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80042fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004304:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004308:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800430c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004310:	4915      	ldr	r1, [pc, #84]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004318:	e003      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800431e:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004322:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	2300      	movs	r3, #0
 8004332:	607b      	str	r3, [r7, #4]
 8004334:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004338:	460b      	mov	r3, r1
 800433a:	4313      	orrs	r3, r2
 800433c:	d00c      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800433e:	4b0a      	ldr	r3, [pc, #40]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004340:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004344:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004348:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800434c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004350:	4905      	ldr	r1, [pc, #20]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004358:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 800435c:	4618      	mov	r0, r3
 800435e:	37d8      	adds	r7, #216	@ 0xd8
 8004360:	46bd      	mov	sp, r7
 8004362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004366:	bf00      	nop
 8004368:	46020c00 	.word	0x46020c00

0800436c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800436c:	b480      	push	{r7}
 800436e:	b089      	sub	sp, #36	@ 0x24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004374:	4ba6      	ldr	r3, [pc, #664]	@ (8004610 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800437c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800437e:	4ba4      	ldr	r3, [pc, #656]	@ (8004610 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004388:	4ba1      	ldr	r3, [pc, #644]	@ (8004610 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800438a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438c:	0a1b      	lsrs	r3, r3, #8
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	3301      	adds	r3, #1
 8004394:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004396:	4b9e      	ldr	r3, [pc, #632]	@ (8004610 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439a:	091b      	lsrs	r3, r3, #4
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80043a2:	4b9b      	ldr	r3, [pc, #620]	@ (8004610 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80043a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a6:	08db      	lsrs	r3, r3, #3
 80043a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	fb02 f303 	mul.w	r3, r2, r3
 80043b2:	ee07 3a90 	vmov	s15, r3
 80043b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ba:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d062      	beq.n	800448a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	2b03      	cmp	r3, #3
 80043c8:	f200 8081 	bhi.w	80044ce <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d024      	beq.n	800441c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d17a      	bne.n	80044ce <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8004614 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80043e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ea:	4b89      	ldr	r3, [pc, #548]	@ (8004610 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80043ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f2:	ee07 3a90 	vmov	s15, r3
 80043f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80043fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80043fe:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8004618 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004402:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004406:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800440a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800440e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004416:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800441a:	e08f      	b.n	800453c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800441c:	4b7c      	ldr	r3, [pc, #496]	@ (8004610 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d005      	beq.n	8004434 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8004428:	4b79      	ldr	r3, [pc, #484]	@ (8004610 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	0f1b      	lsrs	r3, r3, #28
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	e006      	b.n	8004442 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8004434:	4b76      	ldr	r3, [pc, #472]	@ (8004610 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004436:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800443a:	041b      	lsls	r3, r3, #16
 800443c:	0f1b      	lsrs	r3, r3, #28
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	4a76      	ldr	r2, [pc, #472]	@ (800461c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8004444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004448:	ee07 3a90 	vmov	s15, r3
 800444c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	ee07 3a90 	vmov	s15, r3
 8004464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004468:	ed97 6a02 	vldr	s12, [r7, #8]
 800446c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8004618 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004470:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004474:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004478:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800447c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004484:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004488:	e058      	b.n	800453c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	ee07 3a90 	vmov	s15, r3
 8004490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004494:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004614 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8004498:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800449c:	4b5c      	ldr	r3, [pc, #368]	@ (8004610 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800449e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a4:	ee07 3a90 	vmov	s15, r3
 80044a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80044ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80044b0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004618 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80044b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80044bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044cc:	e036      	b.n	800453c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80044ce:	4b50      	ldr	r3, [pc, #320]	@ (8004610 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80044da:	4b4d      	ldr	r3, [pc, #308]	@ (8004610 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	0f1b      	lsrs	r3, r3, #28
 80044e0:	f003 030f 	and.w	r3, r3, #15
 80044e4:	e006      	b.n	80044f4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80044e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004610 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80044e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80044ec:	041b      	lsls	r3, r3, #16
 80044ee:	0f1b      	lsrs	r3, r3, #28
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	4a49      	ldr	r2, [pc, #292]	@ (800461c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80044f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044fa:	ee07 3a90 	vmov	s15, r3
 80044fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	ee07 3a90 	vmov	s15, r3
 8004508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	ee07 3a90 	vmov	s15, r3
 8004516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800451a:	ed97 6a02 	vldr	s12, [r7, #8]
 800451e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004618 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800452a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800452e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004536:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800453a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800453c:	4b34      	ldr	r3, [pc, #208]	@ (8004610 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800453e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d017      	beq.n	8004578 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004548:	4b31      	ldr	r3, [pc, #196]	@ (8004610 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800454a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800454c:	0a5b      	lsrs	r3, r3, #9
 800454e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004552:	ee07 3a90 	vmov	s15, r3
 8004556:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800455a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800455e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004562:	edd7 6a07 	vldr	s13, [r7, #28]
 8004566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800456a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800456e:	ee17 2a90 	vmov	r2, s15
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	e002      	b.n	800457e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800457e:	4b24      	ldr	r3, [pc, #144]	@ (8004610 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d017      	beq.n	80045ba <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800458a:	4b21      	ldr	r3, [pc, #132]	@ (8004610 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800458c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800458e:	0c1b      	lsrs	r3, r3, #16
 8004590:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004594:	ee07 3a90 	vmov	s15, r3
 8004598:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800459c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045a0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80045a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80045a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045b0:	ee17 2a90 	vmov	r2, s15
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	605a      	str	r2, [r3, #4]
 80045b8:	e002      	b.n	80045c0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80045c0:	4b13      	ldr	r3, [pc, #76]	@ (8004610 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80045c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d017      	beq.n	80045fc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80045cc:	4b10      	ldr	r3, [pc, #64]	@ (8004610 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80045ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d0:	0e1b      	lsrs	r3, r3, #24
 80045d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80045de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045e2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80045e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80045ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045f2:	ee17 2a90 	vmov	r2, s15
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80045fa:	e002      	b.n	8004602 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	609a      	str	r2, [r3, #8]
}
 8004602:	bf00      	nop
 8004604:	3724      	adds	r7, #36	@ 0x24
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	46020c00 	.word	0x46020c00
 8004614:	4b742400 	.word	0x4b742400
 8004618:	46000000 	.word	0x46000000
 800461c:	08008bbc 	.word	0x08008bbc

08004620 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004620:	b480      	push	{r7}
 8004622:	b089      	sub	sp, #36	@ 0x24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004628:	4ba6      	ldr	r3, [pc, #664]	@ (80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800462a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800462c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004630:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004632:	4ba4      	ldr	r3, [pc, #656]	@ (80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800463c:	4ba1      	ldr	r3, [pc, #644]	@ (80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800463e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004640:	0a1b      	lsrs	r3, r3, #8
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	3301      	adds	r3, #1
 8004648:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800464a:	4b9e      	ldr	r3, [pc, #632]	@ (80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800464c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464e:	091b      	lsrs	r3, r3, #4
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004656:	4b9b      	ldr	r3, [pc, #620]	@ (80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465a:	08db      	lsrs	r3, r3, #3
 800465c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	fb02 f303 	mul.w	r3, r2, r3
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800466e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b03      	cmp	r3, #3
 8004676:	d062      	beq.n	800473e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2b03      	cmp	r3, #3
 800467c:	f200 8081 	bhi.w	8004782 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d024      	beq.n	80046d0 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2b02      	cmp	r3, #2
 800468a:	d17a      	bne.n	8004782 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	ee07 3a90 	vmov	s15, r3
 8004692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004696:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80048c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800469a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800469e:	4b89      	ldr	r3, [pc, #548]	@ (80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80046a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a6:	ee07 3a90 	vmov	s15, r3
 80046aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80046ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80046b2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80046b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80046ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80046be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80046c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046ce:	e08f      	b.n	80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80046d0:	4b7c      	ldr	r3, [pc, #496]	@ (80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80046dc:	4b79      	ldr	r3, [pc, #484]	@ (80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	0f1b      	lsrs	r3, r3, #28
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	e006      	b.n	80046f6 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80046e8:	4b76      	ldr	r3, [pc, #472]	@ (80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80046ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046ee:	041b      	lsls	r3, r3, #16
 80046f0:	0f1b      	lsrs	r3, r3, #28
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	4a76      	ldr	r2, [pc, #472]	@ (80048d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80046f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046fc:	ee07 3a90 	vmov	s15, r3
 8004700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	ee07 3a90 	vmov	s15, r3
 800470a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800470e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	ee07 3a90 	vmov	s15, r3
 8004718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800471c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004720:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004724:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004728:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800472c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004730:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004738:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800473c:	e058      	b.n	80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	ee07 3a90 	vmov	s15, r3
 8004744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004748:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80048c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800474c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004750:	4b5c      	ldr	r3, [pc, #368]	@ (80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004758:	ee07 3a90 	vmov	s15, r3
 800475c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004760:	ed97 6a02 	vldr	s12, [r7, #8]
 8004764:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004768:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800476c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004770:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004774:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004780:	e036      	b.n	80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004782:	4b50      	ldr	r3, [pc, #320]	@ (80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d005      	beq.n	800479a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800478e:	4b4d      	ldr	r3, [pc, #308]	@ (80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	0f1b      	lsrs	r3, r3, #28
 8004794:	f003 030f 	and.w	r3, r3, #15
 8004798:	e006      	b.n	80047a8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800479a:	4b4a      	ldr	r3, [pc, #296]	@ (80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800479c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80047a0:	041b      	lsls	r3, r3, #16
 80047a2:	0f1b      	lsrs	r3, r3, #28
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	4a49      	ldr	r2, [pc, #292]	@ (80048d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80047aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	ee07 3a90 	vmov	s15, r3
 80047bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80047d2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80047d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80047e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047ee:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80047f0:	4b34      	ldr	r3, [pc, #208]	@ (80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80047f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d017      	beq.n	800482c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80047fc:	4b31      	ldr	r3, [pc, #196]	@ (80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80047fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004800:	0a5b      	lsrs	r3, r3, #9
 8004802:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004806:	ee07 3a90 	vmov	s15, r3
 800480a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800480e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004812:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004816:	edd7 6a07 	vldr	s13, [r7, #28]
 800481a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800481e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004822:	ee17 2a90 	vmov	r2, s15
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	e002      	b.n	8004832 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004832:	4b24      	ldr	r3, [pc, #144]	@ (80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d017      	beq.n	800486e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800483e:	4b21      	ldr	r3, [pc, #132]	@ (80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004842:	0c1b      	lsrs	r3, r3, #16
 8004844:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004848:	ee07 3a90 	vmov	s15, r3
 800484c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004850:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004854:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004858:	edd7 6a07 	vldr	s13, [r7, #28]
 800485c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004864:	ee17 2a90 	vmov	r2, s15
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	605a      	str	r2, [r3, #4]
 800486c:	e002      	b.n	8004874 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004874:	4b13      	ldr	r3, [pc, #76]	@ (80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004878:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d017      	beq.n	80048b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004880:	4b10      	ldr	r3, [pc, #64]	@ (80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004884:	0e1b      	lsrs	r3, r3, #24
 8004886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800488a:	ee07 3a90 	vmov	s15, r3
 800488e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8004892:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004896:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800489a:	edd7 6a07 	vldr	s13, [r7, #28]
 800489e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048a6:	ee17 2a90 	vmov	r2, s15
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80048ae:	e002      	b.n	80048b6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	609a      	str	r2, [r3, #8]
}
 80048b6:	bf00      	nop
 80048b8:	3724      	adds	r7, #36	@ 0x24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	46020c00 	.word	0x46020c00
 80048c8:	4b742400 	.word	0x4b742400
 80048cc:	46000000 	.word	0x46000000
 80048d0:	08008bbc 	.word	0x08008bbc

080048d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b089      	sub	sp, #36	@ 0x24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80048dc:	4ba6      	ldr	r3, [pc, #664]	@ (8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80048de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80048e6:	4ba4      	ldr	r3, [pc, #656]	@ (8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80048e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80048f0:	4ba1      	ldr	r3, [pc, #644]	@ (8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80048f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f4:	0a1b      	lsrs	r3, r3, #8
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	3301      	adds	r3, #1
 80048fc:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80048fe:	4b9e      	ldr	r3, [pc, #632]	@ (8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004902:	091b      	lsrs	r3, r3, #4
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800490a:	4b9b      	ldr	r3, [pc, #620]	@ (8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800490c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800490e:	08db      	lsrs	r3, r3, #3
 8004910:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	fb02 f303 	mul.w	r3, r2, r3
 800491a:	ee07 3a90 	vmov	s15, r3
 800491e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004922:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2b03      	cmp	r3, #3
 800492a:	d062      	beq.n	80049f2 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2b03      	cmp	r3, #3
 8004930:	f200 8081 	bhi.w	8004a36 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d024      	beq.n	8004984 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2b02      	cmp	r3, #2
 800493e:	d17a      	bne.n	8004a36 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	ee07 3a90 	vmov	s15, r3
 8004946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800494e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004952:	4b89      	ldr	r3, [pc, #548]	@ (8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800495a:	ee07 3a90 	vmov	s15, r3
 800495e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004962:	ed97 6a02 	vldr	s12, [r7, #8]
 8004966:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800496a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800496e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004972:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004976:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800497a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800497e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8004982:	e08f      	b.n	8004aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004984:	4b7c      	ldr	r3, [pc, #496]	@ (8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d005      	beq.n	800499c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8004990:	4b79      	ldr	r3, [pc, #484]	@ (8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	0f1b      	lsrs	r3, r3, #28
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	e006      	b.n	80049aa <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800499c:	4b76      	ldr	r3, [pc, #472]	@ (8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800499e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80049a2:	041b      	lsls	r3, r3, #16
 80049a4:	0f1b      	lsrs	r3, r3, #28
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	4a76      	ldr	r2, [pc, #472]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80049ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b0:	ee07 3a90 	vmov	s15, r3
 80049b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	ee07 3a90 	vmov	s15, r3
 80049be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80049d4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80049d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80049e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049f0:	e058      	b.n	8004aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	ee07 3a90 	vmov	s15, r3
 80049f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004a00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a04:	4b5c      	ldr	r3, [pc, #368]	@ (8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a0c:	ee07 3a90 	vmov	s15, r3
 8004a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a14:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a18:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004a1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004a20:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a28:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a34:	e036      	b.n	8004aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004a36:	4b50      	ldr	r3, [pc, #320]	@ (8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d005      	beq.n	8004a4e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8004a42:	4b4d      	ldr	r3, [pc, #308]	@ (8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	0f1b      	lsrs	r3, r3, #28
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	e006      	b.n	8004a5c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8004a4e:	4b4a      	ldr	r3, [pc, #296]	@ (8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a54:	041b      	lsls	r3, r3, #16
 8004a56:	0f1b      	lsrs	r3, r3, #28
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	4a49      	ldr	r2, [pc, #292]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a62:	ee07 3a90 	vmov	s15, r3
 8004a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	ee07 3a90 	vmov	s15, r3
 8004a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a86:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004aa2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004aa4:	4b34      	ldr	r3, [pc, #208]	@ (8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d017      	beq.n	8004ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004ab0:	4b31      	ldr	r3, [pc, #196]	@ (8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab4:	0a5b      	lsrs	r3, r3, #9
 8004ab6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004aba:	ee07 3a90 	vmov	s15, r3
 8004abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004ac2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ac6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004aca:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ad6:	ee17 2a90 	vmov	r2, s15
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	e002      	b.n	8004ae6 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004ae6:	4b24      	ldr	r3, [pc, #144]	@ (8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d017      	beq.n	8004b22 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004af2:	4b21      	ldr	r3, [pc, #132]	@ (8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af6:	0c1b      	lsrs	r3, r3, #16
 8004af8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004afc:	ee07 3a90 	vmov	s15, r3
 8004b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004b04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b08:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004b0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b18:	ee17 2a90 	vmov	r2, s15
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	605a      	str	r2, [r3, #4]
 8004b20:	e002      	b.n	8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004b28:	4b13      	ldr	r3, [pc, #76]	@ (8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d017      	beq.n	8004b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004b34:	4b10      	ldr	r3, [pc, #64]	@ (8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b38:	0e1b      	lsrs	r3, r3, #24
 8004b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8004b46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b4a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004b4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b5a:	ee17 2a90 	vmov	r2, s15
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b62:	e002      	b.n	8004b6a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	609a      	str	r2, [r3, #8]
}
 8004b6a:	bf00      	nop
 8004b6c:	3724      	adds	r7, #36	@ 0x24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	46020c00 	.word	0x46020c00
 8004b7c:	4b742400 	.word	0x4b742400
 8004b80:	46000000 	.word	0x46000000
 8004b84:	08008bbc 	.word	0x08008bbc

08004b88 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08e      	sub	sp, #56	@ 0x38
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004b92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b96:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8004b9a:	430b      	orrs	r3, r1
 8004b9c:	d145      	bne.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004b9e:	4b9b      	ldr	r3, [pc, #620]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004ba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ba4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ba8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004baa:	4b98      	ldr	r3, [pc, #608]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004bac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d108      	bne.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bbe:	d104      	bne.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004bc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bc6:	f001 b912 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004bca:	4b90      	ldr	r3, [pc, #576]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bd8:	d114      	bne.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004be0:	d110      	bne.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004be2:	4b8a      	ldr	r3, [pc, #552]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004be4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bf0:	d103      	bne.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004bf2:	23fa      	movs	r3, #250	@ 0xfa
 8004bf4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004bf6:	f001 b8fa 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8004bfa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004bfe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004c00:	f001 b8f5 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004c04:	4b81      	ldr	r3, [pc, #516]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c10:	d107      	bne.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c18:	d103      	bne.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8004c1a:	4b7d      	ldr	r3, [pc, #500]	@ (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c1e:	f001 b8e6 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c26:	f001 b8e2 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004c2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c2e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004c32:	430b      	orrs	r3, r1
 8004c34:	d151      	bne.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004c36:	4b75      	ldr	r3, [pc, #468]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004c38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c3c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004c40:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c44:	2b80      	cmp	r3, #128	@ 0x80
 8004c46:	d035      	beq.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4a:	2b80      	cmp	r3, #128	@ 0x80
 8004c4c:	d841      	bhi.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c50:	2b60      	cmp	r3, #96	@ 0x60
 8004c52:	d02a      	beq.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c56:	2b60      	cmp	r3, #96	@ 0x60
 8004c58:	d83b      	bhi.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5c:	2b40      	cmp	r3, #64	@ 0x40
 8004c5e:	d009      	beq.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c62:	2b40      	cmp	r3, #64	@ 0x40
 8004c64:	d835      	bhi.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00c      	beq.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6e:	2b20      	cmp	r3, #32
 8004c70:	d012      	beq.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004c72:	e02e      	b.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff fb77 	bl	800436c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c82:	f001 b8b4 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c86:	f107 0318 	add.w	r3, r7, #24
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff fcc8 	bl	8004620 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c94:	f001 b8ab 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c98:	f107 030c 	add.w	r3, r7, #12
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff fe19 	bl	80048d4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ca6:	f001 b8a2 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004caa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004cae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cb0:	f001 b89d 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004cb4:	4b55      	ldr	r3, [pc, #340]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cc0:	d103      	bne.n	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004cc2:	4b54      	ldr	r3, [pc, #336]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004cc4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004cc6:	f001 b892 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cce:	f001 b88e 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cd6:	f001 b88a 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        break;
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8004cda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cde:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004ce2:	430b      	orrs	r3, r1
 8004ce4:	d126      	bne.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8004ce6:	4b49      	ldr	r3, [pc, #292]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004ce8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004cec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cf0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004cf2:	4b46      	ldr	r3, [pc, #280]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cfe:	d106      	bne.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8004d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d103      	bne.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 8004d06:	4b43      	ldr	r3, [pc, #268]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d0a:	f001 b870 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8004d0e:	4b3f      	ldr	r3, [pc, #252]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d1a:	d107      	bne.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d22:	d103      	bne.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 8004d24:	4b3c      	ldr	r3, [pc, #240]	@ (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d28:	f001 b861 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d30:	f001 b85d 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004d34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d38:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8004d3c:	430b      	orrs	r3, r1
 8004d3e:	d171      	bne.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004d40:	4b32      	ldr	r3, [pc, #200]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d46:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004d4a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004d52:	d034      	beq.n	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8004d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d56:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004d5a:	d853      	bhi.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d62:	d00b      	beq.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8004d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d6a:	d84b      	bhi.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d016      	beq.n	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8004d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d78:	d009      	beq.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8004d7a:	e043      	b.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff faf3 	bl	800436c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d8a:	f001 b830 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d8e:	f107 0318 	add.w	r3, r7, #24
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7ff fc44 	bl	8004620 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d9c:	f001 b827 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004da0:	4b1a      	ldr	r3, [pc, #104]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004da8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dac:	d103      	bne.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 8004dae:	4b1b      	ldr	r3, [pc, #108]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004db0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004db2:	f001 b81c 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004dba:	f001 b818 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004dbe:	4b13      	ldr	r3, [pc, #76]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	d118      	bne.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004dca:	4b10      	ldr	r3, [pc, #64]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	0e1b      	lsrs	r3, r3, #24
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	e006      	b.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8004de2:	4b0a      	ldr	r3, [pc, #40]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004de4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004de8:	041b      	lsls	r3, r3, #16
 8004dea:	0e1b      	lsrs	r3, r3, #24
 8004dec:	f003 030f 	and.w	r3, r3, #15
 8004df0:	4a0b      	ldr	r2, [pc, #44]	@ (8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004df8:	f000 bff9 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e00:	f000 bff5 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e08:	f000 bff1 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004e0c:	46020c00 	.word	0x46020c00
 8004e10:	0007a120 	.word	0x0007a120
 8004e14:	00f42400 	.word	0x00f42400
 8004e18:	007a1200 	.word	0x007a1200
 8004e1c:	02dc6c00 	.word	0x02dc6c00
 8004e20:	08008bbc 	.word	0x08008bbc
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e28:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004e2c:	430b      	orrs	r3, r1
 8004e2e:	d17f      	bne.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004e30:	4ba8      	ldr	r3, [pc, #672]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004e32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e3a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d165      	bne.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004e42:	4ba4      	ldr	r3, [pc, #656]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e48:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004e4c:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8004e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e50:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004e54:	d034      	beq.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e58:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004e5c:	d853      	bhi.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e64:	d00b      	beq.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8004e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e6c:	d84b      	bhi.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d016      	beq.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8004e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e7a:	d009      	beq.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8004e7c:	e043      	b.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff fa72 	bl	800436c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004e8c:	f000 bfaf 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e90:	f107 0318 	add.w	r3, r7, #24
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff fbc3 	bl	8004620 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004e9e:	f000 bfa6 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004ea2:	4b8c      	ldr	r3, [pc, #560]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004eaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eae:	d103      	bne.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 8004eb0:	4b89      	ldr	r3, [pc, #548]	@ (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8004eb2:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004eb4:	f000 bf9b 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004ebc:	f000 bf97 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004ec0:	4b84      	ldr	r3, [pc, #528]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	d118      	bne.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ecc:	4b81      	ldr	r3, [pc, #516]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8004ed8:	4b7e      	ldr	r3, [pc, #504]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	0e1b      	lsrs	r3, r3, #24
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	e006      	b.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8004ee4:	4b7b      	ldr	r3, [pc, #492]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004ee6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004eea:	041b      	lsls	r3, r3, #16
 8004eec:	0e1b      	lsrs	r3, r3, #24
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	4a7a      	ldr	r2, [pc, #488]	@ (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8004ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef8:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004efa:	f000 bf78 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004f02:	f000 bf74 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004f0a:	f000 bf70 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f14:	d108      	bne.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff fa26 	bl	800436c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f22:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f24:	f000 bf63 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f2c:	f000 bf5f 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f34:	1e51      	subs	r1, r2, #1
 8004f36:	430b      	orrs	r3, r1
 8004f38:	d136      	bne.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004f3a:	4b66      	ldr	r3, [pc, #408]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f40:	f003 0303 	and.w	r3, r3, #3
 8004f44:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d104      	bne.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004f4c:	f7fe fc22 	bl	8003794 <HAL_RCC_GetPCLK2Freq>
 8004f50:	6378      	str	r0, [r7, #52]	@ 0x34
 8004f52:	f000 bf4c 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d104      	bne.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004f5c:	f7fe faea 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 8004f60:	6378      	str	r0, [r7, #52]	@ 0x34
 8004f62:	f000 bf44 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004f66:	4b5b      	ldr	r3, [pc, #364]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f72:	d106      	bne.n	8004f82 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8004f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d103      	bne.n	8004f82 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 8004f7a:	4b59      	ldr	r3, [pc, #356]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f7e:	f000 bf36 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004f82:	4b54      	ldr	r3, [pc, #336]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004f84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d107      	bne.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d104      	bne.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 8004f96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f9c:	f000 bf27 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fa4:	f000 bf23 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fac:	1f11      	subs	r1, r2, #4
 8004fae:	430b      	orrs	r3, r1
 8004fb0:	d136      	bne.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004fb2:	4b48      	ldr	r3, [pc, #288]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fb8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004fbc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d104      	bne.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004fc4:	f7fe fbd2 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 8004fc8:	6378      	str	r0, [r7, #52]	@ 0x34
 8004fca:	f000 bf10 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8004fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd0:	2b10      	cmp	r3, #16
 8004fd2:	d104      	bne.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004fd4:	f7fe faae 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 8004fd8:	6378      	str	r0, [r7, #52]	@ 0x34
 8004fda:	f000 bf08 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004fde:	4b3d      	ldr	r3, [pc, #244]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fea:	d106      	bne.n	8004ffa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fee:	2b20      	cmp	r3, #32
 8004ff0:	d103      	bne.n	8004ffa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 8004ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ff6:	f000 befa 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004ffa:	4b36      	ldr	r3, [pc, #216]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004ffc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b02      	cmp	r3, #2
 8005006:	d107      	bne.n	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8005008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500a:	2b30      	cmp	r3, #48	@ 0x30
 800500c:	d104      	bne.n	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 800500e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005012:	637b      	str	r3, [r7, #52]	@ 0x34
 8005014:	f000 beeb 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	637b      	str	r3, [r7, #52]	@ 0x34
 800501c:	f000 bee7 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8005020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005024:	f1a2 0108 	sub.w	r1, r2, #8
 8005028:	430b      	orrs	r3, r1
 800502a:	d136      	bne.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800502c:	4b29      	ldr	r3, [pc, #164]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800502e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005032:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005036:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503a:	2b00      	cmp	r3, #0
 800503c:	d104      	bne.n	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800503e:	f7fe fb95 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 8005042:	6378      	str	r0, [r7, #52]	@ 0x34
 8005044:	f000 bed3 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8005048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504a:	2b40      	cmp	r3, #64	@ 0x40
 800504c:	d104      	bne.n	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800504e:	f7fe fa71 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 8005052:	6378      	str	r0, [r7, #52]	@ 0x34
 8005054:	f000 becb 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005058:	4b1e      	ldr	r3, [pc, #120]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005060:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005064:	d106      	bne.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8005066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005068:	2b80      	cmp	r3, #128	@ 0x80
 800506a:	d103      	bne.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 800506c:	4b1c      	ldr	r3, [pc, #112]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800506e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005070:	f000 bebd 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005074:	4b17      	ldr	r3, [pc, #92]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005076:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b02      	cmp	r3, #2
 8005080:	d107      	bne.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8005082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005084:	2bc0      	cmp	r3, #192	@ 0xc0
 8005086:	d104      	bne.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 8005088:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800508c:	637b      	str	r3, [r7, #52]	@ 0x34
 800508e:	f000 beae 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	637b      	str	r3, [r7, #52]	@ 0x34
 8005096:	f000 beaa 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800509a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800509e:	f1a2 0110 	sub.w	r1, r2, #16
 80050a2:	430b      	orrs	r3, r1
 80050a4:	d141      	bne.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80050a6:	4b0b      	ldr	r3, [pc, #44]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80050a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050b0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80050b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d104      	bne.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80050b8:	f7fe fb58 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 80050bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80050be:	f000 be96 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80050c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050c8:	d10c      	bne.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80050ca:	f7fe fa33 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 80050ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80050d0:	f000 be8d 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80050d4:	46020c00 	.word	0x46020c00
 80050d8:	02dc6c00 	.word	0x02dc6c00
 80050dc:	08008bbc 	.word	0x08008bbc
 80050e0:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80050e4:	4baa      	ldr	r3, [pc, #680]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050f0:	d107      	bne.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80050f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050f8:	d103      	bne.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 80050fa:	4ba6      	ldr	r3, [pc, #664]	@ (8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80050fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80050fe:	f000 be76 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005102:	4ba3      	ldr	r3, [pc, #652]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005104:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b02      	cmp	r3, #2
 800510e:	d108      	bne.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8005110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005112:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005116:	d104      	bne.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 8005118:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800511c:	637b      	str	r3, [r7, #52]	@ 0x34
 800511e:	f000 be66 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	637b      	str	r3, [r7, #52]	@ 0x34
 8005126:	f000 be62 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800512a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800512e:	f1a2 0120 	sub.w	r1, r2, #32
 8005132:	430b      	orrs	r3, r1
 8005134:	d158      	bne.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005136:	4b96      	ldr	r3, [pc, #600]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005144:	2b00      	cmp	r3, #0
 8005146:	d104      	bne.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8005148:	f7fe fb38 	bl	80037bc <HAL_RCC_GetPCLK3Freq>
 800514c:	6378      	str	r0, [r7, #52]	@ 0x34
 800514e:	f000 be4e 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005154:	2b01      	cmp	r3, #1
 8005156:	d104      	bne.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005158:	f7fe f9ec 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 800515c:	6378      	str	r0, [r7, #52]	@ 0x34
 800515e:	f000 be46 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005162:	4b8b      	ldr	r3, [pc, #556]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800516a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800516e:	d106      	bne.n	800517e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005172:	2b02      	cmp	r3, #2
 8005174:	d103      	bne.n	800517e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 8005176:	4b87      	ldr	r3, [pc, #540]	@ (8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005178:	637b      	str	r3, [r7, #52]	@ 0x34
 800517a:	f000 be38 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800517e:	4b84      	ldr	r3, [pc, #528]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005180:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b02      	cmp	r3, #2
 800518a:	d107      	bne.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800518c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518e:	2b03      	cmp	r3, #3
 8005190:	d104      	bne.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 8005192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005196:	637b      	str	r3, [r7, #52]	@ 0x34
 8005198:	f000 be29 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800519c:	4b7c      	ldr	r3, [pc, #496]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b20      	cmp	r3, #32
 80051a6:	d11b      	bne.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80051a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d118      	bne.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80051ae:	4b78      	ldr	r3, [pc, #480]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d005      	beq.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 80051ba:	4b75      	ldr	r3, [pc, #468]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	0e1b      	lsrs	r3, r3, #24
 80051c0:	f003 030f 	and.w	r3, r3, #15
 80051c4:	e006      	b.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80051c6:	4b72      	ldr	r3, [pc, #456]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80051c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80051cc:	041b      	lsls	r3, r3, #16
 80051ce:	0e1b      	lsrs	r3, r3, #24
 80051d0:	f003 030f 	and.w	r3, r3, #15
 80051d4:	4a70      	ldr	r2, [pc, #448]	@ (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80051d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051da:	637b      	str	r3, [r7, #52]	@ 0x34
 80051dc:	f000 be07 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80051e4:	f000 be03 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80051e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ec:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80051f0:	430b      	orrs	r3, r1
 80051f2:	d16c      	bne.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80051f4:	4b66      	ldr	r3, [pc, #408]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80051f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051fa:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80051fe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8005200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005202:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005206:	d104      	bne.n	8005212 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005208:	f7fe f994 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 800520c:	6378      	str	r0, [r7, #52]	@ 0x34
 800520e:	f000 bdee 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8005212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005218:	d108      	bne.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800521a:	f107 0318 	add.w	r3, r7, #24
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff f9fe 	bl	8004620 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	637b      	str	r3, [r7, #52]	@ 0x34
 8005228:	f000 bde1 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800522c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522e:	2b00      	cmp	r3, #0
 8005230:	d104      	bne.n	800523c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8005232:	f7fe fa81 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 8005236:	6378      	str	r0, [r7, #52]	@ 0x34
 8005238:	f000 bdd9 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800523c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005242:	d122      	bne.n	800528a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005244:	4b52      	ldr	r3, [pc, #328]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0320 	and.w	r3, r3, #32
 800524c:	2b20      	cmp	r3, #32
 800524e:	d118      	bne.n	8005282 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005250:	4b4f      	ldr	r3, [pc, #316]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d005      	beq.n	8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800525c:	4b4c      	ldr	r3, [pc, #304]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	0e1b      	lsrs	r3, r3, #24
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	e006      	b.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8005268:	4b49      	ldr	r3, [pc, #292]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800526a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800526e:	041b      	lsls	r3, r3, #16
 8005270:	0e1b      	lsrs	r3, r3, #24
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	4a48      	ldr	r2, [pc, #288]	@ (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800527c:	637b      	str	r3, [r7, #52]	@ 0x34
 800527e:	f000 bdb6 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8005282:	2300      	movs	r3, #0
 8005284:	637b      	str	r3, [r7, #52]	@ 0x34
 8005286:	f000 bdb2 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800528a:	4b41      	ldr	r3, [pc, #260]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005292:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005296:	d107      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8005298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800529e:	d103      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 80052a0:	4b3c      	ldr	r3, [pc, #240]	@ (8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80052a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80052a4:	f000 bda3 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80052a8:	4b39      	ldr	r3, [pc, #228]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052b4:	d107      	bne.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 80052b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052bc:	d103      	bne.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 80052be:	4b35      	ldr	r3, [pc, #212]	@ (8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80052c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80052c2:	f000 bd94 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ca:	f000 bd90 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80052ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052d2:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80052d6:	430b      	orrs	r3, r1
 80052d8:	d160      	bne.n	800539c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80052da:	4b2d      	ldr	r3, [pc, #180]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80052dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80052e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e8:	2b04      	cmp	r3, #4
 80052ea:	d84c      	bhi.n	8005386 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 80052ec:	a201      	add	r2, pc, #4	@ (adr r2, 80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80052ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f2:	bf00      	nop
 80052f4:	0800532d 	.word	0x0800532d
 80052f8:	08005309 	.word	0x08005309
 80052fc:	0800531b 	.word	0x0800531b
 8005300:	08005337 	.word	0x08005337
 8005304:	08005341 	.word	0x08005341
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005308:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff f82d 	bl	800436c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005314:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005316:	f000 bd6a 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800531a:	f107 030c 	add.w	r3, r7, #12
 800531e:	4618      	mov	r0, r3
 8005320:	f7ff fad8 	bl	80048d4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005328:	f000 bd61 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800532c:	f7fe fa04 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 8005330:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005332:	f000 bd5c 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005336:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800533a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800533c:	f000 bd57 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005340:	4b13      	ldr	r3, [pc, #76]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b20      	cmp	r3, #32
 800534a:	d118      	bne.n	800537e <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800534c:	4b10      	ldr	r3, [pc, #64]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d005      	beq.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8005358:	4b0d      	ldr	r3, [pc, #52]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	0e1b      	lsrs	r3, r3, #24
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	e006      	b.n	8005372 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8005364:	4b0a      	ldr	r3, [pc, #40]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005366:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800536a:	041b      	lsls	r3, r3, #16
 800536c:	0e1b      	lsrs	r3, r3, #24
 800536e:	f003 030f 	and.w	r3, r3, #15
 8005372:	4a09      	ldr	r2, [pc, #36]	@ (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005378:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800537a:	f000 bd38 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005382:	f000 bd34 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800538a:	f000 bd30 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800538e:	bf00      	nop
 8005390:	46020c00 	.word	0x46020c00
 8005394:	00f42400 	.word	0x00f42400
 8005398:	08008bbc 	.word	0x08008bbc
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800539c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053a0:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80053a4:	430b      	orrs	r3, r1
 80053a6:	d167      	bne.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80053a8:	4ba0      	ldr	r3, [pc, #640]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80053aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053ae:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80053b2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80053b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80053ba:	d036      	beq.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80053bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80053c2:	d855      	bhi.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80053c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80053ca:	d029      	beq.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 80053cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80053d2:	d84d      	bhi.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80053d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053da:	d013      	beq.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 80053dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053e2:	d845      	bhi.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80053e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d015      	beq.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 80053ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053f0:	d13e      	bne.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fe ffb8 	bl	800436c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80053fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005400:	f000 bcf5 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005404:	f107 030c 	add.w	r3, r7, #12
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff fa63 	bl	80048d4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005412:	f000 bcec 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005416:	f7fe f98f 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 800541a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800541c:	f000 bce7 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005420:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005424:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005426:	f000 bce2 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800542a:	4b80      	ldr	r3, [pc, #512]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b20      	cmp	r3, #32
 8005434:	d118      	bne.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005436:	4b7d      	ldr	r3, [pc, #500]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8005442:	4b7a      	ldr	r3, [pc, #488]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	0e1b      	lsrs	r3, r3, #24
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	e006      	b.n	800545c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 800544e:	4b77      	ldr	r3, [pc, #476]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005450:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005454:	041b      	lsls	r3, r3, #16
 8005456:	0e1b      	lsrs	r3, r3, #24
 8005458:	f003 030f 	and.w	r3, r3, #15
 800545c:	4a74      	ldr	r2, [pc, #464]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800545e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005462:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005464:	f000 bcc3 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800546c:	f000 bcbf 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005474:	f000 bcbb 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8005478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800547c:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8005480:	430b      	orrs	r3, r1
 8005482:	d14c      	bne.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005484:	4b69      	ldr	r3, [pc, #420]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800548a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800548e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005492:	2b00      	cmp	r3, #0
 8005494:	d104      	bne.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005496:	f7fe f969 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 800549a:	6378      	str	r0, [r7, #52]	@ 0x34
 800549c:	f000 bca7 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80054a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054a6:	d104      	bne.n	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80054a8:	f7fe f844 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 80054ac:	6378      	str	r0, [r7, #52]	@ 0x34
 80054ae:	f000 bc9e 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80054b2:	4b5e      	ldr	r3, [pc, #376]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054be:	d107      	bne.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 80054c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054c6:	d103      	bne.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 80054c8:	4b5a      	ldr	r3, [pc, #360]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80054ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80054cc:	f000 bc8f 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80054d0:	4b56      	ldr	r3, [pc, #344]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0320 	and.w	r3, r3, #32
 80054d8:	2b20      	cmp	r3, #32
 80054da:	d11c      	bne.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 80054dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054e2:	d118      	bne.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80054e4:	4b51      	ldr	r3, [pc, #324]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 80054f0:	4b4e      	ldr	r3, [pc, #312]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	0e1b      	lsrs	r3, r3, #24
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	e006      	b.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 80054fc:	4b4b      	ldr	r3, [pc, #300]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80054fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005502:	041b      	lsls	r3, r3, #16
 8005504:	0e1b      	lsrs	r3, r3, #24
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	4a49      	ldr	r2, [pc, #292]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800550c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005510:	637b      	str	r3, [r7, #52]	@ 0x34
 8005512:	f000 bc6c 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8005516:	2300      	movs	r3, #0
 8005518:	637b      	str	r3, [r7, #52]	@ 0x34
 800551a:	f000 bc68 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800551e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005522:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8005526:	430b      	orrs	r3, r1
 8005528:	d14c      	bne.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800552a:	4b40      	ldr	r3, [pc, #256]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800552c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005530:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005534:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005538:	2b00      	cmp	r3, #0
 800553a:	d104      	bne.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800553c:	f7fe f916 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 8005540:	6378      	str	r0, [r7, #52]	@ 0x34
 8005542:	f000 bc54 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8005546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005548:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800554c:	d104      	bne.n	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800554e:	f7fd fff1 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 8005552:	6378      	str	r0, [r7, #52]	@ 0x34
 8005554:	f000 bc4b 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005558:	4b34      	ldr	r3, [pc, #208]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005564:	d107      	bne.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 8005566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005568:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800556c:	d103      	bne.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 800556e:	4b31      	ldr	r3, [pc, #196]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005570:	637b      	str	r3, [r7, #52]	@ 0x34
 8005572:	f000 bc3c 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8005576:	4b2d      	ldr	r3, [pc, #180]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b20      	cmp	r3, #32
 8005580:	d11c      	bne.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 8005582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005584:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005588:	d118      	bne.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800558a:	4b28      	ldr	r3, [pc, #160]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d005      	beq.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8005596:	4b25      	ldr	r3, [pc, #148]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	0e1b      	lsrs	r3, r3, #24
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	e006      	b.n	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 80055a2:	4b22      	ldr	r3, [pc, #136]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80055a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80055a8:	041b      	lsls	r3, r3, #16
 80055aa:	0e1b      	lsrs	r3, r3, #24
 80055ac:	f003 030f 	and.w	r3, r3, #15
 80055b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80055b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80055b8:	f000 bc19 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	637b      	str	r3, [r7, #52]	@ 0x34
 80055c0:	f000 bc15 	b.w	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80055c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055c8:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80055cc:	430b      	orrs	r3, r1
 80055ce:	d157      	bne.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80055d0:	4b16      	ldr	r3, [pc, #88]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80055d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80055da:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80055dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055de:	2bc0      	cmp	r3, #192	@ 0xc0
 80055e0:	d02a      	beq.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80055e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e4:	2bc0      	cmp	r3, #192	@ 0xc0
 80055e6:	d848      	bhi.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80055e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ea:	2b80      	cmp	r3, #128	@ 0x80
 80055ec:	d00d      	beq.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80055ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f0:	2b80      	cmp	r3, #128	@ 0x80
 80055f2:	d842      	bhi.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80055f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 80055fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fc:	2b40      	cmp	r3, #64	@ 0x40
 80055fe:	d011      	beq.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005600:	e03b      	b.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8005602:	f7fe f8db 	bl	80037bc <HAL_RCC_GetPCLK3Freq>
 8005606:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005608:	e3f1      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800560a:	4b08      	ldr	r3, [pc, #32]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005612:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005616:	d102      	bne.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 8005618:	4b06      	ldr	r3, [pc, #24]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800561a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800561c:	e3e7      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005622:	e3e4      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8005624:	f7fd ff86 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 8005628:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800562a:	e3e0      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800562c:	46020c00 	.word	0x46020c00
 8005630:	08008bbc 	.word	0x08008bbc
 8005634:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005638:	4ba3      	ldr	r3, [pc, #652]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	2b20      	cmp	r3, #32
 8005642:	d117      	bne.n	8005674 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005644:	4ba0      	ldr	r3, [pc, #640]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d005      	beq.n	800565c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 8005650:	4b9d      	ldr	r3, [pc, #628]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	0e1b      	lsrs	r3, r3, #24
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	e006      	b.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 800565c:	4b9a      	ldr	r3, [pc, #616]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800565e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005662:	041b      	lsls	r3, r3, #16
 8005664:	0e1b      	lsrs	r3, r3, #24
 8005666:	f003 030f 	and.w	r3, r3, #15
 800566a:	4a98      	ldr	r2, [pc, #608]	@ (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800566c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005670:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005672:	e3bc      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005678:	e3b9      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800567e:	e3b6      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8005680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005684:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8005688:	430b      	orrs	r3, r1
 800568a:	d147      	bne.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800568c:	4b8e      	ldr	r3, [pc, #568]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800568e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005692:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005696:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569a:	2b00      	cmp	r3, #0
 800569c:	d103      	bne.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800569e:	f7fe f865 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 80056a2:	6378      	str	r0, [r7, #52]	@ 0x34
 80056a4:	e3a3      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80056a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056ac:	d103      	bne.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80056ae:	f7fd ff41 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 80056b2:	6378      	str	r0, [r7, #52]	@ 0x34
 80056b4:	e39b      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80056b6:	4b84      	ldr	r3, [pc, #528]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056c2:	d106      	bne.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 80056c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056ca:	d102      	bne.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 80056cc:	4b80      	ldr	r3, [pc, #512]	@ (80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80056ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80056d0:	e38d      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80056d2:	4b7d      	ldr	r3, [pc, #500]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0320 	and.w	r3, r3, #32
 80056da:	2b20      	cmp	r3, #32
 80056dc:	d11b      	bne.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 80056de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80056e4:	d117      	bne.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80056e6:	4b78      	ldr	r3, [pc, #480]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d005      	beq.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 80056f2:	4b75      	ldr	r3, [pc, #468]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	0e1b      	lsrs	r3, r3, #24
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	e006      	b.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 80056fe:	4b72      	ldr	r3, [pc, #456]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005700:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005704:	041b      	lsls	r3, r3, #16
 8005706:	0e1b      	lsrs	r3, r3, #24
 8005708:	f003 030f 	and.w	r3, r3, #15
 800570c:	4a6f      	ldr	r2, [pc, #444]	@ (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800570e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005712:	637b      	str	r3, [r7, #52]	@ 0x34
 8005714:	e36b      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	637b      	str	r3, [r7, #52]	@ 0x34
 800571a:	e368      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800571c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005720:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005724:	430b      	orrs	r3, r1
 8005726:	d164      	bne.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8005728:	4b67      	ldr	r3, [pc, #412]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800572a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800572e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005732:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8005734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005736:	2b00      	cmp	r3, #0
 8005738:	d120      	bne.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800573a:	4b63      	ldr	r3, [pc, #396]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0320 	and.w	r3, r3, #32
 8005742:	2b20      	cmp	r3, #32
 8005744:	d117      	bne.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005746:	4b60      	ldr	r3, [pc, #384]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d005      	beq.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 8005752:	4b5d      	ldr	r3, [pc, #372]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	0e1b      	lsrs	r3, r3, #24
 8005758:	f003 030f 	and.w	r3, r3, #15
 800575c:	e006      	b.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 800575e:	4b5a      	ldr	r3, [pc, #360]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005760:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005764:	041b      	lsls	r3, r3, #16
 8005766:	0e1b      	lsrs	r3, r3, #24
 8005768:	f003 030f 	and.w	r3, r3, #15
 800576c:	4a57      	ldr	r2, [pc, #348]	@ (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800576e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005772:	637b      	str	r3, [r7, #52]	@ 0x34
 8005774:	e33b      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8005776:	2300      	movs	r3, #0
 8005778:	637b      	str	r3, [r7, #52]	@ 0x34
 800577a:	e338      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800577c:	4b52      	ldr	r3, [pc, #328]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800577e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005782:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005786:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800578a:	d112      	bne.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 800578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005792:	d10e      	bne.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005794:	4b4c      	ldr	r3, [pc, #304]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005796:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800579a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800579e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057a2:	d102      	bne.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 80057a4:	23fa      	movs	r3, #250	@ 0xfa
 80057a6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80057a8:	e321      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80057aa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80057ae:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80057b0:	e31d      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80057b2:	4b45      	ldr	r3, [pc, #276]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057be:	d106      	bne.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 80057c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057c6:	d102      	bne.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 80057c8:	4b41      	ldr	r3, [pc, #260]	@ (80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80057ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80057cc:	e30f      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80057ce:	4b3e      	ldr	r3, [pc, #248]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80057d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d107      	bne.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 80057dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057e2:	d103      	bne.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 80057e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80057ea:	e300      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80057f0:	e2fd      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80057f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057f6:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80057fa:	430b      	orrs	r3, r1
 80057fc:	d16a      	bne.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80057fe:	4b32      	ldr	r3, [pc, #200]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005800:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005804:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005808:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800580a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580c:	2b00      	cmp	r3, #0
 800580e:	d120      	bne.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005810:	4b2d      	ldr	r3, [pc, #180]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b20      	cmp	r3, #32
 800581a:	d117      	bne.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800581c:	4b2a      	ldr	r3, [pc, #168]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d005      	beq.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8005828:	4b27      	ldr	r3, [pc, #156]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	0e1b      	lsrs	r3, r3, #24
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	e006      	b.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8005834:	4b24      	ldr	r3, [pc, #144]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005836:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800583a:	041b      	lsls	r3, r3, #16
 800583c:	0e1b      	lsrs	r3, r3, #24
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	4a22      	ldr	r2, [pc, #136]	@ (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005848:	637b      	str	r3, [r7, #52]	@ 0x34
 800584a:	e2d0      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005850:	e2cd      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005852:	4b1d      	ldr	r3, [pc, #116]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005858:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800585c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005860:	d112      	bne.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8005862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005864:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005868:	d10e      	bne.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800586a:	4b17      	ldr	r3, [pc, #92]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800586c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005874:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005878:	d102      	bne.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 800587a:	23fa      	movs	r3, #250	@ 0xfa
 800587c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800587e:	e2b6      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005880:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005884:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005886:	e2b2      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005888:	4b0f      	ldr	r3, [pc, #60]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005890:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005894:	d106      	bne.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8005896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005898:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800589c:	d102      	bne.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 800589e:	4b0c      	ldr	r3, [pc, #48]	@ (80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80058a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80058a2:	e2a4      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80058a4:	4b08      	ldr	r3, [pc, #32]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80058a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d107      	bne.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80058b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058b8:	d103      	bne.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 80058ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058be:	637b      	str	r3, [r7, #52]	@ 0x34
 80058c0:	e295      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80058c6:	e292      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80058c8:	46020c00 	.word	0x46020c00
 80058cc:	08008bbc 	.word	0x08008bbc
 80058d0:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80058d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058d8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80058dc:	430b      	orrs	r3, r1
 80058de:	d147      	bne.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80058e0:	4b9a      	ldr	r3, [pc, #616]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80058e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058e6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80058ea:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80058ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d103      	bne.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80058f2:	f7fd ff3b 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 80058f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80058f8:	e279      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80058fa:	4b94      	ldr	r3, [pc, #592]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80058fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005900:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005904:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005908:	d112      	bne.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 800590a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005910:	d10e      	bne.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005912:	4b8e      	ldr	r3, [pc, #568]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005914:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800591c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005920:	d102      	bne.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 8005922:	23fa      	movs	r3, #250	@ 0xfa
 8005924:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005926:	e262      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005928:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800592c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800592e:	e25e      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005930:	4b86      	ldr	r3, [pc, #536]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800593c:	d106      	bne.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 800593e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005940:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005944:	d102      	bne.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 8005946:	4b82      	ldr	r3, [pc, #520]	@ (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005948:	637b      	str	r3, [r7, #52]	@ 0x34
 800594a:	e250      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800594c:	4b7f      	ldr	r3, [pc, #508]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800594e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b02      	cmp	r3, #2
 8005958:	d107      	bne.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 800595a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005960:	d103      	bne.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 8005962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005966:	637b      	str	r3, [r7, #52]	@ 0x34
 8005968:	e241      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	637b      	str	r3, [r7, #52]	@ 0x34
 800596e:	e23e      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005974:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8005978:	430b      	orrs	r3, r1
 800597a:	d12d      	bne.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800597c:	4b73      	ldr	r3, [pc, #460]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800597e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005982:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005986:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005988:	4b70      	ldr	r3, [pc, #448]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005990:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005994:	d105      	bne.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005998:	2b00      	cmp	r3, #0
 800599a:	d102      	bne.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 800599c:	4b6c      	ldr	r3, [pc, #432]	@ (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 800599e:	637b      	str	r3, [r7, #52]	@ 0x34
 80059a0:	e225      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80059a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059a8:	d107      	bne.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fe fcdc 	bl	800436c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80059b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80059b8:	e219      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80059ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059c0:	d107      	bne.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059c2:	f107 0318 	add.w	r3, r7, #24
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fe fe2a 	bl	8004620 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80059d0:	e20d      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80059d6:	e20a      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80059d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059dc:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80059e0:	430b      	orrs	r3, r1
 80059e2:	d156      	bne.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80059e4:	4b59      	ldr	r3, [pc, #356]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80059e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059ea:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80059ee:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80059f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059f6:	d028      	beq.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 80059f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059fe:	d845      	bhi.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8005a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a06:	d013      	beq.n	8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8005a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a0e:	d83d      	bhi.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8005a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d004      	beq.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 8005a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a1c:	d004      	beq.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 8005a1e:	e035      	b.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005a20:	f7fd feb8 	bl	8003794 <HAL_RCC_GetPCLK2Freq>
 8005a24:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005a26:	e1e2      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005a28:	f7fd fd84 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 8005a2c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005a2e:	e1de      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a30:	4b46      	ldr	r3, [pc, #280]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a3c:	d102      	bne.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 8005a3e:	4b44      	ldr	r3, [pc, #272]	@ (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005a40:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005a42:	e1d4      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a48:	e1d1      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005a4a:	4b40      	ldr	r3, [pc, #256]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	d117      	bne.n	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005a56:	4b3d      	ldr	r3, [pc, #244]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d005      	beq.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 8005a62:	4b3a      	ldr	r3, [pc, #232]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	0e1b      	lsrs	r3, r3, #24
 8005a68:	f003 030f 	and.w	r3, r3, #15
 8005a6c:	e006      	b.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8005a6e:	4b37      	ldr	r3, [pc, #220]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005a70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a74:	041b      	lsls	r3, r3, #16
 8005a76:	0e1b      	lsrs	r3, r3, #24
 8005a78:	f003 030f 	and.w	r3, r3, #15
 8005a7c:	4a35      	ldr	r2, [pc, #212]	@ (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8005a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a82:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005a84:	e1b3      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a8a:	e1b0      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a90:	e1ad      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005a92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a96:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8005a9a:	430b      	orrs	r3, r1
 8005a9c:	d15c      	bne.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005aa4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005aa8:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ab0:	d028      	beq.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ab8:	d845      	bhi.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8005aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005abc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ac0:	d013      	beq.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ac8:	d83d      	bhi.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8005aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d004      	beq.n	8005ada <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8005ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ad6:	d004      	beq.n	8005ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8005ad8:	e035      	b.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005ada:	f7fd fe47 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 8005ade:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005ae0:	e185      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005ae2:	f7fd fd27 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 8005ae6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005ae8:	e181      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005aea:	4b18      	ldr	r3, [pc, #96]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005af2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005af6:	d102      	bne.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 8005af8:	4b15      	ldr	r3, [pc, #84]	@ (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005afa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005afc:	e177      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b02:	e174      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005b04:	4b11      	ldr	r3, [pc, #68]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	d117      	bne.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005b10:	4b0e      	ldr	r3, [pc, #56]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d005      	beq.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 8005b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	0e1b      	lsrs	r3, r3, #24
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	e006      	b.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8005b28:	4b08      	ldr	r3, [pc, #32]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005b2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b2e:	041b      	lsls	r3, r3, #16
 8005b30:	0e1b      	lsrs	r3, r3, #24
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	4a07      	ldr	r2, [pc, #28]	@ (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8005b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b3c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005b3e:	e156      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b44:	e153      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b4a:	e150      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005b4c:	46020c00 	.word	0x46020c00
 8005b50:	00f42400 	.word	0x00f42400
 8005b54:	08008bbc 	.word	0x08008bbc
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b5c:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8005b60:	430b      	orrs	r3, r1
 8005b62:	d176      	bne.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005b64:	4ba4      	ldr	r3, [pc, #656]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005b66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005b6a:	f003 0318 	and.w	r3, r3, #24
 8005b6e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b72:	2b18      	cmp	r3, #24
 8005b74:	d86a      	bhi.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8005b76:	a201      	add	r2, pc, #4	@ (adr r2, 8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8005b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7c:	08005be1 	.word	0x08005be1
 8005b80:	08005c4d 	.word	0x08005c4d
 8005b84:	08005c4d 	.word	0x08005c4d
 8005b88:	08005c4d 	.word	0x08005c4d
 8005b8c:	08005c4d 	.word	0x08005c4d
 8005b90:	08005c4d 	.word	0x08005c4d
 8005b94:	08005c4d 	.word	0x08005c4d
 8005b98:	08005c4d 	.word	0x08005c4d
 8005b9c:	08005be9 	.word	0x08005be9
 8005ba0:	08005c4d 	.word	0x08005c4d
 8005ba4:	08005c4d 	.word	0x08005c4d
 8005ba8:	08005c4d 	.word	0x08005c4d
 8005bac:	08005c4d 	.word	0x08005c4d
 8005bb0:	08005c4d 	.word	0x08005c4d
 8005bb4:	08005c4d 	.word	0x08005c4d
 8005bb8:	08005c4d 	.word	0x08005c4d
 8005bbc:	08005bf1 	.word	0x08005bf1
 8005bc0:	08005c4d 	.word	0x08005c4d
 8005bc4:	08005c4d 	.word	0x08005c4d
 8005bc8:	08005c4d 	.word	0x08005c4d
 8005bcc:	08005c4d 	.word	0x08005c4d
 8005bd0:	08005c4d 	.word	0x08005c4d
 8005bd4:	08005c4d 	.word	0x08005c4d
 8005bd8:	08005c4d 	.word	0x08005c4d
 8005bdc:	08005c0b 	.word	0x08005c0b
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005be0:	f7fd fdec 	bl	80037bc <HAL_RCC_GetPCLK3Freq>
 8005be4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005be6:	e102      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005be8:	f7fd fca4 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 8005bec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005bee:	e0fe      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bf0:	4b81      	ldr	r3, [pc, #516]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bfc:	d102      	bne.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 8005bfe:	4b7f      	ldr	r3, [pc, #508]	@ (8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8005c00:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c02:	e0f4      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c08:	e0f1      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005c0a:	4b7b      	ldr	r3, [pc, #492]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b20      	cmp	r3, #32
 8005c14:	d117      	bne.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005c16:	4b78      	ldr	r3, [pc, #480]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d005      	beq.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8005c22:	4b75      	ldr	r3, [pc, #468]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	0e1b      	lsrs	r3, r3, #24
 8005c28:	f003 030f 	and.w	r3, r3, #15
 8005c2c:	e006      	b.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 8005c2e:	4b72      	ldr	r3, [pc, #456]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005c30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c34:	041b      	lsls	r3, r3, #16
 8005c36:	0e1b      	lsrs	r3, r3, #24
 8005c38:	f003 030f 	and.w	r3, r3, #15
 8005c3c:	4a70      	ldr	r2, [pc, #448]	@ (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c42:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c44:	e0d3      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c4a:	e0d0      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c50:	e0cd      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005c52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c56:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8005c5a:	430b      	orrs	r3, r1
 8005c5c:	d155      	bne.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005c5e:	4b66      	ldr	r3, [pc, #408]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005c60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c64:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005c68:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c70:	d013      	beq.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 8005c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c78:	d844      	bhi.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c80:	d013      	beq.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 8005c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c88:	d83c      	bhi.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d014      	beq.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 8005c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c96:	d014      	beq.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8005c98:	e034      	b.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c9a:	f107 0318 	add.w	r3, r7, #24
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fe fcbe 	bl	8004620 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ca8:	e0a1      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005caa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fe fb5c 	bl	800436c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005cb8:	e099      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005cba:	f7fd fc3b 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 8005cbe:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005cc0:	e095      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005cc2:	4b4d      	ldr	r3, [pc, #308]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0320 	and.w	r3, r3, #32
 8005cca:	2b20      	cmp	r3, #32
 8005ccc:	d117      	bne.n	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005cce:	4b4a      	ldr	r3, [pc, #296]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d005      	beq.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 8005cda:	4b47      	ldr	r3, [pc, #284]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	0e1b      	lsrs	r3, r3, #24
 8005ce0:	f003 030f 	and.w	r3, r3, #15
 8005ce4:	e006      	b.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 8005ce6:	4b44      	ldr	r3, [pc, #272]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005ce8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005cec:	041b      	lsls	r3, r3, #16
 8005cee:	0e1b      	lsrs	r3, r3, #24
 8005cf0:	f003 030f 	and.w	r3, r3, #15
 8005cf4:	4a42      	ldr	r2, [pc, #264]	@ (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cfa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005cfc:	e077      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d02:	e074      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d08:	e071      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005d0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d0e:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8005d12:	430b      	orrs	r3, r1
 8005d14:	d131      	bne.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005d16:	4b38      	ldr	r3, [pc, #224]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005d18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d20:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005d22:	4b35      	ldr	r3, [pc, #212]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005d24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d106      	bne.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8005d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d103      	bne.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 8005d36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d3c:	e057      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005d3e:	4b2e      	ldr	r3, [pc, #184]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005d40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d4c:	d112      	bne.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d54:	d10e      	bne.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005d56:	4b28      	ldr	r3, [pc, #160]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d64:	d102      	bne.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 8005d66:	23fa      	movs	r3, #250	@ 0xfa
 8005d68:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005d6a:	e040      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005d6c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005d70:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005d72:	e03c      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d78:	e039      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d7e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005d82:	430b      	orrs	r3, r1
 8005d84:	d131      	bne.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005d86:	4b1c      	ldr	r3, [pc, #112]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005d88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d8c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005d90:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005d92:	4b19      	ldr	r3, [pc, #100]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d9e:	d105      	bne.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8005da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d102      	bne.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 8005da6:	4b17      	ldr	r3, [pc, #92]	@ (8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 8005da8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005daa:	e020      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8005dac:	4b12      	ldr	r3, [pc, #72]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005db4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005db8:	d106      	bne.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 8005dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dc0:	d102      	bne.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005dc2:	4b11      	ldr	r3, [pc, #68]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005dc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dc6:	e012      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8005dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dd4:	d106      	bne.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ddc:	d102      	bne.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 8005dde:	4b07      	ldr	r3, [pc, #28]	@ (8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8005de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005de2:	e004      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005de8:	e001      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8005dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3738      	adds	r7, #56	@ 0x38
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	46020c00 	.word	0x46020c00
 8005dfc:	00f42400 	.word	0x00f42400
 8005e00:	08008bbc 	.word	0x08008bbc
 8005e04:	02dc6c00 	.word	0x02dc6c00
 8005e08:	016e3600 	.word	0x016e3600

08005e0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005e14:	4b47      	ldr	r3, [pc, #284]	@ (8005f34 <RCCEx_PLL2_Config+0x128>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a46      	ldr	r2, [pc, #280]	@ (8005f34 <RCCEx_PLL2_Config+0x128>)
 8005e1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005e1e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e20:	f7fb fd38 	bl	8001894 <HAL_GetTick>
 8005e24:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e26:	e008      	b.n	8005e3a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005e28:	f7fb fd34 	bl	8001894 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d901      	bls.n	8005e3a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e077      	b.n	8005f2a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8005f34 <RCCEx_PLL2_Config+0x128>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1f0      	bne.n	8005e28 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005e46:	4b3b      	ldr	r3, [pc, #236]	@ (8005f34 <RCCEx_PLL2_Config+0x128>)
 8005e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005e4e:	f023 0303 	bic.w	r3, r3, #3
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6811      	ldr	r1, [r2, #0]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6852      	ldr	r2, [r2, #4]
 8005e5a:	3a01      	subs	r2, #1
 8005e5c:	0212      	lsls	r2, r2, #8
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	4934      	ldr	r1, [pc, #208]	@ (8005f34 <RCCEx_PLL2_Config+0x128>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005e66:	4b33      	ldr	r3, [pc, #204]	@ (8005f34 <RCCEx_PLL2_Config+0x128>)
 8005e68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e6a:	4b33      	ldr	r3, [pc, #204]	@ (8005f38 <RCCEx_PLL2_Config+0x12c>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6892      	ldr	r2, [r2, #8]
 8005e72:	3a01      	subs	r2, #1
 8005e74:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	68d2      	ldr	r2, [r2, #12]
 8005e7c:	3a01      	subs	r2, #1
 8005e7e:	0252      	lsls	r2, r2, #9
 8005e80:	b292      	uxth	r2, r2
 8005e82:	4311      	orrs	r1, r2
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	6912      	ldr	r2, [r2, #16]
 8005e88:	3a01      	subs	r2, #1
 8005e8a:	0412      	lsls	r2, r2, #16
 8005e8c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005e90:	4311      	orrs	r1, r2
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6952      	ldr	r2, [r2, #20]
 8005e96:	3a01      	subs	r2, #1
 8005e98:	0612      	lsls	r2, r2, #24
 8005e9a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	4924      	ldr	r1, [pc, #144]	@ (8005f34 <RCCEx_PLL2_Config+0x128>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005ea6:	4b23      	ldr	r3, [pc, #140]	@ (8005f34 <RCCEx_PLL2_Config+0x128>)
 8005ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eaa:	f023 020c 	bic.w	r2, r3, #12
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	4920      	ldr	r1, [pc, #128]	@ (8005f34 <RCCEx_PLL2_Config+0x128>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8005f34 <RCCEx_PLL2_Config+0x128>)
 8005eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	491c      	ldr	r1, [pc, #112]	@ (8005f34 <RCCEx_PLL2_Config+0x128>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8005f34 <RCCEx_PLL2_Config+0x128>)
 8005ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eca:	4a1a      	ldr	r2, [pc, #104]	@ (8005f34 <RCCEx_PLL2_Config+0x128>)
 8005ecc:	f023 0310 	bic.w	r3, r3, #16
 8005ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005ed2:	4b18      	ldr	r3, [pc, #96]	@ (8005f34 <RCCEx_PLL2_Config+0x128>)
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005eda:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	69d2      	ldr	r2, [r2, #28]
 8005ee2:	00d2      	lsls	r2, r2, #3
 8005ee4:	4913      	ldr	r1, [pc, #76]	@ (8005f34 <RCCEx_PLL2_Config+0x128>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005eea:	4b12      	ldr	r3, [pc, #72]	@ (8005f34 <RCCEx_PLL2_Config+0x128>)
 8005eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eee:	4a11      	ldr	r2, [pc, #68]	@ (8005f34 <RCCEx_PLL2_Config+0x128>)
 8005ef0:	f043 0310 	orr.w	r3, r3, #16
 8005ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8005ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8005f34 <RCCEx_PLL2_Config+0x128>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a0e      	ldr	r2, [pc, #56]	@ (8005f34 <RCCEx_PLL2_Config+0x128>)
 8005efc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005f00:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f02:	f7fb fcc7 	bl	8001894 <HAL_GetTick>
 8005f06:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f08:	e008      	b.n	8005f1c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005f0a:	f7fb fcc3 	bl	8001894 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d901      	bls.n	8005f1c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e006      	b.n	8005f2a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f1c:	4b05      	ldr	r3, [pc, #20]	@ (8005f34 <RCCEx_PLL2_Config+0x128>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d0f0      	beq.n	8005f0a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0

}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	46020c00 	.word	0x46020c00
 8005f38:	80800000 	.word	0x80800000

08005f3c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005f44:	4b47      	ldr	r3, [pc, #284]	@ (8006064 <RCCEx_PLL3_Config+0x128>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a46      	ldr	r2, [pc, #280]	@ (8006064 <RCCEx_PLL3_Config+0x128>)
 8005f4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f4e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f50:	f7fb fca0 	bl	8001894 <HAL_GetTick>
 8005f54:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f56:	e008      	b.n	8005f6a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005f58:	f7fb fc9c 	bl	8001894 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d901      	bls.n	8005f6a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e077      	b.n	800605a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8006064 <RCCEx_PLL3_Config+0x128>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1f0      	bne.n	8005f58 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005f76:	4b3b      	ldr	r3, [pc, #236]	@ (8006064 <RCCEx_PLL3_Config+0x128>)
 8005f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f7a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005f7e:	f023 0303 	bic.w	r3, r3, #3
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6811      	ldr	r1, [r2, #0]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	6852      	ldr	r2, [r2, #4]
 8005f8a:	3a01      	subs	r2, #1
 8005f8c:	0212      	lsls	r2, r2, #8
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	4934      	ldr	r1, [pc, #208]	@ (8006064 <RCCEx_PLL3_Config+0x128>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	630b      	str	r3, [r1, #48]	@ 0x30
 8005f96:	4b33      	ldr	r3, [pc, #204]	@ (8006064 <RCCEx_PLL3_Config+0x128>)
 8005f98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f9a:	4b33      	ldr	r3, [pc, #204]	@ (8006068 <RCCEx_PLL3_Config+0x12c>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6892      	ldr	r2, [r2, #8]
 8005fa2:	3a01      	subs	r2, #1
 8005fa4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	68d2      	ldr	r2, [r2, #12]
 8005fac:	3a01      	subs	r2, #1
 8005fae:	0252      	lsls	r2, r2, #9
 8005fb0:	b292      	uxth	r2, r2
 8005fb2:	4311      	orrs	r1, r2
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6912      	ldr	r2, [r2, #16]
 8005fb8:	3a01      	subs	r2, #1
 8005fba:	0412      	lsls	r2, r2, #16
 8005fbc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005fc0:	4311      	orrs	r1, r2
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6952      	ldr	r2, [r2, #20]
 8005fc6:	3a01      	subs	r2, #1
 8005fc8:	0612      	lsls	r2, r2, #24
 8005fca:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	4924      	ldr	r1, [pc, #144]	@ (8006064 <RCCEx_PLL3_Config+0x128>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005fd6:	4b23      	ldr	r3, [pc, #140]	@ (8006064 <RCCEx_PLL3_Config+0x128>)
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fda:	f023 020c 	bic.w	r2, r3, #12
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	4920      	ldr	r1, [pc, #128]	@ (8006064 <RCCEx_PLL3_Config+0x128>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8006064 <RCCEx_PLL3_Config+0x128>)
 8005fea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	491c      	ldr	r1, [pc, #112]	@ (8006064 <RCCEx_PLL3_Config+0x128>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8006064 <RCCEx_PLL3_Config+0x128>)
 8005ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ffa:	4a1a      	ldr	r2, [pc, #104]	@ (8006064 <RCCEx_PLL3_Config+0x128>)
 8005ffc:	f023 0310 	bic.w	r3, r3, #16
 8006000:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006002:	4b18      	ldr	r3, [pc, #96]	@ (8006064 <RCCEx_PLL3_Config+0x128>)
 8006004:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006006:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800600a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	69d2      	ldr	r2, [r2, #28]
 8006012:	00d2      	lsls	r2, r2, #3
 8006014:	4913      	ldr	r1, [pc, #76]	@ (8006064 <RCCEx_PLL3_Config+0x128>)
 8006016:	4313      	orrs	r3, r2
 8006018:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800601a:	4b12      	ldr	r3, [pc, #72]	@ (8006064 <RCCEx_PLL3_Config+0x128>)
 800601c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800601e:	4a11      	ldr	r2, [pc, #68]	@ (8006064 <RCCEx_PLL3_Config+0x128>)
 8006020:	f043 0310 	orr.w	r3, r3, #16
 8006024:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8006026:	4b0f      	ldr	r3, [pc, #60]	@ (8006064 <RCCEx_PLL3_Config+0x128>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a0e      	ldr	r2, [pc, #56]	@ (8006064 <RCCEx_PLL3_Config+0x128>)
 800602c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006030:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006032:	f7fb fc2f 	bl	8001894 <HAL_GetTick>
 8006036:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006038:	e008      	b.n	800604c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800603a:	f7fb fc2b 	bl	8001894 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d901      	bls.n	800604c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e006      	b.n	800605a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800604c:	4b05      	ldr	r3, [pc, #20]	@ (8006064 <RCCEx_PLL3_Config+0x128>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d0f0      	beq.n	800603a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	46020c00 	.word	0x46020c00
 8006068:	80800000 	.word	0x80800000

0800606c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e0fb      	b.n	8006276 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a7f      	ldr	r2, [pc, #508]	@ (8006280 <HAL_SPI_Init+0x214>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d004      	beq.n	8006092 <HAL_SPI_Init+0x26>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a7d      	ldr	r2, [pc, #500]	@ (8006284 <HAL_SPI_Init+0x218>)
 800608e:	4293      	cmp	r3, r2
 8006090:	e000      	b.n	8006094 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8006092:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a78      	ldr	r2, [pc, #480]	@ (8006280 <HAL_SPI_Init+0x214>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d004      	beq.n	80060ae <HAL_SPI_Init+0x42>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a76      	ldr	r2, [pc, #472]	@ (8006284 <HAL_SPI_Init+0x218>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d105      	bne.n	80060ba <HAL_SPI_Init+0x4e>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	2b0f      	cmp	r3, #15
 80060b4:	d901      	bls.n	80060ba <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e0dd      	b.n	8006276 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fbce 	bl	800685c <SPI_GetPacketSize>
 80060c0:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a6e      	ldr	r2, [pc, #440]	@ (8006280 <HAL_SPI_Init+0x214>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d004      	beq.n	80060d6 <HAL_SPI_Init+0x6a>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a6c      	ldr	r2, [pc, #432]	@ (8006284 <HAL_SPI_Init+0x218>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d102      	bne.n	80060dc <HAL_SPI_Init+0x70>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d816      	bhi.n	800610a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80060e0:	4a69      	ldr	r2, [pc, #420]	@ (8006288 <HAL_SPI_Init+0x21c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00e      	beq.n	8006104 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a68      	ldr	r2, [pc, #416]	@ (800628c <HAL_SPI_Init+0x220>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d009      	beq.n	8006104 <HAL_SPI_Init+0x98>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a66      	ldr	r2, [pc, #408]	@ (8006290 <HAL_SPI_Init+0x224>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d004      	beq.n	8006104 <HAL_SPI_Init+0x98>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a65      	ldr	r2, [pc, #404]	@ (8006294 <HAL_SPI_Init+0x228>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d104      	bne.n	800610e <HAL_SPI_Init+0xa2>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b10      	cmp	r3, #16
 8006108:	d901      	bls.n	800610e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e0b3      	b.n	8006276 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d106      	bne.n	8006128 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7fa ff2a 	bl	8000f7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0201 	bic.w	r2, r2, #1
 800613e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800614a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006154:	d119      	bne.n	800618a <HAL_SPI_Init+0x11e>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800615e:	d103      	bne.n	8006168 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006164:	2b00      	cmp	r3, #0
 8006166:	d008      	beq.n	800617a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10c      	bne.n	800618a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006174:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006178:	d107      	bne.n	800618a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006188:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00f      	beq.n	80061b6 <HAL_SPI_Init+0x14a>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	2b06      	cmp	r3, #6
 800619c:	d90b      	bls.n	80061b6 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	e007      	b.n	80061c6 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80061c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	69da      	ldr	r2, [r3, #28]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ce:	431a      	orrs	r2, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	431a      	orrs	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d8:	ea42 0103 	orr.w	r1, r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f0:	431a      	orrs	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f6:	431a      	orrs	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	431a      	orrs	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	431a      	orrs	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	431a      	orrs	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800621a:	431a      	orrs	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	431a      	orrs	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006226:	431a      	orrs	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800622c:	431a      	orrs	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006232:	ea42 0103 	orr.w	r1, r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	46002000 	.word	0x46002000
 8006284:	56002000 	.word	0x56002000
 8006288:	40013000 	.word	0x40013000
 800628c:	50013000 	.word	0x50013000
 8006290:	40003800 	.word	0x40003800
 8006294:	50003800 	.word	0x50003800

08006298 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b088      	sub	sp, #32
 800629c:	af02      	add	r7, sp, #8
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	603b      	str	r3, [r7, #0]
 80062a4:	4613      	mov	r3, r2
 80062a6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3320      	adds	r3, #32
 80062ae:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a90      	ldr	r2, [pc, #576]	@ (80064f8 <HAL_SPI_Transmit+0x260>)
 80062b6:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062b8:	f7fb faec 	bl	8001894 <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d001      	beq.n	80062ce <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 80062ca:	2302      	movs	r3, #2
 80062cc:	e1f4      	b.n	80066b8 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d002      	beq.n	80062da <HAL_SPI_Transmit+0x42>
 80062d4:	88fb      	ldrh	r3, [r7, #6]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e1ec      	b.n	80066b8 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d101      	bne.n	80062ec <HAL_SPI_Transmit+0x54>
 80062e8:	2302      	movs	r3, #2
 80062ea:	e1e5      	b.n	80066b8 <HAL_SPI_Transmit+0x420>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2203      	movs	r2, #3
 80062f8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	88fa      	ldrh	r2, [r7, #6]
 800630e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	88fa      	ldrh	r2, [r7, #6]
 8006316:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006344:	d108      	bne.n	8006358 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006354:	601a      	str	r2, [r3, #0]
 8006356:	e009      	b.n	800636c <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800636a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	0c1b      	lsrs	r3, r3, #16
 8006374:	041b      	lsls	r3, r3, #16
 8006376:	88f9      	ldrh	r1, [r7, #6]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	6812      	ldr	r2, [r2, #0]
 800637c:	430b      	orrs	r3, r1
 800637e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0201 	orr.w	r2, r2, #1
 800638e:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10c      	bne.n	80063b8 <HAL_SPI_Transmit+0x120>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063a6:	d107      	bne.n	80063b8 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	2b0f      	cmp	r3, #15
 80063be:	d95b      	bls.n	8006478 <HAL_SPI_Transmit+0x1e0>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a4d      	ldr	r2, [pc, #308]	@ (80064fc <HAL_SPI_Transmit+0x264>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d04f      	beq.n	800646a <HAL_SPI_Transmit+0x1d2>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a4c      	ldr	r2, [pc, #304]	@ (8006500 <HAL_SPI_Transmit+0x268>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d04a      	beq.n	800646a <HAL_SPI_Transmit+0x1d2>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a4a      	ldr	r2, [pc, #296]	@ (8006504 <HAL_SPI_Transmit+0x26c>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d045      	beq.n	800646a <HAL_SPI_Transmit+0x1d2>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a49      	ldr	r2, [pc, #292]	@ (8006508 <HAL_SPI_Transmit+0x270>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d147      	bne.n	8006478 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80063e8:	e03f      	b.n	800646a <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d114      	bne.n	8006422 <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6812      	ldr	r2, [r2, #0]
 8006402:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006408:	1d1a      	adds	r2, r3, #4
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006414:	b29b      	uxth	r3, r3
 8006416:	3b01      	subs	r3, #1
 8006418:	b29a      	uxth	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006420:	e023      	b.n	800646a <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006422:	f7fb fa37 	bl	8001894 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	429a      	cmp	r2, r3
 8006430:	d803      	bhi.n	800643a <HAL_SPI_Transmit+0x1a2>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006438:	d102      	bne.n	8006440 <HAL_SPI_Transmit+0x1a8>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d114      	bne.n	800646a <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 f93d 	bl	80066c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800644c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e126      	b.n	80066b8 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006470:	b29b      	uxth	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1b9      	bne.n	80063ea <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006476:	e0f9      	b.n	800666c <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	2b07      	cmp	r3, #7
 800647e:	f240 80ee 	bls.w	800665e <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006482:	e067      	b.n	8006554 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b02      	cmp	r3, #2
 8006490:	d13c      	bne.n	800650c <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006498:	b29b      	uxth	r3, r3
 800649a:	2b01      	cmp	r3, #1
 800649c:	d918      	bls.n	80064d0 <HAL_SPI_Transmit+0x238>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d014      	beq.n	80064d0 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6812      	ldr	r2, [r2, #0]
 80064b0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064b6:	1d1a      	adds	r2, r3, #4
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	3b02      	subs	r3, #2
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80064ce:	e041      	b.n	8006554 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064d4:	881a      	ldrh	r2, [r3, #0]
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064de:	1c9a      	adds	r2, r3, #2
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80064f6:	e02d      	b.n	8006554 <HAL_SPI_Transmit+0x2bc>
 80064f8:	46002000 	.word	0x46002000
 80064fc:	40013000 	.word	0x40013000
 8006500:	50013000 	.word	0x50013000
 8006504:	40003800 	.word	0x40003800
 8006508:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800650c:	f7fb f9c2 	bl	8001894 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	429a      	cmp	r2, r3
 800651a:	d803      	bhi.n	8006524 <HAL_SPI_Transmit+0x28c>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006522:	d102      	bne.n	800652a <HAL_SPI_Transmit+0x292>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d114      	bne.n	8006554 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 f8c8 	bl	80066c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006536:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e0b1      	b.n	80066b8 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800655a:	b29b      	uxth	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	d191      	bne.n	8006484 <HAL_SPI_Transmit+0x1ec>
 8006560:	e084      	b.n	800666c <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b02      	cmp	r3, #2
 800656e:	d152      	bne.n	8006616 <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006576:	b29b      	uxth	r3, r3
 8006578:	2b03      	cmp	r3, #3
 800657a:	d918      	bls.n	80065ae <HAL_SPI_Transmit+0x316>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006580:	2b40      	cmp	r3, #64	@ 0x40
 8006582:	d914      	bls.n	80065ae <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6812      	ldr	r2, [r2, #0]
 800658e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006594:	1d1a      	adds	r2, r3, #4
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	3b04      	subs	r3, #4
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80065ac:	e057      	b.n	800665e <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d917      	bls.n	80065ea <HAL_SPI_Transmit+0x352>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d013      	beq.n	80065ea <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065c6:	881a      	ldrh	r2, [r3, #0]
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065d0:	1c9a      	adds	r2, r3, #2
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80065dc:	b29b      	uxth	r3, r3
 80065de:	3b02      	subs	r3, #2
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80065e8:	e039      	b.n	800665e <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3320      	adds	r3, #32
 80065f4:	7812      	ldrb	r2, [r2, #0]
 80065f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065fc:	1c5a      	adds	r2, r3, #1
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006608:	b29b      	uxth	r3, r3
 800660a:	3b01      	subs	r3, #1
 800660c:	b29a      	uxth	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006614:	e023      	b.n	800665e <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006616:	f7fb f93d 	bl	8001894 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	429a      	cmp	r2, r3
 8006624:	d803      	bhi.n	800662e <HAL_SPI_Transmit+0x396>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800662c:	d102      	bne.n	8006634 <HAL_SPI_Transmit+0x39c>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d114      	bne.n	800665e <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 f843 	bl	80066c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006640:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e02c      	b.n	80066b8 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006664:	b29b      	uxth	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	f47f af7b 	bne.w	8006562 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2200      	movs	r2, #0
 8006674:	2108      	movs	r1, #8
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 f8c2 	bl	8006800 <SPI_WaitOnFlagUntilTimeout>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d007      	beq.n	8006692 <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006688:	f043 0220 	orr.w	r2, r3, #32
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 f814 	bl	80066c0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e000      	b.n	80066b8 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 80066b6:	2300      	movs	r3, #0
  }
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699a      	ldr	r2, [r3, #24]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0208 	orr.w	r2, r2, #8
 80066de:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	699a      	ldr	r2, [r3, #24]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f042 0210 	orr.w	r2, r2, #16
 80066ee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0201 	bic.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	6812      	ldr	r2, [r2, #0]
 800670a:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800670e:	f023 0303 	bic.w	r3, r3, #3
 8006712:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689a      	ldr	r2, [r3, #8]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006722:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b04      	cmp	r3, #4
 800672e:	d014      	beq.n	800675a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f003 0320 	and.w	r3, r3, #32
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00f      	beq.n	800675a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006740:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	699a      	ldr	r2, [r3, #24]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f042 0220 	orr.w	r2, r2, #32
 8006758:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b03      	cmp	r3, #3
 8006764:	d014      	beq.n	8006790 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00f      	beq.n	8006790 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006776:	f043 0204 	orr.w	r2, r3, #4
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699a      	ldr	r2, [r3, #24]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800678e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00f      	beq.n	80067ba <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067a0:	f043 0201 	orr.w	r2, r3, #1
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	699a      	ldr	r2, [r3, #24]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067b8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00f      	beq.n	80067e4 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067ca:	f043 0208 	orr.w	r2, r3, #8
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699a      	ldr	r2, [r3, #24]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067e2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80067f4:	bf00      	nop
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	603b      	str	r3, [r7, #0]
 800680c:	4613      	mov	r3, r2
 800680e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006810:	e010      	b.n	8006834 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006812:	f7fb f83f 	bl	8001894 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	429a      	cmp	r2, r3
 8006820:	d803      	bhi.n	800682a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006828:	d102      	bne.n	8006830 <SPI_WaitOnFlagUntilTimeout+0x30>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e00f      	b.n	8006854 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	695a      	ldr	r2, [r3, #20]
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	4013      	ands	r3, r2
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	429a      	cmp	r2, r3
 8006842:	bf0c      	ite	eq
 8006844:	2301      	moveq	r3, #1
 8006846:	2300      	movne	r3, #0
 8006848:	b2db      	uxtb	r3, r3
 800684a:	461a      	mov	r2, r3
 800684c:	79fb      	ldrb	r3, [r7, #7]
 800684e:	429a      	cmp	r2, r3
 8006850:	d0df      	beq.n	8006812 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006868:	095b      	lsrs	r3, r3, #5
 800686a:	3301      	adds	r3, #1
 800686c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	3301      	adds	r3, #1
 8006874:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	3307      	adds	r3, #7
 800687a:	08db      	lsrs	r3, r3, #3
 800687c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	fb02 f303 	mul.w	r3, r2, r3
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d12e      	bne.n	8006906 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d101      	bne.n	80068b6 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80068b2:	2302      	movs	r3, #2
 80068b4:	e028      	b.n	8006908 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2202      	movs	r2, #2
 80068c2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 0201 	bic.w	r2, r2, #1
 80068d4:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80068e2:	ea42 0103 	orr.w	r1, r2, r3
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	689a      	ldr	r2, [r3, #8]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006902:	2300      	movs	r3, #0
 8006904:	e000      	b.n	8006908 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
  }
}
 8006908:	4618      	mov	r0, r3
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e042      	b.n	80069ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800692c:	2b00      	cmp	r3, #0
 800692e:	d106      	bne.n	800693e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f7fa fb89 	bl	8001050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2224      	movs	r2, #36	@ 0x24
 8006942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 0201 	bic.w	r2, r2, #1
 8006954:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800695a:	2b00      	cmp	r3, #0
 800695c:	d002      	beq.n	8006964 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fab6 	bl	8006ed0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f91b 	bl	8006ba0 <UART_SetConfig>
 800696a:	4603      	mov	r3, r0
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e01b      	b.n	80069ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006982:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689a      	ldr	r2, [r3, #8]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006992:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0201 	orr.w	r2, r2, #1
 80069a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fb35 	bl	8007014 <UART_CheckIdleState>
 80069aa:	4603      	mov	r3, r0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b08a      	sub	sp, #40	@ 0x28
 80069b8:	af02      	add	r7, sp, #8
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	603b      	str	r3, [r7, #0]
 80069c0:	4613      	mov	r3, r2
 80069c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d17b      	bne.n	8006ac6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d002      	beq.n	80069da <HAL_UART_Transmit+0x26>
 80069d4:	88fb      	ldrh	r3, [r7, #6]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e074      	b.n	8006ac8 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2221      	movs	r2, #33	@ 0x21
 80069ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069ee:	f7fa ff51 	bl	8001894 <HAL_GetTick>
 80069f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	88fa      	ldrh	r2, [r7, #6]
 80069f8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	88fa      	ldrh	r2, [r7, #6]
 8006a00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a0c:	d108      	bne.n	8006a20 <HAL_UART_Transmit+0x6c>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d104      	bne.n	8006a20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006a16:	2300      	movs	r3, #0
 8006a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	61bb      	str	r3, [r7, #24]
 8006a1e:	e003      	b.n	8006a28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a24:	2300      	movs	r3, #0
 8006a26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a28:	e030      	b.n	8006a8c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	2200      	movs	r2, #0
 8006a32:	2180      	movs	r1, #128	@ 0x80
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 fb97 	bl	8007168 <UART_WaitOnFlagUntilTimeout>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d005      	beq.n	8006a4c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2220      	movs	r2, #32
 8006a44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e03d      	b.n	8006ac8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10b      	bne.n	8006a6a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	3302      	adds	r3, #2
 8006a66:	61bb      	str	r3, [r7, #24]
 8006a68:	e007      	b.n	8006a7a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	781a      	ldrb	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	3301      	adds	r3, #1
 8006a78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	3b01      	subs	r3, #1
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1c8      	bne.n	8006a2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2140      	movs	r1, #64	@ 0x40
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f000 fb60 	bl	8007168 <UART_WaitOnFlagUntilTimeout>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d005      	beq.n	8006aba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e006      	b.n	8006ac8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2220      	movs	r2, #32
 8006abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	e000      	b.n	8006ac8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006ac6:	2302      	movs	r3, #2
  }
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3720      	adds	r7, #32
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b08a      	sub	sp, #40	@ 0x28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	4613      	mov	r3, r2
 8006adc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ae4:	2b20      	cmp	r3, #32
 8006ae6:	d13c      	bne.n	8006b62 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <HAL_UART_Receive_IT+0x24>
 8006aee:	88fb      	ldrh	r3, [r7, #6]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e035      	b.n	8006b64 <HAL_UART_Receive_IT+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	66da      	str	r2, [r3, #108]	@ 0x6c
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a1a      	ldr	r2, [pc, #104]	@ (8006b6c <HAL_UART_Receive_IT+0x9c>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d024      	beq.n	8006b52 <HAL_UART_Receive_IT+0x82>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a18      	ldr	r2, [pc, #96]	@ (8006b70 <HAL_UART_Receive_IT+0xa0>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d01f      	beq.n	8006b52 <HAL_UART_Receive_IT+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d018      	beq.n	8006b52 <HAL_UART_Receive_IT+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3e:	623b      	str	r3, [r7, #32]
 8006b40:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	69f9      	ldr	r1, [r7, #28]
 8006b44:	6a3a      	ldr	r2, [r7, #32]
 8006b46:	e841 2300 	strex	r3, r2, [r1]
 8006b4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1e6      	bne.n	8006b20 <HAL_UART_Receive_IT+0x50>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b52:	88fb      	ldrh	r3, [r7, #6]
 8006b54:	461a      	mov	r2, r3
 8006b56:	68b9      	ldr	r1, [r7, #8]
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 fb73 	bl	8007244 <UART_Start_Receive_IT>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	e000      	b.n	8006b64 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b62:	2302      	movs	r3, #2
  }
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3728      	adds	r7, #40	@ 0x28
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	46002400 	.word	0x46002400
 8006b70:	56002400 	.word	0x56002400

08006b74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	460b      	mov	r3, r1
 8006b92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ba4:	b094      	sub	sp, #80	@ 0x50
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006baa:	2300      	movs	r3, #0
 8006bac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	4b9b      	ldr	r3, [pc, #620]	@ (8006e24 <UART_SetConfig+0x284>)
 8006bb6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4994      	ldr	r1, [pc, #592]	@ (8006e28 <UART_SetConfig+0x288>)
 8006bd8:	4019      	ands	r1, r3
 8006bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006be0:	430b      	orrs	r3, r1
 8006be2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf0:	68d9      	ldr	r1, [r3, #12]
 8006bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	ea40 0301 	orr.w	r3, r0, r1
 8006bfa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	4b87      	ldr	r3, [pc, #540]	@ (8006e24 <UART_SetConfig+0x284>)
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d009      	beq.n	8006c20 <UART_SetConfig+0x80>
 8006c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	4b86      	ldr	r3, [pc, #536]	@ (8006e2c <UART_SetConfig+0x28c>)
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d004      	beq.n	8006c20 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c18:	6a1a      	ldr	r2, [r3, #32]
 8006c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8006c2a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8006c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c34:	430b      	orrs	r3, r1
 8006c36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3e:	f023 000f 	bic.w	r0, r3, #15
 8006c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c44:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	ea40 0301 	orr.w	r3, r0, r1
 8006c4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	4b76      	ldr	r3, [pc, #472]	@ (8006e30 <UART_SetConfig+0x290>)
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d102      	bne.n	8006c60 <UART_SetConfig+0xc0>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c5e:	e021      	b.n	8006ca4 <UART_SetConfig+0x104>
 8006c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	4b73      	ldr	r3, [pc, #460]	@ (8006e34 <UART_SetConfig+0x294>)
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d102      	bne.n	8006c70 <UART_SetConfig+0xd0>
 8006c6a:	2304      	movs	r3, #4
 8006c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c6e:	e019      	b.n	8006ca4 <UART_SetConfig+0x104>
 8006c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	4b70      	ldr	r3, [pc, #448]	@ (8006e38 <UART_SetConfig+0x298>)
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d102      	bne.n	8006c80 <UART_SetConfig+0xe0>
 8006c7a:	2308      	movs	r3, #8
 8006c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c7e:	e011      	b.n	8006ca4 <UART_SetConfig+0x104>
 8006c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	4b6d      	ldr	r3, [pc, #436]	@ (8006e3c <UART_SetConfig+0x29c>)
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d102      	bne.n	8006c90 <UART_SetConfig+0xf0>
 8006c8a:	2310      	movs	r3, #16
 8006c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c8e:	e009      	b.n	8006ca4 <UART_SetConfig+0x104>
 8006c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	4b63      	ldr	r3, [pc, #396]	@ (8006e24 <UART_SetConfig+0x284>)
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d102      	bne.n	8006ca0 <UART_SetConfig+0x100>
 8006c9a:	2320      	movs	r3, #32
 8006c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c9e:	e001      	b.n	8006ca4 <UART_SetConfig+0x104>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	4b5e      	ldr	r3, [pc, #376]	@ (8006e24 <UART_SetConfig+0x284>)
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d004      	beq.n	8006cb8 <UART_SetConfig+0x118>
 8006cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	4b5e      	ldr	r3, [pc, #376]	@ (8006e2c <UART_SetConfig+0x28c>)
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d172      	bne.n	8006d9e <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006cb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cba:	2200      	movs	r2, #0
 8006cbc:	623b      	str	r3, [r7, #32]
 8006cbe:	627a      	str	r2, [r7, #36]	@ 0x24
 8006cc0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006cc4:	f7fd ff60 	bl	8004b88 <HAL_RCCEx_GetPeriphCLKFreq>
 8006cc8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 80e7 	beq.w	8006ea0 <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd6:	4a5a      	ldr	r2, [pc, #360]	@ (8006e40 <UART_SetConfig+0x2a0>)
 8006cd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ce0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ce4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	4613      	mov	r3, r2
 8006cec:	005b      	lsls	r3, r3, #1
 8006cee:	4413      	add	r3, r2
 8006cf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d305      	bcc.n	8006d02 <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d903      	bls.n	8006d0a <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006d08:	e048      	b.n	8006d9c <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	61bb      	str	r3, [r7, #24]
 8006d10:	61fa      	str	r2, [r7, #28]
 8006d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d16:	4a4a      	ldr	r2, [pc, #296]	@ (8006e40 <UART_SetConfig+0x2a0>)
 8006d18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	2200      	movs	r2, #0
 8006d20:	613b      	str	r3, [r7, #16]
 8006d22:	617a      	str	r2, [r7, #20]
 8006d24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006d28:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006d2c:	f7f9 faac 	bl	8000288 <__aeabi_uldivmod>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4610      	mov	r0, r2
 8006d36:	4619      	mov	r1, r3
 8006d38:	f04f 0200 	mov.w	r2, #0
 8006d3c:	f04f 0300 	mov.w	r3, #0
 8006d40:	020b      	lsls	r3, r1, #8
 8006d42:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d46:	0202      	lsls	r2, r0, #8
 8006d48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d4a:	6849      	ldr	r1, [r1, #4]
 8006d4c:	0849      	lsrs	r1, r1, #1
 8006d4e:	2000      	movs	r0, #0
 8006d50:	460c      	mov	r4, r1
 8006d52:	4605      	mov	r5, r0
 8006d54:	eb12 0804 	adds.w	r8, r2, r4
 8006d58:	eb43 0905 	adc.w	r9, r3, r5
 8006d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	60bb      	str	r3, [r7, #8]
 8006d64:	60fa      	str	r2, [r7, #12]
 8006d66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d6a:	4640      	mov	r0, r8
 8006d6c:	4649      	mov	r1, r9
 8006d6e:	f7f9 fa8b 	bl	8000288 <__aeabi_uldivmod>
 8006d72:	4602      	mov	r2, r0
 8006d74:	460b      	mov	r3, r1
 8006d76:	4613      	mov	r3, r2
 8006d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d80:	d308      	bcc.n	8006d94 <UART_SetConfig+0x1f4>
 8006d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d88:	d204      	bcs.n	8006d94 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 8006d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006d90:	60da      	str	r2, [r3, #12]
 8006d92:	e003      	b.n	8006d9c <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8006d9a:	e081      	b.n	8006ea0 <UART_SetConfig+0x300>
 8006d9c:	e080      	b.n	8006ea0 <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006da6:	d14d      	bne.n	8006e44 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006da8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006daa:	2200      	movs	r2, #0
 8006dac:	603b      	str	r3, [r7, #0]
 8006dae:	607a      	str	r2, [r7, #4]
 8006db0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006db4:	f7fd fee8 	bl	8004b88 <HAL_RCCEx_GetPeriphCLKFreq>
 8006db8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d06f      	beq.n	8006ea0 <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc4:	4a1e      	ldr	r2, [pc, #120]	@ (8006e40 <UART_SetConfig+0x2a0>)
 8006dc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dce:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dd2:	005a      	lsls	r2, r3, #1
 8006dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	085b      	lsrs	r3, r3, #1
 8006dda:	441a      	add	r2, r3
 8006ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006de8:	2b0f      	cmp	r3, #15
 8006dea:	d916      	bls.n	8006e1a <UART_SetConfig+0x27a>
 8006dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006df2:	d212      	bcs.n	8006e1a <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	f023 030f 	bic.w	r3, r3, #15
 8006dfc:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e00:	085b      	lsrs	r3, r3, #1
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	f003 0307 	and.w	r3, r3, #7
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8006e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8006e16:	60da      	str	r2, [r3, #12]
 8006e18:	e042      	b.n	8006ea0 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006e20:	e03e      	b.n	8006ea0 <UART_SetConfig+0x300>
 8006e22:	bf00      	nop
 8006e24:	46002400 	.word	0x46002400
 8006e28:	cfff69f3 	.word	0xcfff69f3
 8006e2c:	56002400 	.word	0x56002400
 8006e30:	40013800 	.word	0x40013800
 8006e34:	40004800 	.word	0x40004800
 8006e38:	40004c00 	.word	0x40004c00
 8006e3c:	40005000 	.word	0x40005000
 8006e40:	08008c80 	.word	0x08008c80
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006e44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e46:	2200      	movs	r2, #0
 8006e48:	469a      	mov	sl, r3
 8006e4a:	4693      	mov	fp, r2
 8006e4c:	4650      	mov	r0, sl
 8006e4e:	4659      	mov	r1, fp
 8006e50:	f7fd fe9a 	bl	8004b88 <HAL_RCCEx_GetPeriphCLKFreq>
 8006e54:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8006e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d021      	beq.n	8006ea0 <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e60:	4a1a      	ldr	r2, [pc, #104]	@ (8006ecc <UART_SetConfig+0x32c>)
 8006e62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e66:	461a      	mov	r2, r3
 8006e68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	085b      	lsrs	r3, r3, #1
 8006e74:	441a      	add	r2, r3
 8006e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e82:	2b0f      	cmp	r3, #15
 8006e84:	d909      	bls.n	8006e9a <UART_SetConfig+0x2fa>
 8006e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e8c:	d205      	bcs.n	8006e9a <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	60da      	str	r2, [r3, #12]
 8006e98:	e002      	b.n	8006ea0 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb8:	2200      	movs	r2, #0
 8006eba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006ebc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3750      	adds	r7, #80	@ 0x50
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eca:	bf00      	nop
 8006ecc:	08008c80 	.word	0x08008c80

08006ed0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006edc:	f003 0308 	and.w	r3, r3, #8
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00a      	beq.n	8006efa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00a      	beq.n	8006f1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	430a      	orrs	r2, r1
 8006f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00a      	beq.n	8006f3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f42:	f003 0304 	and.w	r3, r3, #4
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00a      	beq.n	8006f60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f64:	f003 0310 	and.w	r3, r3, #16
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00a      	beq.n	8006f82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f86:	f003 0320 	and.w	r3, r3, #32
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00a      	beq.n	8006fa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d01a      	beq.n	8006fe6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fce:	d10a      	bne.n	8006fe6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00a      	beq.n	8007008 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	430a      	orrs	r2, r1
 8007006:	605a      	str	r2, [r3, #4]
  }
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b098      	sub	sp, #96	@ 0x60
 8007018:	af02      	add	r7, sp, #8
 800701a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007024:	f7fa fc36 	bl	8001894 <HAL_GetTick>
 8007028:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0308 	and.w	r3, r3, #8
 8007034:	2b08      	cmp	r3, #8
 8007036:	d12f      	bne.n	8007098 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007038:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007040:	2200      	movs	r2, #0
 8007042:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f88e 	bl	8007168 <UART_WaitOnFlagUntilTimeout>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d022      	beq.n	8007098 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705a:	e853 3f00 	ldrex	r3, [r3]
 800705e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007062:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007066:	653b      	str	r3, [r7, #80]	@ 0x50
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	461a      	mov	r2, r3
 800706e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007070:	647b      	str	r3, [r7, #68]	@ 0x44
 8007072:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007074:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007076:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007078:	e841 2300 	strex	r3, r2, [r1]
 800707c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800707e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e6      	bne.n	8007052 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2220      	movs	r2, #32
 8007088:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e063      	b.n	8007160 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0304 	and.w	r3, r3, #4
 80070a2:	2b04      	cmp	r3, #4
 80070a4:	d149      	bne.n	800713a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070ae:	2200      	movs	r2, #0
 80070b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f857 	bl	8007168 <UART_WaitOnFlagUntilTimeout>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d03c      	beq.n	800713a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	e853 3f00 	ldrex	r3, [r3]
 80070cc:	623b      	str	r3, [r7, #32]
   return(result);
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070de:	633b      	str	r3, [r7, #48]	@ 0x30
 80070e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070e6:	e841 2300 	strex	r3, r2, [r1]
 80070ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1e6      	bne.n	80070c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	3308      	adds	r3, #8
 80070f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	60fb      	str	r3, [r7, #12]
   return(result);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f023 0301 	bic.w	r3, r3, #1
 8007108:	64bb      	str	r3, [r7, #72]	@ 0x48
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	3308      	adds	r3, #8
 8007110:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007112:	61fa      	str	r2, [r7, #28]
 8007114:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007116:	69b9      	ldr	r1, [r7, #24]
 8007118:	69fa      	ldr	r2, [r7, #28]
 800711a:	e841 2300 	strex	r3, r2, [r1]
 800711e:	617b      	str	r3, [r7, #20]
   return(result);
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1e5      	bne.n	80070f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2220      	movs	r2, #32
 800712a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e012      	b.n	8007160 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2220      	movs	r2, #32
 800713e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2220      	movs	r2, #32
 8007146:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3758      	adds	r7, #88	@ 0x58
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	4613      	mov	r3, r2
 8007176:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007178:	e04f      	b.n	800721a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007180:	d04b      	beq.n	800721a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007182:	f7fa fb87 	bl	8001894 <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	69ba      	ldr	r2, [r7, #24]
 800718e:	429a      	cmp	r2, r3
 8007190:	d302      	bcc.n	8007198 <UART_WaitOnFlagUntilTimeout+0x30>
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e04e      	b.n	800723a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0304 	and.w	r3, r3, #4
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d037      	beq.n	800721a <UART_WaitOnFlagUntilTimeout+0xb2>
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2b80      	cmp	r3, #128	@ 0x80
 80071ae:	d034      	beq.n	800721a <UART_WaitOnFlagUntilTimeout+0xb2>
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2b40      	cmp	r3, #64	@ 0x40
 80071b4:	d031      	beq.n	800721a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	f003 0308 	and.w	r3, r3, #8
 80071c0:	2b08      	cmp	r3, #8
 80071c2:	d110      	bne.n	80071e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2208      	movs	r2, #8
 80071ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f000 f95b 	bl	8007488 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2208      	movs	r2, #8
 80071d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e029      	b.n	800723a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071f4:	d111      	bne.n	800721a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f000 f941 	bl	8007488 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2220      	movs	r2, #32
 800720a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e00f      	b.n	800723a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	69da      	ldr	r2, [r3, #28]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	4013      	ands	r3, r2
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	429a      	cmp	r2, r3
 8007228:	bf0c      	ite	eq
 800722a:	2301      	moveq	r3, #1
 800722c:	2300      	movne	r3, #0
 800722e:	b2db      	uxtb	r3, r3
 8007230:	461a      	mov	r2, r3
 8007232:	79fb      	ldrb	r3, [r7, #7]
 8007234:	429a      	cmp	r2, r3
 8007236:	d0a0      	beq.n	800717a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
	...

08007244 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007244:	b480      	push	{r7}
 8007246:	b0a3      	sub	sp, #140	@ 0x8c
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	4613      	mov	r3, r2
 8007250:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	88fa      	ldrh	r2, [r7, #6]
 800725c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	88fa      	ldrh	r2, [r7, #6]
 8007264:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007276:	d10e      	bne.n	8007296 <UART_Start_Receive_IT+0x52>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d105      	bne.n	800728c <UART_Start_Receive_IT+0x48>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007286:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800728a:	e02d      	b.n	80072e8 <UART_Start_Receive_IT+0xa4>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	22ff      	movs	r2, #255	@ 0xff
 8007290:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007294:	e028      	b.n	80072e8 <UART_Start_Receive_IT+0xa4>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10d      	bne.n	80072ba <UART_Start_Receive_IT+0x76>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d104      	bne.n	80072b0 <UART_Start_Receive_IT+0x6c>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	22ff      	movs	r2, #255	@ 0xff
 80072aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80072ae:	e01b      	b.n	80072e8 <UART_Start_Receive_IT+0xa4>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	227f      	movs	r2, #127	@ 0x7f
 80072b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80072b8:	e016      	b.n	80072e8 <UART_Start_Receive_IT+0xa4>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072c2:	d10d      	bne.n	80072e0 <UART_Start_Receive_IT+0x9c>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d104      	bne.n	80072d6 <UART_Start_Receive_IT+0x92>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	227f      	movs	r2, #127	@ 0x7f
 80072d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80072d4:	e008      	b.n	80072e8 <UART_Start_Receive_IT+0xa4>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	223f      	movs	r2, #63	@ 0x3f
 80072da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80072de:	e003      	b.n	80072e8 <UART_Start_Receive_IT+0xa4>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2222      	movs	r2, #34	@ 0x22
 80072f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3308      	adds	r3, #8
 80072fe:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007300:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007302:	e853 3f00 	ldrex	r3, [r3]
 8007306:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007308:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800730a:	f043 0301 	orr.w	r3, r3, #1
 800730e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3308      	adds	r3, #8
 8007318:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800731c:	673a      	str	r2, [r7, #112]	@ 0x70
 800731e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007322:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007324:	e841 2300 	strex	r3, r2, [r1]
 8007328:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800732a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e3      	bne.n	80072f8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007334:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007338:	d14f      	bne.n	80073da <UART_Start_Receive_IT+0x196>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007340:	88fa      	ldrh	r2, [r7, #6]
 8007342:	429a      	cmp	r2, r3
 8007344:	d349      	bcc.n	80073da <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800734e:	d107      	bne.n	8007360 <UART_Start_Receive_IT+0x11c>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d103      	bne.n	8007360 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4a47      	ldr	r2, [pc, #284]	@ (8007478 <UART_Start_Receive_IT+0x234>)
 800735c:	675a      	str	r2, [r3, #116]	@ 0x74
 800735e:	e002      	b.n	8007366 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4a46      	ldr	r2, [pc, #280]	@ (800747c <UART_Start_Receive_IT+0x238>)
 8007364:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d01a      	beq.n	80073a4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007374:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007376:	e853 3f00 	ldrex	r3, [r3]
 800737a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800737c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800737e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007382:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007390:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007392:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007394:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007396:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007398:	e841 2300 	strex	r3, r2, [r1]
 800739c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800739e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1e4      	bne.n	800736e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	3308      	adds	r3, #8
 80073aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073ae:	e853 3f00 	ldrex	r3, [r3]
 80073b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3308      	adds	r3, #8
 80073c2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80073c4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80073c6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80073ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073cc:	e841 2300 	strex	r3, r2, [r1]
 80073d0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80073d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1e5      	bne.n	80073a4 <UART_Start_Receive_IT+0x160>
 80073d8:	e046      	b.n	8007468 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073e2:	d107      	bne.n	80073f4 <UART_Start_Receive_IT+0x1b0>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d103      	bne.n	80073f4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	4a24      	ldr	r2, [pc, #144]	@ (8007480 <UART_Start_Receive_IT+0x23c>)
 80073f0:	675a      	str	r2, [r3, #116]	@ 0x74
 80073f2:	e002      	b.n	80073fa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4a23      	ldr	r2, [pc, #140]	@ (8007484 <UART_Start_Receive_IT+0x240>)
 80073f8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d019      	beq.n	8007436 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740a:	e853 3f00 	ldrex	r3, [r3]
 800740e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007412:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007416:	677b      	str	r3, [r7, #116]	@ 0x74
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	461a      	mov	r2, r3
 800741e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007420:	637b      	str	r3, [r7, #52]	@ 0x34
 8007422:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007424:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007426:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007428:	e841 2300 	strex	r3, r2, [r1]
 800742c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800742e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1e6      	bne.n	8007402 <UART_Start_Receive_IT+0x1be>
 8007434:	e018      	b.n	8007468 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	e853 3f00 	ldrex	r3, [r3]
 8007442:	613b      	str	r3, [r7, #16]
   return(result);
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	f043 0320 	orr.w	r3, r3, #32
 800744a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	461a      	mov	r2, r3
 8007452:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007454:	623b      	str	r3, [r7, #32]
 8007456:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007458:	69f9      	ldr	r1, [r7, #28]
 800745a:	6a3a      	ldr	r2, [r7, #32]
 800745c:	e841 2300 	strex	r3, r2, [r1]
 8007460:	61bb      	str	r3, [r7, #24]
   return(result);
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1e6      	bne.n	8007436 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	378c      	adds	r7, #140	@ 0x8c
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	08007c4d 	.word	0x08007c4d
 800747c:	080078dd 	.word	0x080078dd
 8007480:	08007719 	.word	0x08007719
 8007484:	08007555 	.word	0x08007555

08007488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007488:	b480      	push	{r7}
 800748a:	b095      	sub	sp, #84	@ 0x54
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007498:	e853 3f00 	ldrex	r3, [r3]
 800749c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800749e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80074b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80074b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074b6:	e841 2300 	strex	r3, r2, [r1]
 80074ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80074bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1e6      	bne.n	8007490 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3308      	adds	r3, #8
 80074c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074d8:	f023 0301 	bic.w	r3, r3, #1
 80074dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3308      	adds	r3, #8
 80074e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074ee:	e841 2300 	strex	r3, r2, [r1]
 80074f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1e3      	bne.n	80074c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d118      	bne.n	8007534 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	e853 3f00 	ldrex	r3, [r3]
 800750e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	f023 0310 	bic.w	r3, r3, #16
 8007516:	647b      	str	r3, [r7, #68]	@ 0x44
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	461a      	mov	r2, r3
 800751e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007520:	61bb      	str	r3, [r7, #24]
 8007522:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007524:	6979      	ldr	r1, [r7, #20]
 8007526:	69ba      	ldr	r2, [r7, #24]
 8007528:	e841 2300 	strex	r3, r2, [r1]
 800752c:	613b      	str	r3, [r7, #16]
   return(result);
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1e6      	bne.n	8007502 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2220      	movs	r2, #32
 8007538:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007548:	bf00      	nop
 800754a:	3754      	adds	r7, #84	@ 0x54
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b09c      	sub	sp, #112	@ 0x70
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007562:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800756c:	2b22      	cmp	r3, #34	@ 0x22
 800756e:	f040 80c3 	bne.w	80076f8 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007578:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800757c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007580:	b2d9      	uxtb	r1, r3
 8007582:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007586:	b2da      	uxtb	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800758c:	400a      	ands	r2, r1
 800758e:	b2d2      	uxtb	r2, r2
 8007590:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007596:	1c5a      	adds	r2, r3, #1
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b01      	subs	r3, #1
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f040 80a6 	bne.w	8007708 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075c4:	e853 3f00 	ldrex	r3, [r3]
 80075c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80075ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075dc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80075e2:	e841 2300 	strex	r3, r2, [r1]
 80075e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80075e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1e6      	bne.n	80075bc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	3308      	adds	r3, #8
 80075f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f8:	e853 3f00 	ldrex	r3, [r3]
 80075fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007600:	f023 0301 	bic.w	r3, r3, #1
 8007604:	667b      	str	r3, [r7, #100]	@ 0x64
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3308      	adds	r3, #8
 800760c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800760e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007610:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007612:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007614:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007616:	e841 2300 	strex	r3, r2, [r1]
 800761a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800761c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1e5      	bne.n	80075ee <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2220      	movs	r2, #32
 8007626:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a35      	ldr	r2, [pc, #212]	@ (8007710 <UART_RxISR_8BIT+0x1bc>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d024      	beq.n	800768a <UART_RxISR_8BIT+0x136>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a33      	ldr	r2, [pc, #204]	@ (8007714 <UART_RxISR_8BIT+0x1c0>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d01f      	beq.n	800768a <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d018      	beq.n	800768a <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007660:	e853 3f00 	ldrex	r3, [r3]
 8007664:	623b      	str	r3, [r7, #32]
   return(result);
 8007666:	6a3b      	ldr	r3, [r7, #32]
 8007668:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800766c:	663b      	str	r3, [r7, #96]	@ 0x60
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007676:	633b      	str	r3, [r7, #48]	@ 0x30
 8007678:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800767c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800767e:	e841 2300 	strex	r3, r2, [r1]
 8007682:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1e6      	bne.n	8007658 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800768e:	2b01      	cmp	r3, #1
 8007690:	d12e      	bne.n	80076f0 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f023 0310 	bic.w	r3, r3, #16
 80076ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076b6:	61fb      	str	r3, [r7, #28]
 80076b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ba:	69b9      	ldr	r1, [r7, #24]
 80076bc:	69fa      	ldr	r2, [r7, #28]
 80076be:	e841 2300 	strex	r3, r2, [r1]
 80076c2:	617b      	str	r3, [r7, #20]
   return(result);
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1e6      	bne.n	8007698 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	f003 0310 	and.w	r3, r3, #16
 80076d4:	2b10      	cmp	r3, #16
 80076d6:	d103      	bne.n	80076e0 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2210      	movs	r2, #16
 80076de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f7ff fa4d 	bl	8006b88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076ee:	e00b      	b.n	8007708 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7f9 fa7d 	bl	8000bf0 <HAL_UART_RxCpltCallback>
}
 80076f6:	e007      	b.n	8007708 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	699a      	ldr	r2, [r3, #24]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f042 0208 	orr.w	r2, r2, #8
 8007706:	619a      	str	r2, [r3, #24]
}
 8007708:	bf00      	nop
 800770a:	3770      	adds	r7, #112	@ 0x70
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	46002400 	.word	0x46002400
 8007714:	56002400 	.word	0x56002400

08007718 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b09c      	sub	sp, #112	@ 0x70
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007726:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007730:	2b22      	cmp	r3, #34	@ 0x22
 8007732:	f040 80c3 	bne.w	80078bc <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800773c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007744:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007746:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800774a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800774e:	4013      	ands	r3, r2
 8007750:	b29a      	uxth	r2, r3
 8007752:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007754:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800775a:	1c9a      	adds	r2, r3, #2
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007766:	b29b      	uxth	r3, r3
 8007768:	3b01      	subs	r3, #1
 800776a:	b29a      	uxth	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007778:	b29b      	uxth	r3, r3
 800777a:	2b00      	cmp	r3, #0
 800777c:	f040 80a6 	bne.w	80078cc <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007786:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007788:	e853 3f00 	ldrex	r3, [r3]
 800778c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800778e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007790:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007794:	667b      	str	r3, [r7, #100]	@ 0x64
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	461a      	mov	r2, r3
 800779c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800779e:	657b      	str	r3, [r7, #84]	@ 0x54
 80077a0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80077a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80077a6:	e841 2300 	strex	r3, r2, [r1]
 80077aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80077ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1e6      	bne.n	8007780 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3308      	adds	r3, #8
 80077b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077bc:	e853 3f00 	ldrex	r3, [r3]
 80077c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c4:	f023 0301 	bic.w	r3, r3, #1
 80077c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3308      	adds	r3, #8
 80077d0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80077d2:	643a      	str	r2, [r7, #64]	@ 0x40
 80077d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077da:	e841 2300 	strex	r3, r2, [r1]
 80077de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1e5      	bne.n	80077b2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2220      	movs	r2, #32
 80077ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a35      	ldr	r2, [pc, #212]	@ (80078d4 <UART_RxISR_16BIT+0x1bc>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d024      	beq.n	800784e <UART_RxISR_16BIT+0x136>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a33      	ldr	r2, [pc, #204]	@ (80078d8 <UART_RxISR_16BIT+0x1c0>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d01f      	beq.n	800784e <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d018      	beq.n	800784e <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	61fb      	str	r3, [r7, #28]
   return(result);
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007830:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800783a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800783c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007840:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007842:	e841 2300 	strex	r3, r2, [r1]
 8007846:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e6      	bne.n	800781c <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007852:	2b01      	cmp	r3, #1
 8007854:	d12e      	bne.n	80078b4 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	e853 3f00 	ldrex	r3, [r3]
 8007868:	60bb      	str	r3, [r7, #8]
   return(result);
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	f023 0310 	bic.w	r3, r3, #16
 8007870:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	461a      	mov	r2, r3
 8007878:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800787a:	61bb      	str	r3, [r7, #24]
 800787c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787e:	6979      	ldr	r1, [r7, #20]
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	e841 2300 	strex	r3, r2, [r1]
 8007886:	613b      	str	r3, [r7, #16]
   return(result);
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1e6      	bne.n	800785c <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	f003 0310 	and.w	r3, r3, #16
 8007898:	2b10      	cmp	r3, #16
 800789a:	d103      	bne.n	80078a4 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2210      	movs	r2, #16
 80078a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078aa:	4619      	mov	r1, r3
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f7ff f96b 	bl	8006b88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078b2:	e00b      	b.n	80078cc <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7f9 f99b 	bl	8000bf0 <HAL_UART_RxCpltCallback>
}
 80078ba:	e007      	b.n	80078cc <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	699a      	ldr	r2, [r3, #24]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f042 0208 	orr.w	r2, r2, #8
 80078ca:	619a      	str	r2, [r3, #24]
}
 80078cc:	bf00      	nop
 80078ce:	3770      	adds	r7, #112	@ 0x70
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	46002400 	.word	0x46002400
 80078d8:	56002400 	.word	0x56002400

080078dc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b0ac      	sub	sp, #176	@ 0xb0
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80078ea:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007912:	2b22      	cmp	r3, #34	@ 0x22
 8007914:	f040 8188 	bne.w	8007c28 <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800791e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007922:	e12b      	b.n	8007b7c <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800792e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007932:	b2d9      	uxtb	r1, r3
 8007934:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007938:	b2da      	uxtb	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800793e:	400a      	ands	r2, r1
 8007940:	b2d2      	uxtb	r2, r2
 8007942:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007954:	b29b      	uxth	r3, r3
 8007956:	3b01      	subs	r3, #1
 8007958:	b29a      	uxth	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800796a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800796e:	f003 0307 	and.w	r3, r3, #7
 8007972:	2b00      	cmp	r3, #0
 8007974:	d053      	beq.n	8007a1e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007976:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	2b00      	cmp	r3, #0
 8007980:	d011      	beq.n	80079a6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007982:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00b      	beq.n	80079a6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2201      	movs	r2, #1
 8007994:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800799c:	f043 0201 	orr.w	r2, r3, #1
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079aa:	f003 0302 	and.w	r3, r3, #2
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d011      	beq.n	80079d6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80079b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00b      	beq.n	80079d6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2202      	movs	r2, #2
 80079c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079cc:	f043 0204 	orr.w	r2, r3, #4
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079da:	f003 0304 	and.w	r3, r3, #4
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d011      	beq.n	8007a06 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80079e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00b      	beq.n	8007a06 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2204      	movs	r2, #4
 80079f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079fc:	f043 0202 	orr.w	r2, r3, #2
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d006      	beq.n	8007a1e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7ff f8af 	bl	8006b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f040 80a8 	bne.w	8007b7c <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a34:	e853 3f00 	ldrex	r3, [r3]
 8007a38:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007a3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a50:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007a54:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007a5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1e4      	bne.n	8007a2c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	3308      	adds	r3, #8
 8007a68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007a72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a78:	f023 0301 	bic.w	r3, r3, #1
 8007a7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3308      	adds	r3, #8
 8007a86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a8a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007a8c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007a90:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007a92:	e841 2300 	strex	r3, r2, [r1]
 8007a96:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007a98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1e1      	bne.n	8007a62 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a62      	ldr	r2, [pc, #392]	@ (8007c40 <UART_RxISR_8BIT_FIFOEN+0x364>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d026      	beq.n	8007b0a <UART_RxISR_8BIT_FIFOEN+0x22e>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a60      	ldr	r2, [pc, #384]	@ (8007c44 <UART_RxISR_8BIT_FIFOEN+0x368>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d021      	beq.n	8007b0a <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d01a      	beq.n	8007b0a <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ada:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007adc:	e853 3f00 	ldrex	r3, [r3]
 8007ae0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007ae2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ae4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ae8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	461a      	mov	r2, r3
 8007af2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007af6:	657b      	str	r3, [r7, #84]	@ 0x54
 8007af8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007afc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007afe:	e841 2300 	strex	r3, r2, [r1]
 8007b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007b04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e4      	bne.n	8007ad4 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d130      	bne.n	8007b74 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b28:	f023 0310 	bic.w	r3, r3, #16
 8007b2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	461a      	mov	r2, r3
 8007b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b42:	e841 2300 	strex	r3, r2, [r1]
 8007b46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1e4      	bne.n	8007b18 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	f003 0310 	and.w	r3, r3, #16
 8007b58:	2b10      	cmp	r3, #16
 8007b5a:	d103      	bne.n	8007b64 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2210      	movs	r2, #16
 8007b62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f7ff f80b 	bl	8006b88 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007b72:	e00e      	b.n	8007b92 <UART_RxISR_8BIT_FIFOEN+0x2b6>
          HAL_UART_RxCpltCallback(huart);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7f9 f83b 	bl	8000bf0 <HAL_UART_RxCpltCallback>
        break;
 8007b7a:	e00a      	b.n	8007b92 <UART_RxISR_8BIT_FIFOEN+0x2b6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b7c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d006      	beq.n	8007b92 <UART_RxISR_8BIT_FIFOEN+0x2b6>
 8007b84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b88:	f003 0320 	and.w	r3, r3, #32
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f47f aec9 	bne.w	8007924 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b98:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007b9c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d049      	beq.n	8007c38 <UART_RxISR_8BIT_FIFOEN+0x35c>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007baa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d242      	bcs.n	8007c38 <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3308      	adds	r3, #8
 8007bb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	e853 3f00 	ldrex	r3, [r3]
 8007bc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007bd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bde:	e841 2300 	strex	r3, r2, [r1]
 8007be2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1e3      	bne.n	8007bb2 <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a16      	ldr	r2, [pc, #88]	@ (8007c48 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8007bee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	e853 3f00 	ldrex	r3, [r3]
 8007bfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f043 0320 	orr.w	r3, r3, #32
 8007c04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007c12:	61bb      	str	r3, [r7, #24]
 8007c14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c16:	6979      	ldr	r1, [r7, #20]
 8007c18:	69ba      	ldr	r2, [r7, #24]
 8007c1a:	e841 2300 	strex	r3, r2, [r1]
 8007c1e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1e4      	bne.n	8007bf0 <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c26:	e007      	b.n	8007c38 <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	699a      	ldr	r2, [r3, #24]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f042 0208 	orr.w	r2, r2, #8
 8007c36:	619a      	str	r2, [r3, #24]
}
 8007c38:	bf00      	nop
 8007c3a:	37b0      	adds	r7, #176	@ 0xb0
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	46002400 	.word	0x46002400
 8007c44:	56002400 	.word	0x56002400
 8007c48:	08007555 	.word	0x08007555

08007c4c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b0ae      	sub	sp, #184	@ 0xb8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007c5a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	69db      	ldr	r3, [r3, #28]
 8007c64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c82:	2b22      	cmp	r3, #34	@ 0x22
 8007c84:	f040 818c 	bne.w	8007fa0 <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007c8e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c92:	e12f      	b.n	8007ef4 <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c9a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007ca6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007caa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007cae:	4013      	ands	r3, r2
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007cb6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cbc:	1c9a      	adds	r2, r3, #2
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007cde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ce2:	f003 0307 	and.w	r3, r3, #7
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d053      	beq.n	8007d92 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007cea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d011      	beq.n	8007d1a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007cf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00b      	beq.n	8007d1a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2201      	movs	r2, #1
 8007d08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d10:	f043 0201 	orr.w	r2, r3, #1
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d1e:	f003 0302 	and.w	r3, r3, #2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d011      	beq.n	8007d4a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007d26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00b      	beq.n	8007d4a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2202      	movs	r2, #2
 8007d38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d40:	f043 0204 	orr.w	r2, r3, #4
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d4e:	f003 0304 	and.w	r3, r3, #4
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d011      	beq.n	8007d7a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007d56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00b      	beq.n	8007d7a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2204      	movs	r2, #4
 8007d68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d70:	f043 0202 	orr.w	r2, r3, #2
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d006      	beq.n	8007d92 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7fe fef5 	bl	8006b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f040 80aa 	bne.w	8007ef4 <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007da8:	e853 3f00 	ldrex	r3, [r3]
 8007dac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007dae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007db0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007db4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007dc2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007dc6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007dca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007dce:	e841 2300 	strex	r3, r2, [r1]
 8007dd2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007dd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1e2      	bne.n	8007da0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3308      	adds	r3, #8
 8007de0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007de4:	e853 3f00 	ldrex	r3, [r3]
 8007de8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007dea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007df0:	f023 0301 	bic.w	r3, r3, #1
 8007df4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	3308      	adds	r3, #8
 8007dfe:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007e02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e0a:	e841 2300 	strex	r3, r2, [r1]
 8007e0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007e10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1e1      	bne.n	8007dda <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a62      	ldr	r2, [pc, #392]	@ (8007fb8 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d026      	beq.n	8007e82 <UART_RxISR_16BIT_FIFOEN+0x236>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a60      	ldr	r2, [pc, #384]	@ (8007fbc <UART_RxISR_16BIT_FIFOEN+0x370>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d021      	beq.n	8007e82 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d01a      	beq.n	8007e82 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e54:	e853 3f00 	ldrex	r3, [r3]
 8007e58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e5c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e60:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007e6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e76:	e841 2300 	strex	r3, r2, [r1]
 8007e7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1e4      	bne.n	8007e4c <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d130      	bne.n	8007eec <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e98:	e853 3f00 	ldrex	r3, [r3]
 8007e9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ea0:	f023 0310 	bic.w	r3, r3, #16
 8007ea4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	461a      	mov	r2, r3
 8007eae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007eb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eb4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007eb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007eba:	e841 2300 	strex	r3, r2, [r1]
 8007ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1e4      	bne.n	8007e90 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	69db      	ldr	r3, [r3, #28]
 8007ecc:	f003 0310 	and.w	r3, r3, #16
 8007ed0:	2b10      	cmp	r3, #16
 8007ed2:	d103      	bne.n	8007edc <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2210      	movs	r2, #16
 8007eda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7fe fe4f 	bl	8006b88 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007eea:	e00e      	b.n	8007f0a <UART_RxISR_16BIT_FIFOEN+0x2be>
          HAL_UART_RxCpltCallback(huart);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f7f8 fe7f 	bl	8000bf0 <HAL_UART_RxCpltCallback>
        break;
 8007ef2:	e00a      	b.n	8007f0a <UART_RxISR_16BIT_FIFOEN+0x2be>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ef4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d006      	beq.n	8007f0a <UART_RxISR_16BIT_FIFOEN+0x2be>
 8007efc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f00:	f003 0320 	and.w	r3, r3, #32
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f47f aec5 	bne.w	8007c94 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f10:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007f14:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d049      	beq.n	8007fb0 <UART_RxISR_16BIT_FIFOEN+0x364>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007f22:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d242      	bcs.n	8007fb0 <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3308      	adds	r3, #8
 8007f30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f34:	e853 3f00 	ldrex	r3, [r3]
 8007f38:	623b      	str	r3, [r7, #32]
   return(result);
 8007f3a:	6a3b      	ldr	r3, [r7, #32]
 8007f3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3308      	adds	r3, #8
 8007f4a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007f4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f56:	e841 2300 	strex	r3, r2, [r1]
 8007f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1e3      	bne.n	8007f2a <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a16      	ldr	r2, [pc, #88]	@ (8007fc0 <UART_RxISR_16BIT_FIFOEN+0x374>)
 8007f66:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	e853 3f00 	ldrex	r3, [r3]
 8007f74:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f043 0320 	orr.w	r3, r3, #32
 8007f7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	461a      	mov	r2, r3
 8007f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f8a:	61fb      	str	r3, [r7, #28]
 8007f8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8e:	69b9      	ldr	r1, [r7, #24]
 8007f90:	69fa      	ldr	r2, [r7, #28]
 8007f92:	e841 2300 	strex	r3, r2, [r1]
 8007f96:	617b      	str	r3, [r7, #20]
   return(result);
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e4      	bne.n	8007f68 <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f9e:	e007      	b.n	8007fb0 <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	699a      	ldr	r2, [r3, #24]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f042 0208 	orr.w	r2, r2, #8
 8007fae:	619a      	str	r2, [r3, #24]
}
 8007fb0:	bf00      	nop
 8007fb2:	37b8      	adds	r7, #184	@ 0xb8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	46002400 	.word	0x46002400
 8007fbc:	56002400 	.word	0x56002400
 8007fc0:	08007719 	.word	0x08007719

08007fc4 <_vsniprintf_r>:
 8007fc4:	b530      	push	{r4, r5, lr}
 8007fc6:	4614      	mov	r4, r2
 8007fc8:	b09b      	sub	sp, #108	@ 0x6c
 8007fca:	4605      	mov	r5, r0
 8007fcc:	461a      	mov	r2, r3
 8007fce:	2c00      	cmp	r4, #0
 8007fd0:	da05      	bge.n	8007fde <_vsniprintf_r+0x1a>
 8007fd2:	238b      	movs	r3, #139	@ 0x8b
 8007fd4:	6003      	str	r3, [r0, #0]
 8007fd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fda:	b01b      	add	sp, #108	@ 0x6c
 8007fdc:	bd30      	pop	{r4, r5, pc}
 8007fde:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007fe2:	9100      	str	r1, [sp, #0]
 8007fe4:	9104      	str	r1, [sp, #16]
 8007fe6:	4669      	mov	r1, sp
 8007fe8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007fec:	f04f 0300 	mov.w	r3, #0
 8007ff0:	9319      	str	r3, [sp, #100]	@ 0x64
 8007ff2:	bf14      	ite	ne
 8007ff4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8007ff8:	4623      	moveq	r3, r4
 8007ffa:	9302      	str	r3, [sp, #8]
 8007ffc:	9305      	str	r3, [sp, #20]
 8007ffe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008002:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008006:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008008:	f000 f9a0 	bl	800834c <_svfiprintf_r>
 800800c:	1c43      	adds	r3, r0, #1
 800800e:	bfbc      	itt	lt
 8008010:	238b      	movlt	r3, #139	@ 0x8b
 8008012:	602b      	strlt	r3, [r5, #0]
 8008014:	2c00      	cmp	r4, #0
 8008016:	d0e0      	beq.n	8007fda <_vsniprintf_r+0x16>
 8008018:	9b00      	ldr	r3, [sp, #0]
 800801a:	2200      	movs	r2, #0
 800801c:	701a      	strb	r2, [r3, #0]
 800801e:	e7dc      	b.n	8007fda <_vsniprintf_r+0x16>

08008020 <vsniprintf>:
 8008020:	b507      	push	{r0, r1, r2, lr}
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	4613      	mov	r3, r2
 8008026:	460a      	mov	r2, r1
 8008028:	4601      	mov	r1, r0
 800802a:	4803      	ldr	r0, [pc, #12]	@ (8008038 <vsniprintf+0x18>)
 800802c:	6800      	ldr	r0, [r0, #0]
 800802e:	f7ff ffc9 	bl	8007fc4 <_vsniprintf_r>
 8008032:	b003      	add	sp, #12
 8008034:	f85d fb04 	ldr.w	pc, [sp], #4
 8008038:	20000024 	.word	0x20000024

0800803c <memset>:
 800803c:	4402      	add	r2, r0
 800803e:	4603      	mov	r3, r0
 8008040:	4293      	cmp	r3, r2
 8008042:	d100      	bne.n	8008046 <memset+0xa>
 8008044:	4770      	bx	lr
 8008046:	f803 1b01 	strb.w	r1, [r3], #1
 800804a:	e7f9      	b.n	8008040 <memset+0x4>

0800804c <__errno>:
 800804c:	4b01      	ldr	r3, [pc, #4]	@ (8008054 <__errno+0x8>)
 800804e:	6818      	ldr	r0, [r3, #0]
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	20000024 	.word	0x20000024

08008058 <__libc_init_array>:
 8008058:	b570      	push	{r4, r5, r6, lr}
 800805a:	4d0d      	ldr	r5, [pc, #52]	@ (8008090 <__libc_init_array+0x38>)
 800805c:	2600      	movs	r6, #0
 800805e:	4c0d      	ldr	r4, [pc, #52]	@ (8008094 <__libc_init_array+0x3c>)
 8008060:	1b64      	subs	r4, r4, r5
 8008062:	10a4      	asrs	r4, r4, #2
 8008064:	42a6      	cmp	r6, r4
 8008066:	d109      	bne.n	800807c <__libc_init_array+0x24>
 8008068:	4d0b      	ldr	r5, [pc, #44]	@ (8008098 <__libc_init_array+0x40>)
 800806a:	2600      	movs	r6, #0
 800806c:	4c0b      	ldr	r4, [pc, #44]	@ (800809c <__libc_init_array+0x44>)
 800806e:	f000 fc75 	bl	800895c <_init>
 8008072:	1b64      	subs	r4, r4, r5
 8008074:	10a4      	asrs	r4, r4, #2
 8008076:	42a6      	cmp	r6, r4
 8008078:	d105      	bne.n	8008086 <__libc_init_array+0x2e>
 800807a:	bd70      	pop	{r4, r5, r6, pc}
 800807c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008080:	3601      	adds	r6, #1
 8008082:	4798      	blx	r3
 8008084:	e7ee      	b.n	8008064 <__libc_init_array+0xc>
 8008086:	f855 3b04 	ldr.w	r3, [r5], #4
 800808a:	3601      	adds	r6, #1
 800808c:	4798      	blx	r3
 800808e:	e7f2      	b.n	8008076 <__libc_init_array+0x1e>
 8008090:	08008cd4 	.word	0x08008cd4
 8008094:	08008cd4 	.word	0x08008cd4
 8008098:	08008cd4 	.word	0x08008cd4
 800809c:	08008cd8 	.word	0x08008cd8

080080a0 <__retarget_lock_acquire_recursive>:
 80080a0:	4770      	bx	lr

080080a2 <__retarget_lock_release_recursive>:
 80080a2:	4770      	bx	lr

080080a4 <_free_r>:
 80080a4:	b538      	push	{r3, r4, r5, lr}
 80080a6:	4605      	mov	r5, r0
 80080a8:	2900      	cmp	r1, #0
 80080aa:	d041      	beq.n	8008130 <_free_r+0x8c>
 80080ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080b0:	1f0c      	subs	r4, r1, #4
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	bfb8      	it	lt
 80080b6:	18e4      	addlt	r4, r4, r3
 80080b8:	f000 f8e0 	bl	800827c <__malloc_lock>
 80080bc:	4a1d      	ldr	r2, [pc, #116]	@ (8008134 <_free_r+0x90>)
 80080be:	6813      	ldr	r3, [r2, #0]
 80080c0:	b933      	cbnz	r3, 80080d0 <_free_r+0x2c>
 80080c2:	6063      	str	r3, [r4, #4]
 80080c4:	6014      	str	r4, [r2, #0]
 80080c6:	4628      	mov	r0, r5
 80080c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080cc:	f000 b8dc 	b.w	8008288 <__malloc_unlock>
 80080d0:	42a3      	cmp	r3, r4
 80080d2:	d908      	bls.n	80080e6 <_free_r+0x42>
 80080d4:	6820      	ldr	r0, [r4, #0]
 80080d6:	1821      	adds	r1, r4, r0
 80080d8:	428b      	cmp	r3, r1
 80080da:	bf01      	itttt	eq
 80080dc:	6819      	ldreq	r1, [r3, #0]
 80080de:	685b      	ldreq	r3, [r3, #4]
 80080e0:	1809      	addeq	r1, r1, r0
 80080e2:	6021      	streq	r1, [r4, #0]
 80080e4:	e7ed      	b.n	80080c2 <_free_r+0x1e>
 80080e6:	461a      	mov	r2, r3
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	b10b      	cbz	r3, 80080f0 <_free_r+0x4c>
 80080ec:	42a3      	cmp	r3, r4
 80080ee:	d9fa      	bls.n	80080e6 <_free_r+0x42>
 80080f0:	6811      	ldr	r1, [r2, #0]
 80080f2:	1850      	adds	r0, r2, r1
 80080f4:	42a0      	cmp	r0, r4
 80080f6:	d10b      	bne.n	8008110 <_free_r+0x6c>
 80080f8:	6820      	ldr	r0, [r4, #0]
 80080fa:	4401      	add	r1, r0
 80080fc:	1850      	adds	r0, r2, r1
 80080fe:	6011      	str	r1, [r2, #0]
 8008100:	4283      	cmp	r3, r0
 8008102:	d1e0      	bne.n	80080c6 <_free_r+0x22>
 8008104:	6818      	ldr	r0, [r3, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	4408      	add	r0, r1
 800810a:	6053      	str	r3, [r2, #4]
 800810c:	6010      	str	r0, [r2, #0]
 800810e:	e7da      	b.n	80080c6 <_free_r+0x22>
 8008110:	d902      	bls.n	8008118 <_free_r+0x74>
 8008112:	230c      	movs	r3, #12
 8008114:	602b      	str	r3, [r5, #0]
 8008116:	e7d6      	b.n	80080c6 <_free_r+0x22>
 8008118:	6820      	ldr	r0, [r4, #0]
 800811a:	1821      	adds	r1, r4, r0
 800811c:	428b      	cmp	r3, r1
 800811e:	bf02      	ittt	eq
 8008120:	6819      	ldreq	r1, [r3, #0]
 8008122:	685b      	ldreq	r3, [r3, #4]
 8008124:	1809      	addeq	r1, r1, r0
 8008126:	6063      	str	r3, [r4, #4]
 8008128:	bf08      	it	eq
 800812a:	6021      	streq	r1, [r4, #0]
 800812c:	6054      	str	r4, [r2, #4]
 800812e:	e7ca      	b.n	80080c6 <_free_r+0x22>
 8008130:	bd38      	pop	{r3, r4, r5, pc}
 8008132:	bf00      	nop
 8008134:	200003d8 	.word	0x200003d8

08008138 <sbrk_aligned>:
 8008138:	b570      	push	{r4, r5, r6, lr}
 800813a:	4e0f      	ldr	r6, [pc, #60]	@ (8008178 <sbrk_aligned+0x40>)
 800813c:	460c      	mov	r4, r1
 800813e:	4605      	mov	r5, r0
 8008140:	6831      	ldr	r1, [r6, #0]
 8008142:	b911      	cbnz	r1, 800814a <sbrk_aligned+0x12>
 8008144:	f000 fba8 	bl	8008898 <_sbrk_r>
 8008148:	6030      	str	r0, [r6, #0]
 800814a:	4621      	mov	r1, r4
 800814c:	4628      	mov	r0, r5
 800814e:	f000 fba3 	bl	8008898 <_sbrk_r>
 8008152:	1c43      	adds	r3, r0, #1
 8008154:	d103      	bne.n	800815e <sbrk_aligned+0x26>
 8008156:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800815a:	4620      	mov	r0, r4
 800815c:	bd70      	pop	{r4, r5, r6, pc}
 800815e:	1cc4      	adds	r4, r0, #3
 8008160:	f024 0403 	bic.w	r4, r4, #3
 8008164:	42a0      	cmp	r0, r4
 8008166:	d0f8      	beq.n	800815a <sbrk_aligned+0x22>
 8008168:	1a21      	subs	r1, r4, r0
 800816a:	4628      	mov	r0, r5
 800816c:	f000 fb94 	bl	8008898 <_sbrk_r>
 8008170:	3001      	adds	r0, #1
 8008172:	d1f2      	bne.n	800815a <sbrk_aligned+0x22>
 8008174:	e7ef      	b.n	8008156 <sbrk_aligned+0x1e>
 8008176:	bf00      	nop
 8008178:	200003d4 	.word	0x200003d4

0800817c <_malloc_r>:
 800817c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008180:	1ccd      	adds	r5, r1, #3
 8008182:	4606      	mov	r6, r0
 8008184:	f025 0503 	bic.w	r5, r5, #3
 8008188:	3508      	adds	r5, #8
 800818a:	2d0c      	cmp	r5, #12
 800818c:	bf38      	it	cc
 800818e:	250c      	movcc	r5, #12
 8008190:	2d00      	cmp	r5, #0
 8008192:	db01      	blt.n	8008198 <_malloc_r+0x1c>
 8008194:	42a9      	cmp	r1, r5
 8008196:	d904      	bls.n	80081a2 <_malloc_r+0x26>
 8008198:	230c      	movs	r3, #12
 800819a:	6033      	str	r3, [r6, #0]
 800819c:	2000      	movs	r0, #0
 800819e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008278 <_malloc_r+0xfc>
 80081a6:	f000 f869 	bl	800827c <__malloc_lock>
 80081aa:	f8d8 3000 	ldr.w	r3, [r8]
 80081ae:	461c      	mov	r4, r3
 80081b0:	bb44      	cbnz	r4, 8008204 <_malloc_r+0x88>
 80081b2:	4629      	mov	r1, r5
 80081b4:	4630      	mov	r0, r6
 80081b6:	f7ff ffbf 	bl	8008138 <sbrk_aligned>
 80081ba:	1c43      	adds	r3, r0, #1
 80081bc:	4604      	mov	r4, r0
 80081be:	d158      	bne.n	8008272 <_malloc_r+0xf6>
 80081c0:	f8d8 4000 	ldr.w	r4, [r8]
 80081c4:	4627      	mov	r7, r4
 80081c6:	2f00      	cmp	r7, #0
 80081c8:	d143      	bne.n	8008252 <_malloc_r+0xd6>
 80081ca:	2c00      	cmp	r4, #0
 80081cc:	d04b      	beq.n	8008266 <_malloc_r+0xea>
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	4639      	mov	r1, r7
 80081d2:	4630      	mov	r0, r6
 80081d4:	eb04 0903 	add.w	r9, r4, r3
 80081d8:	f000 fb5e 	bl	8008898 <_sbrk_r>
 80081dc:	4581      	cmp	r9, r0
 80081de:	d142      	bne.n	8008266 <_malloc_r+0xea>
 80081e0:	6821      	ldr	r1, [r4, #0]
 80081e2:	4630      	mov	r0, r6
 80081e4:	1a6d      	subs	r5, r5, r1
 80081e6:	4629      	mov	r1, r5
 80081e8:	f7ff ffa6 	bl	8008138 <sbrk_aligned>
 80081ec:	3001      	adds	r0, #1
 80081ee:	d03a      	beq.n	8008266 <_malloc_r+0xea>
 80081f0:	6823      	ldr	r3, [r4, #0]
 80081f2:	442b      	add	r3, r5
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	f8d8 3000 	ldr.w	r3, [r8]
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	bb62      	cbnz	r2, 8008258 <_malloc_r+0xdc>
 80081fe:	f8c8 7000 	str.w	r7, [r8]
 8008202:	e00f      	b.n	8008224 <_malloc_r+0xa8>
 8008204:	6822      	ldr	r2, [r4, #0]
 8008206:	1b52      	subs	r2, r2, r5
 8008208:	d420      	bmi.n	800824c <_malloc_r+0xd0>
 800820a:	2a0b      	cmp	r2, #11
 800820c:	d917      	bls.n	800823e <_malloc_r+0xc2>
 800820e:	1961      	adds	r1, r4, r5
 8008210:	42a3      	cmp	r3, r4
 8008212:	6025      	str	r5, [r4, #0]
 8008214:	bf18      	it	ne
 8008216:	6059      	strne	r1, [r3, #4]
 8008218:	6863      	ldr	r3, [r4, #4]
 800821a:	bf08      	it	eq
 800821c:	f8c8 1000 	streq.w	r1, [r8]
 8008220:	5162      	str	r2, [r4, r5]
 8008222:	604b      	str	r3, [r1, #4]
 8008224:	4630      	mov	r0, r6
 8008226:	f000 f82f 	bl	8008288 <__malloc_unlock>
 800822a:	f104 000b 	add.w	r0, r4, #11
 800822e:	1d23      	adds	r3, r4, #4
 8008230:	f020 0007 	bic.w	r0, r0, #7
 8008234:	1ac2      	subs	r2, r0, r3
 8008236:	bf1c      	itt	ne
 8008238:	1a1b      	subne	r3, r3, r0
 800823a:	50a3      	strne	r3, [r4, r2]
 800823c:	e7af      	b.n	800819e <_malloc_r+0x22>
 800823e:	6862      	ldr	r2, [r4, #4]
 8008240:	42a3      	cmp	r3, r4
 8008242:	bf0c      	ite	eq
 8008244:	f8c8 2000 	streq.w	r2, [r8]
 8008248:	605a      	strne	r2, [r3, #4]
 800824a:	e7eb      	b.n	8008224 <_malloc_r+0xa8>
 800824c:	4623      	mov	r3, r4
 800824e:	6864      	ldr	r4, [r4, #4]
 8008250:	e7ae      	b.n	80081b0 <_malloc_r+0x34>
 8008252:	463c      	mov	r4, r7
 8008254:	687f      	ldr	r7, [r7, #4]
 8008256:	e7b6      	b.n	80081c6 <_malloc_r+0x4a>
 8008258:	461a      	mov	r2, r3
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	42a3      	cmp	r3, r4
 800825e:	d1fb      	bne.n	8008258 <_malloc_r+0xdc>
 8008260:	2300      	movs	r3, #0
 8008262:	6053      	str	r3, [r2, #4]
 8008264:	e7de      	b.n	8008224 <_malloc_r+0xa8>
 8008266:	230c      	movs	r3, #12
 8008268:	4630      	mov	r0, r6
 800826a:	6033      	str	r3, [r6, #0]
 800826c:	f000 f80c 	bl	8008288 <__malloc_unlock>
 8008270:	e794      	b.n	800819c <_malloc_r+0x20>
 8008272:	6005      	str	r5, [r0, #0]
 8008274:	e7d6      	b.n	8008224 <_malloc_r+0xa8>
 8008276:	bf00      	nop
 8008278:	200003d8 	.word	0x200003d8

0800827c <__malloc_lock>:
 800827c:	4801      	ldr	r0, [pc, #4]	@ (8008284 <__malloc_lock+0x8>)
 800827e:	f7ff bf0f 	b.w	80080a0 <__retarget_lock_acquire_recursive>
 8008282:	bf00      	nop
 8008284:	200003d0 	.word	0x200003d0

08008288 <__malloc_unlock>:
 8008288:	4801      	ldr	r0, [pc, #4]	@ (8008290 <__malloc_unlock+0x8>)
 800828a:	f7ff bf0a 	b.w	80080a2 <__retarget_lock_release_recursive>
 800828e:	bf00      	nop
 8008290:	200003d0 	.word	0x200003d0

08008294 <__ssputs_r>:
 8008294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008298:	461f      	mov	r7, r3
 800829a:	688e      	ldr	r6, [r1, #8]
 800829c:	4682      	mov	sl, r0
 800829e:	460c      	mov	r4, r1
 80082a0:	42be      	cmp	r6, r7
 80082a2:	4690      	mov	r8, r2
 80082a4:	680b      	ldr	r3, [r1, #0]
 80082a6:	d82d      	bhi.n	8008304 <__ssputs_r+0x70>
 80082a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80082b0:	d026      	beq.n	8008300 <__ssputs_r+0x6c>
 80082b2:	6965      	ldr	r5, [r4, #20]
 80082b4:	6909      	ldr	r1, [r1, #16]
 80082b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082ba:	eba3 0901 	sub.w	r9, r3, r1
 80082be:	1c7b      	adds	r3, r7, #1
 80082c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082c4:	444b      	add	r3, r9
 80082c6:	106d      	asrs	r5, r5, #1
 80082c8:	429d      	cmp	r5, r3
 80082ca:	bf38      	it	cc
 80082cc:	461d      	movcc	r5, r3
 80082ce:	0553      	lsls	r3, r2, #21
 80082d0:	d527      	bpl.n	8008322 <__ssputs_r+0x8e>
 80082d2:	4629      	mov	r1, r5
 80082d4:	f7ff ff52 	bl	800817c <_malloc_r>
 80082d8:	4606      	mov	r6, r0
 80082da:	b360      	cbz	r0, 8008336 <__ssputs_r+0xa2>
 80082dc:	464a      	mov	r2, r9
 80082de:	6921      	ldr	r1, [r4, #16]
 80082e0:	f000 faf8 	bl	80088d4 <memcpy>
 80082e4:	89a3      	ldrh	r3, [r4, #12]
 80082e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80082ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082ee:	81a3      	strh	r3, [r4, #12]
 80082f0:	6126      	str	r6, [r4, #16]
 80082f2:	444e      	add	r6, r9
 80082f4:	6165      	str	r5, [r4, #20]
 80082f6:	eba5 0509 	sub.w	r5, r5, r9
 80082fa:	6026      	str	r6, [r4, #0]
 80082fc:	463e      	mov	r6, r7
 80082fe:	60a5      	str	r5, [r4, #8]
 8008300:	42be      	cmp	r6, r7
 8008302:	d900      	bls.n	8008306 <__ssputs_r+0x72>
 8008304:	463e      	mov	r6, r7
 8008306:	4632      	mov	r2, r6
 8008308:	4641      	mov	r1, r8
 800830a:	6820      	ldr	r0, [r4, #0]
 800830c:	f000 faaa 	bl	8008864 <memmove>
 8008310:	68a3      	ldr	r3, [r4, #8]
 8008312:	2000      	movs	r0, #0
 8008314:	1b9b      	subs	r3, r3, r6
 8008316:	60a3      	str	r3, [r4, #8]
 8008318:	6823      	ldr	r3, [r4, #0]
 800831a:	4433      	add	r3, r6
 800831c:	6023      	str	r3, [r4, #0]
 800831e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008322:	462a      	mov	r2, r5
 8008324:	f000 fae3 	bl	80088ee <_realloc_r>
 8008328:	4606      	mov	r6, r0
 800832a:	2800      	cmp	r0, #0
 800832c:	d1e0      	bne.n	80082f0 <__ssputs_r+0x5c>
 800832e:	6921      	ldr	r1, [r4, #16]
 8008330:	4650      	mov	r0, sl
 8008332:	f7ff feb7 	bl	80080a4 <_free_r>
 8008336:	230c      	movs	r3, #12
 8008338:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800833c:	f8ca 3000 	str.w	r3, [sl]
 8008340:	89a3      	ldrh	r3, [r4, #12]
 8008342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008346:	81a3      	strh	r3, [r4, #12]
 8008348:	e7e9      	b.n	800831e <__ssputs_r+0x8a>
	...

0800834c <_svfiprintf_r>:
 800834c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008350:	4698      	mov	r8, r3
 8008352:	898b      	ldrh	r3, [r1, #12]
 8008354:	b09d      	sub	sp, #116	@ 0x74
 8008356:	4607      	mov	r7, r0
 8008358:	061b      	lsls	r3, r3, #24
 800835a:	460d      	mov	r5, r1
 800835c:	4614      	mov	r4, r2
 800835e:	d510      	bpl.n	8008382 <_svfiprintf_r+0x36>
 8008360:	690b      	ldr	r3, [r1, #16]
 8008362:	b973      	cbnz	r3, 8008382 <_svfiprintf_r+0x36>
 8008364:	2140      	movs	r1, #64	@ 0x40
 8008366:	f7ff ff09 	bl	800817c <_malloc_r>
 800836a:	6028      	str	r0, [r5, #0]
 800836c:	6128      	str	r0, [r5, #16]
 800836e:	b930      	cbnz	r0, 800837e <_svfiprintf_r+0x32>
 8008370:	230c      	movs	r3, #12
 8008372:	603b      	str	r3, [r7, #0]
 8008374:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008378:	b01d      	add	sp, #116	@ 0x74
 800837a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800837e:	2340      	movs	r3, #64	@ 0x40
 8008380:	616b      	str	r3, [r5, #20]
 8008382:	2300      	movs	r3, #0
 8008384:	f8cd 800c 	str.w	r8, [sp, #12]
 8008388:	f04f 0901 	mov.w	r9, #1
 800838c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8008530 <_svfiprintf_r+0x1e4>
 8008390:	9309      	str	r3, [sp, #36]	@ 0x24
 8008392:	2320      	movs	r3, #32
 8008394:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008398:	2330      	movs	r3, #48	@ 0x30
 800839a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800839e:	4623      	mov	r3, r4
 80083a0:	469a      	mov	sl, r3
 80083a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083a6:	b10a      	cbz	r2, 80083ac <_svfiprintf_r+0x60>
 80083a8:	2a25      	cmp	r2, #37	@ 0x25
 80083aa:	d1f9      	bne.n	80083a0 <_svfiprintf_r+0x54>
 80083ac:	ebba 0b04 	subs.w	fp, sl, r4
 80083b0:	d00b      	beq.n	80083ca <_svfiprintf_r+0x7e>
 80083b2:	465b      	mov	r3, fp
 80083b4:	4622      	mov	r2, r4
 80083b6:	4629      	mov	r1, r5
 80083b8:	4638      	mov	r0, r7
 80083ba:	f7ff ff6b 	bl	8008294 <__ssputs_r>
 80083be:	3001      	adds	r0, #1
 80083c0:	f000 80a7 	beq.w	8008512 <_svfiprintf_r+0x1c6>
 80083c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083c6:	445a      	add	r2, fp
 80083c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80083ca:	f89a 3000 	ldrb.w	r3, [sl]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 809f 	beq.w	8008512 <_svfiprintf_r+0x1c6>
 80083d4:	2300      	movs	r3, #0
 80083d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80083da:	f10a 0a01 	add.w	sl, sl, #1
 80083de:	9304      	str	r3, [sp, #16]
 80083e0:	9307      	str	r3, [sp, #28]
 80083e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80083e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083ec:	4654      	mov	r4, sl
 80083ee:	2205      	movs	r2, #5
 80083f0:	484f      	ldr	r0, [pc, #316]	@ (8008530 <_svfiprintf_r+0x1e4>)
 80083f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f6:	f000 fa5f 	bl	80088b8 <memchr>
 80083fa:	9a04      	ldr	r2, [sp, #16]
 80083fc:	b9d8      	cbnz	r0, 8008436 <_svfiprintf_r+0xea>
 80083fe:	06d0      	lsls	r0, r2, #27
 8008400:	bf44      	itt	mi
 8008402:	2320      	movmi	r3, #32
 8008404:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008408:	0711      	lsls	r1, r2, #28
 800840a:	bf44      	itt	mi
 800840c:	232b      	movmi	r3, #43	@ 0x2b
 800840e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008412:	f89a 3000 	ldrb.w	r3, [sl]
 8008416:	2b2a      	cmp	r3, #42	@ 0x2a
 8008418:	d015      	beq.n	8008446 <_svfiprintf_r+0xfa>
 800841a:	9a07      	ldr	r2, [sp, #28]
 800841c:	4654      	mov	r4, sl
 800841e:	2000      	movs	r0, #0
 8008420:	f04f 0c0a 	mov.w	ip, #10
 8008424:	4621      	mov	r1, r4
 8008426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800842a:	3b30      	subs	r3, #48	@ 0x30
 800842c:	2b09      	cmp	r3, #9
 800842e:	d94b      	bls.n	80084c8 <_svfiprintf_r+0x17c>
 8008430:	b1b0      	cbz	r0, 8008460 <_svfiprintf_r+0x114>
 8008432:	9207      	str	r2, [sp, #28]
 8008434:	e014      	b.n	8008460 <_svfiprintf_r+0x114>
 8008436:	eba0 0308 	sub.w	r3, r0, r8
 800843a:	46a2      	mov	sl, r4
 800843c:	fa09 f303 	lsl.w	r3, r9, r3
 8008440:	4313      	orrs	r3, r2
 8008442:	9304      	str	r3, [sp, #16]
 8008444:	e7d2      	b.n	80083ec <_svfiprintf_r+0xa0>
 8008446:	9b03      	ldr	r3, [sp, #12]
 8008448:	1d19      	adds	r1, r3, #4
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	9103      	str	r1, [sp, #12]
 8008450:	bfbb      	ittet	lt
 8008452:	425b      	neglt	r3, r3
 8008454:	f042 0202 	orrlt.w	r2, r2, #2
 8008458:	9307      	strge	r3, [sp, #28]
 800845a:	9307      	strlt	r3, [sp, #28]
 800845c:	bfb8      	it	lt
 800845e:	9204      	strlt	r2, [sp, #16]
 8008460:	7823      	ldrb	r3, [r4, #0]
 8008462:	2b2e      	cmp	r3, #46	@ 0x2e
 8008464:	d10a      	bne.n	800847c <_svfiprintf_r+0x130>
 8008466:	7863      	ldrb	r3, [r4, #1]
 8008468:	2b2a      	cmp	r3, #42	@ 0x2a
 800846a:	d132      	bne.n	80084d2 <_svfiprintf_r+0x186>
 800846c:	9b03      	ldr	r3, [sp, #12]
 800846e:	3402      	adds	r4, #2
 8008470:	1d1a      	adds	r2, r3, #4
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008478:	9203      	str	r2, [sp, #12]
 800847a:	9305      	str	r3, [sp, #20]
 800847c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008540 <_svfiprintf_r+0x1f4>
 8008480:	2203      	movs	r2, #3
 8008482:	7821      	ldrb	r1, [r4, #0]
 8008484:	4650      	mov	r0, sl
 8008486:	f000 fa17 	bl	80088b8 <memchr>
 800848a:	b138      	cbz	r0, 800849c <_svfiprintf_r+0x150>
 800848c:	eba0 000a 	sub.w	r0, r0, sl
 8008490:	2240      	movs	r2, #64	@ 0x40
 8008492:	9b04      	ldr	r3, [sp, #16]
 8008494:	3401      	adds	r4, #1
 8008496:	4082      	lsls	r2, r0
 8008498:	4313      	orrs	r3, r2
 800849a:	9304      	str	r3, [sp, #16]
 800849c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084a0:	2206      	movs	r2, #6
 80084a2:	4824      	ldr	r0, [pc, #144]	@ (8008534 <_svfiprintf_r+0x1e8>)
 80084a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084a8:	f000 fa06 	bl	80088b8 <memchr>
 80084ac:	2800      	cmp	r0, #0
 80084ae:	d036      	beq.n	800851e <_svfiprintf_r+0x1d2>
 80084b0:	4b21      	ldr	r3, [pc, #132]	@ (8008538 <_svfiprintf_r+0x1ec>)
 80084b2:	bb1b      	cbnz	r3, 80084fc <_svfiprintf_r+0x1b0>
 80084b4:	9b03      	ldr	r3, [sp, #12]
 80084b6:	3307      	adds	r3, #7
 80084b8:	f023 0307 	bic.w	r3, r3, #7
 80084bc:	3308      	adds	r3, #8
 80084be:	9303      	str	r3, [sp, #12]
 80084c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084c2:	4433      	add	r3, r6
 80084c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80084c6:	e76a      	b.n	800839e <_svfiprintf_r+0x52>
 80084c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80084cc:	460c      	mov	r4, r1
 80084ce:	2001      	movs	r0, #1
 80084d0:	e7a8      	b.n	8008424 <_svfiprintf_r+0xd8>
 80084d2:	2300      	movs	r3, #0
 80084d4:	3401      	adds	r4, #1
 80084d6:	f04f 0c0a 	mov.w	ip, #10
 80084da:	4619      	mov	r1, r3
 80084dc:	9305      	str	r3, [sp, #20]
 80084de:	4620      	mov	r0, r4
 80084e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084e4:	3a30      	subs	r2, #48	@ 0x30
 80084e6:	2a09      	cmp	r2, #9
 80084e8:	d903      	bls.n	80084f2 <_svfiprintf_r+0x1a6>
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d0c6      	beq.n	800847c <_svfiprintf_r+0x130>
 80084ee:	9105      	str	r1, [sp, #20]
 80084f0:	e7c4      	b.n	800847c <_svfiprintf_r+0x130>
 80084f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80084f6:	4604      	mov	r4, r0
 80084f8:	2301      	movs	r3, #1
 80084fa:	e7f0      	b.n	80084de <_svfiprintf_r+0x192>
 80084fc:	ab03      	add	r3, sp, #12
 80084fe:	462a      	mov	r2, r5
 8008500:	a904      	add	r1, sp, #16
 8008502:	4638      	mov	r0, r7
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	4b0d      	ldr	r3, [pc, #52]	@ (800853c <_svfiprintf_r+0x1f0>)
 8008508:	f3af 8000 	nop.w
 800850c:	1c42      	adds	r2, r0, #1
 800850e:	4606      	mov	r6, r0
 8008510:	d1d6      	bne.n	80084c0 <_svfiprintf_r+0x174>
 8008512:	89ab      	ldrh	r3, [r5, #12]
 8008514:	065b      	lsls	r3, r3, #25
 8008516:	f53f af2d 	bmi.w	8008374 <_svfiprintf_r+0x28>
 800851a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800851c:	e72c      	b.n	8008378 <_svfiprintf_r+0x2c>
 800851e:	ab03      	add	r3, sp, #12
 8008520:	462a      	mov	r2, r5
 8008522:	a904      	add	r1, sp, #16
 8008524:	4638      	mov	r0, r7
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	4b04      	ldr	r3, [pc, #16]	@ (800853c <_svfiprintf_r+0x1f0>)
 800852a:	f000 f87d 	bl	8008628 <_printf_i>
 800852e:	e7ed      	b.n	800850c <_svfiprintf_r+0x1c0>
 8008530:	08008c98 	.word	0x08008c98
 8008534:	08008ca2 	.word	0x08008ca2
 8008538:	00000000 	.word	0x00000000
 800853c:	08008295 	.word	0x08008295
 8008540:	08008c9e 	.word	0x08008c9e

08008544 <_printf_common>:
 8008544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008548:	4616      	mov	r6, r2
 800854a:	4698      	mov	r8, r3
 800854c:	688a      	ldr	r2, [r1, #8]
 800854e:	4607      	mov	r7, r0
 8008550:	690b      	ldr	r3, [r1, #16]
 8008552:	460c      	mov	r4, r1
 8008554:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008558:	4293      	cmp	r3, r2
 800855a:	bfb8      	it	lt
 800855c:	4613      	movlt	r3, r2
 800855e:	6033      	str	r3, [r6, #0]
 8008560:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008564:	b10a      	cbz	r2, 800856a <_printf_common+0x26>
 8008566:	3301      	adds	r3, #1
 8008568:	6033      	str	r3, [r6, #0]
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	0699      	lsls	r1, r3, #26
 800856e:	bf42      	ittt	mi
 8008570:	6833      	ldrmi	r3, [r6, #0]
 8008572:	3302      	addmi	r3, #2
 8008574:	6033      	strmi	r3, [r6, #0]
 8008576:	6825      	ldr	r5, [r4, #0]
 8008578:	f015 0506 	ands.w	r5, r5, #6
 800857c:	d106      	bne.n	800858c <_printf_common+0x48>
 800857e:	f104 0a19 	add.w	sl, r4, #25
 8008582:	68e3      	ldr	r3, [r4, #12]
 8008584:	6832      	ldr	r2, [r6, #0]
 8008586:	1a9b      	subs	r3, r3, r2
 8008588:	42ab      	cmp	r3, r5
 800858a:	dc2b      	bgt.n	80085e4 <_printf_common+0xa0>
 800858c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008590:	6822      	ldr	r2, [r4, #0]
 8008592:	3b00      	subs	r3, #0
 8008594:	bf18      	it	ne
 8008596:	2301      	movne	r3, #1
 8008598:	0692      	lsls	r2, r2, #26
 800859a:	d430      	bmi.n	80085fe <_printf_common+0xba>
 800859c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80085a0:	4641      	mov	r1, r8
 80085a2:	4638      	mov	r0, r7
 80085a4:	47c8      	blx	r9
 80085a6:	3001      	adds	r0, #1
 80085a8:	d023      	beq.n	80085f2 <_printf_common+0xae>
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	341a      	adds	r4, #26
 80085ae:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80085b2:	f003 0306 	and.w	r3, r3, #6
 80085b6:	2b04      	cmp	r3, #4
 80085b8:	bf0a      	itet	eq
 80085ba:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80085be:	2500      	movne	r5, #0
 80085c0:	6833      	ldreq	r3, [r6, #0]
 80085c2:	f04f 0600 	mov.w	r6, #0
 80085c6:	bf08      	it	eq
 80085c8:	1aed      	subeq	r5, r5, r3
 80085ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80085ce:	bf08      	it	eq
 80085d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085d4:	4293      	cmp	r3, r2
 80085d6:	bfc4      	itt	gt
 80085d8:	1a9b      	subgt	r3, r3, r2
 80085da:	18ed      	addgt	r5, r5, r3
 80085dc:	42b5      	cmp	r5, r6
 80085de:	d11a      	bne.n	8008616 <_printf_common+0xd2>
 80085e0:	2000      	movs	r0, #0
 80085e2:	e008      	b.n	80085f6 <_printf_common+0xb2>
 80085e4:	2301      	movs	r3, #1
 80085e6:	4652      	mov	r2, sl
 80085e8:	4641      	mov	r1, r8
 80085ea:	4638      	mov	r0, r7
 80085ec:	47c8      	blx	r9
 80085ee:	3001      	adds	r0, #1
 80085f0:	d103      	bne.n	80085fa <_printf_common+0xb6>
 80085f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fa:	3501      	adds	r5, #1
 80085fc:	e7c1      	b.n	8008582 <_printf_common+0x3e>
 80085fe:	18e1      	adds	r1, r4, r3
 8008600:	1c5a      	adds	r2, r3, #1
 8008602:	2030      	movs	r0, #48	@ 0x30
 8008604:	3302      	adds	r3, #2
 8008606:	4422      	add	r2, r4
 8008608:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800860c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008610:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008614:	e7c2      	b.n	800859c <_printf_common+0x58>
 8008616:	2301      	movs	r3, #1
 8008618:	4622      	mov	r2, r4
 800861a:	4641      	mov	r1, r8
 800861c:	4638      	mov	r0, r7
 800861e:	47c8      	blx	r9
 8008620:	3001      	adds	r0, #1
 8008622:	d0e6      	beq.n	80085f2 <_printf_common+0xae>
 8008624:	3601      	adds	r6, #1
 8008626:	e7d9      	b.n	80085dc <_printf_common+0x98>

08008628 <_printf_i>:
 8008628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800862c:	7e0f      	ldrb	r7, [r1, #24]
 800862e:	4691      	mov	r9, r2
 8008630:	4680      	mov	r8, r0
 8008632:	460c      	mov	r4, r1
 8008634:	2f78      	cmp	r7, #120	@ 0x78
 8008636:	469a      	mov	sl, r3
 8008638:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800863a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800863e:	d807      	bhi.n	8008650 <_printf_i+0x28>
 8008640:	2f62      	cmp	r7, #98	@ 0x62
 8008642:	d80a      	bhi.n	800865a <_printf_i+0x32>
 8008644:	2f00      	cmp	r7, #0
 8008646:	f000 80d1 	beq.w	80087ec <_printf_i+0x1c4>
 800864a:	2f58      	cmp	r7, #88	@ 0x58
 800864c:	f000 80b8 	beq.w	80087c0 <_printf_i+0x198>
 8008650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008654:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008658:	e03a      	b.n	80086d0 <_printf_i+0xa8>
 800865a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800865e:	2b15      	cmp	r3, #21
 8008660:	d8f6      	bhi.n	8008650 <_printf_i+0x28>
 8008662:	a101      	add	r1, pc, #4	@ (adr r1, 8008668 <_printf_i+0x40>)
 8008664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008668:	080086c1 	.word	0x080086c1
 800866c:	080086d5 	.word	0x080086d5
 8008670:	08008651 	.word	0x08008651
 8008674:	08008651 	.word	0x08008651
 8008678:	08008651 	.word	0x08008651
 800867c:	08008651 	.word	0x08008651
 8008680:	080086d5 	.word	0x080086d5
 8008684:	08008651 	.word	0x08008651
 8008688:	08008651 	.word	0x08008651
 800868c:	08008651 	.word	0x08008651
 8008690:	08008651 	.word	0x08008651
 8008694:	080087d3 	.word	0x080087d3
 8008698:	080086ff 	.word	0x080086ff
 800869c:	0800878d 	.word	0x0800878d
 80086a0:	08008651 	.word	0x08008651
 80086a4:	08008651 	.word	0x08008651
 80086a8:	080087f5 	.word	0x080087f5
 80086ac:	08008651 	.word	0x08008651
 80086b0:	080086ff 	.word	0x080086ff
 80086b4:	08008651 	.word	0x08008651
 80086b8:	08008651 	.word	0x08008651
 80086bc:	08008795 	.word	0x08008795
 80086c0:	6833      	ldr	r3, [r6, #0]
 80086c2:	1d1a      	adds	r2, r3, #4
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6032      	str	r2, [r6, #0]
 80086c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80086d0:	2301      	movs	r3, #1
 80086d2:	e09c      	b.n	800880e <_printf_i+0x1e6>
 80086d4:	6833      	ldr	r3, [r6, #0]
 80086d6:	6820      	ldr	r0, [r4, #0]
 80086d8:	1d19      	adds	r1, r3, #4
 80086da:	6031      	str	r1, [r6, #0]
 80086dc:	0606      	lsls	r6, r0, #24
 80086de:	d501      	bpl.n	80086e4 <_printf_i+0xbc>
 80086e0:	681d      	ldr	r5, [r3, #0]
 80086e2:	e003      	b.n	80086ec <_printf_i+0xc4>
 80086e4:	0645      	lsls	r5, r0, #25
 80086e6:	d5fb      	bpl.n	80086e0 <_printf_i+0xb8>
 80086e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80086ec:	2d00      	cmp	r5, #0
 80086ee:	da03      	bge.n	80086f8 <_printf_i+0xd0>
 80086f0:	232d      	movs	r3, #45	@ 0x2d
 80086f2:	426d      	negs	r5, r5
 80086f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086f8:	4858      	ldr	r0, [pc, #352]	@ (800885c <_printf_i+0x234>)
 80086fa:	230a      	movs	r3, #10
 80086fc:	e011      	b.n	8008722 <_printf_i+0xfa>
 80086fe:	6821      	ldr	r1, [r4, #0]
 8008700:	6833      	ldr	r3, [r6, #0]
 8008702:	0608      	lsls	r0, r1, #24
 8008704:	f853 5b04 	ldr.w	r5, [r3], #4
 8008708:	d402      	bmi.n	8008710 <_printf_i+0xe8>
 800870a:	0649      	lsls	r1, r1, #25
 800870c:	bf48      	it	mi
 800870e:	b2ad      	uxthmi	r5, r5
 8008710:	2f6f      	cmp	r7, #111	@ 0x6f
 8008712:	6033      	str	r3, [r6, #0]
 8008714:	4851      	ldr	r0, [pc, #324]	@ (800885c <_printf_i+0x234>)
 8008716:	bf14      	ite	ne
 8008718:	230a      	movne	r3, #10
 800871a:	2308      	moveq	r3, #8
 800871c:	2100      	movs	r1, #0
 800871e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008722:	6866      	ldr	r6, [r4, #4]
 8008724:	2e00      	cmp	r6, #0
 8008726:	60a6      	str	r6, [r4, #8]
 8008728:	db05      	blt.n	8008736 <_printf_i+0x10e>
 800872a:	6821      	ldr	r1, [r4, #0]
 800872c:	432e      	orrs	r6, r5
 800872e:	f021 0104 	bic.w	r1, r1, #4
 8008732:	6021      	str	r1, [r4, #0]
 8008734:	d04b      	beq.n	80087ce <_printf_i+0x1a6>
 8008736:	4616      	mov	r6, r2
 8008738:	fbb5 f1f3 	udiv	r1, r5, r3
 800873c:	fb03 5711 	mls	r7, r3, r1, r5
 8008740:	5dc7      	ldrb	r7, [r0, r7]
 8008742:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008746:	462f      	mov	r7, r5
 8008748:	460d      	mov	r5, r1
 800874a:	42bb      	cmp	r3, r7
 800874c:	d9f4      	bls.n	8008738 <_printf_i+0x110>
 800874e:	2b08      	cmp	r3, #8
 8008750:	d10b      	bne.n	800876a <_printf_i+0x142>
 8008752:	6823      	ldr	r3, [r4, #0]
 8008754:	07df      	lsls	r7, r3, #31
 8008756:	d508      	bpl.n	800876a <_printf_i+0x142>
 8008758:	6923      	ldr	r3, [r4, #16]
 800875a:	6861      	ldr	r1, [r4, #4]
 800875c:	4299      	cmp	r1, r3
 800875e:	bfde      	ittt	le
 8008760:	2330      	movle	r3, #48	@ 0x30
 8008762:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008766:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800876a:	1b92      	subs	r2, r2, r6
 800876c:	6122      	str	r2, [r4, #16]
 800876e:	464b      	mov	r3, r9
 8008770:	aa03      	add	r2, sp, #12
 8008772:	4621      	mov	r1, r4
 8008774:	4640      	mov	r0, r8
 8008776:	f8cd a000 	str.w	sl, [sp]
 800877a:	f7ff fee3 	bl	8008544 <_printf_common>
 800877e:	3001      	adds	r0, #1
 8008780:	d14a      	bne.n	8008818 <_printf_i+0x1f0>
 8008782:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008786:	b004      	add	sp, #16
 8008788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	f043 0320 	orr.w	r3, r3, #32
 8008792:	6023      	str	r3, [r4, #0]
 8008794:	2778      	movs	r7, #120	@ 0x78
 8008796:	4832      	ldr	r0, [pc, #200]	@ (8008860 <_printf_i+0x238>)
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800879e:	061f      	lsls	r7, r3, #24
 80087a0:	6831      	ldr	r1, [r6, #0]
 80087a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80087a6:	d402      	bmi.n	80087ae <_printf_i+0x186>
 80087a8:	065f      	lsls	r7, r3, #25
 80087aa:	bf48      	it	mi
 80087ac:	b2ad      	uxthmi	r5, r5
 80087ae:	6031      	str	r1, [r6, #0]
 80087b0:	07d9      	lsls	r1, r3, #31
 80087b2:	bf44      	itt	mi
 80087b4:	f043 0320 	orrmi.w	r3, r3, #32
 80087b8:	6023      	strmi	r3, [r4, #0]
 80087ba:	b11d      	cbz	r5, 80087c4 <_printf_i+0x19c>
 80087bc:	2310      	movs	r3, #16
 80087be:	e7ad      	b.n	800871c <_printf_i+0xf4>
 80087c0:	4826      	ldr	r0, [pc, #152]	@ (800885c <_printf_i+0x234>)
 80087c2:	e7e9      	b.n	8008798 <_printf_i+0x170>
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	f023 0320 	bic.w	r3, r3, #32
 80087ca:	6023      	str	r3, [r4, #0]
 80087cc:	e7f6      	b.n	80087bc <_printf_i+0x194>
 80087ce:	4616      	mov	r6, r2
 80087d0:	e7bd      	b.n	800874e <_printf_i+0x126>
 80087d2:	6833      	ldr	r3, [r6, #0]
 80087d4:	6825      	ldr	r5, [r4, #0]
 80087d6:	1d18      	adds	r0, r3, #4
 80087d8:	6961      	ldr	r1, [r4, #20]
 80087da:	6030      	str	r0, [r6, #0]
 80087dc:	062e      	lsls	r6, r5, #24
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	d501      	bpl.n	80087e6 <_printf_i+0x1be>
 80087e2:	6019      	str	r1, [r3, #0]
 80087e4:	e002      	b.n	80087ec <_printf_i+0x1c4>
 80087e6:	0668      	lsls	r0, r5, #25
 80087e8:	d5fb      	bpl.n	80087e2 <_printf_i+0x1ba>
 80087ea:	8019      	strh	r1, [r3, #0]
 80087ec:	2300      	movs	r3, #0
 80087ee:	4616      	mov	r6, r2
 80087f0:	6123      	str	r3, [r4, #16]
 80087f2:	e7bc      	b.n	800876e <_printf_i+0x146>
 80087f4:	6833      	ldr	r3, [r6, #0]
 80087f6:	2100      	movs	r1, #0
 80087f8:	1d1a      	adds	r2, r3, #4
 80087fa:	6032      	str	r2, [r6, #0]
 80087fc:	681e      	ldr	r6, [r3, #0]
 80087fe:	6862      	ldr	r2, [r4, #4]
 8008800:	4630      	mov	r0, r6
 8008802:	f000 f859 	bl	80088b8 <memchr>
 8008806:	b108      	cbz	r0, 800880c <_printf_i+0x1e4>
 8008808:	1b80      	subs	r0, r0, r6
 800880a:	6060      	str	r0, [r4, #4]
 800880c:	6863      	ldr	r3, [r4, #4]
 800880e:	6123      	str	r3, [r4, #16]
 8008810:	2300      	movs	r3, #0
 8008812:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008816:	e7aa      	b.n	800876e <_printf_i+0x146>
 8008818:	6923      	ldr	r3, [r4, #16]
 800881a:	4632      	mov	r2, r6
 800881c:	4649      	mov	r1, r9
 800881e:	4640      	mov	r0, r8
 8008820:	47d0      	blx	sl
 8008822:	3001      	adds	r0, #1
 8008824:	d0ad      	beq.n	8008782 <_printf_i+0x15a>
 8008826:	6823      	ldr	r3, [r4, #0]
 8008828:	079b      	lsls	r3, r3, #30
 800882a:	d413      	bmi.n	8008854 <_printf_i+0x22c>
 800882c:	68e0      	ldr	r0, [r4, #12]
 800882e:	9b03      	ldr	r3, [sp, #12]
 8008830:	4298      	cmp	r0, r3
 8008832:	bfb8      	it	lt
 8008834:	4618      	movlt	r0, r3
 8008836:	e7a6      	b.n	8008786 <_printf_i+0x15e>
 8008838:	2301      	movs	r3, #1
 800883a:	4632      	mov	r2, r6
 800883c:	4649      	mov	r1, r9
 800883e:	4640      	mov	r0, r8
 8008840:	47d0      	blx	sl
 8008842:	3001      	adds	r0, #1
 8008844:	d09d      	beq.n	8008782 <_printf_i+0x15a>
 8008846:	3501      	adds	r5, #1
 8008848:	68e3      	ldr	r3, [r4, #12]
 800884a:	9903      	ldr	r1, [sp, #12]
 800884c:	1a5b      	subs	r3, r3, r1
 800884e:	42ab      	cmp	r3, r5
 8008850:	dcf2      	bgt.n	8008838 <_printf_i+0x210>
 8008852:	e7eb      	b.n	800882c <_printf_i+0x204>
 8008854:	2500      	movs	r5, #0
 8008856:	f104 0619 	add.w	r6, r4, #25
 800885a:	e7f5      	b.n	8008848 <_printf_i+0x220>
 800885c:	08008ca9 	.word	0x08008ca9
 8008860:	08008cba 	.word	0x08008cba

08008864 <memmove>:
 8008864:	4288      	cmp	r0, r1
 8008866:	b510      	push	{r4, lr}
 8008868:	eb01 0402 	add.w	r4, r1, r2
 800886c:	d902      	bls.n	8008874 <memmove+0x10>
 800886e:	4284      	cmp	r4, r0
 8008870:	4623      	mov	r3, r4
 8008872:	d807      	bhi.n	8008884 <memmove+0x20>
 8008874:	1e43      	subs	r3, r0, #1
 8008876:	42a1      	cmp	r1, r4
 8008878:	d008      	beq.n	800888c <memmove+0x28>
 800887a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800887e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008882:	e7f8      	b.n	8008876 <memmove+0x12>
 8008884:	4402      	add	r2, r0
 8008886:	4601      	mov	r1, r0
 8008888:	428a      	cmp	r2, r1
 800888a:	d100      	bne.n	800888e <memmove+0x2a>
 800888c:	bd10      	pop	{r4, pc}
 800888e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008896:	e7f7      	b.n	8008888 <memmove+0x24>

08008898 <_sbrk_r>:
 8008898:	b538      	push	{r3, r4, r5, lr}
 800889a:	2300      	movs	r3, #0
 800889c:	4d05      	ldr	r5, [pc, #20]	@ (80088b4 <_sbrk_r+0x1c>)
 800889e:	4604      	mov	r4, r0
 80088a0:	4608      	mov	r0, r1
 80088a2:	602b      	str	r3, [r5, #0]
 80088a4:	f7f8 fc9a 	bl	80011dc <_sbrk>
 80088a8:	1c43      	adds	r3, r0, #1
 80088aa:	d102      	bne.n	80088b2 <_sbrk_r+0x1a>
 80088ac:	682b      	ldr	r3, [r5, #0]
 80088ae:	b103      	cbz	r3, 80088b2 <_sbrk_r+0x1a>
 80088b0:	6023      	str	r3, [r4, #0]
 80088b2:	bd38      	pop	{r3, r4, r5, pc}
 80088b4:	200003cc 	.word	0x200003cc

080088b8 <memchr>:
 80088b8:	b2c9      	uxtb	r1, r1
 80088ba:	4603      	mov	r3, r0
 80088bc:	4402      	add	r2, r0
 80088be:	b510      	push	{r4, lr}
 80088c0:	4293      	cmp	r3, r2
 80088c2:	4618      	mov	r0, r3
 80088c4:	d101      	bne.n	80088ca <memchr+0x12>
 80088c6:	2000      	movs	r0, #0
 80088c8:	e003      	b.n	80088d2 <memchr+0x1a>
 80088ca:	7804      	ldrb	r4, [r0, #0]
 80088cc:	3301      	adds	r3, #1
 80088ce:	428c      	cmp	r4, r1
 80088d0:	d1f6      	bne.n	80088c0 <memchr+0x8>
 80088d2:	bd10      	pop	{r4, pc}

080088d4 <memcpy>:
 80088d4:	440a      	add	r2, r1
 80088d6:	1e43      	subs	r3, r0, #1
 80088d8:	4291      	cmp	r1, r2
 80088da:	d100      	bne.n	80088de <memcpy+0xa>
 80088dc:	4770      	bx	lr
 80088de:	b510      	push	{r4, lr}
 80088e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088e4:	4291      	cmp	r1, r2
 80088e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ea:	d1f9      	bne.n	80088e0 <memcpy+0xc>
 80088ec:	bd10      	pop	{r4, pc}

080088ee <_realloc_r>:
 80088ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f2:	4607      	mov	r7, r0
 80088f4:	4614      	mov	r4, r2
 80088f6:	460d      	mov	r5, r1
 80088f8:	b921      	cbnz	r1, 8008904 <_realloc_r+0x16>
 80088fa:	4611      	mov	r1, r2
 80088fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008900:	f7ff bc3c 	b.w	800817c <_malloc_r>
 8008904:	b92a      	cbnz	r2, 8008912 <_realloc_r+0x24>
 8008906:	4625      	mov	r5, r4
 8008908:	f7ff fbcc 	bl	80080a4 <_free_r>
 800890c:	4628      	mov	r0, r5
 800890e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008912:	f000 f81a 	bl	800894a <_malloc_usable_size_r>
 8008916:	4284      	cmp	r4, r0
 8008918:	4606      	mov	r6, r0
 800891a:	d802      	bhi.n	8008922 <_realloc_r+0x34>
 800891c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008920:	d8f4      	bhi.n	800890c <_realloc_r+0x1e>
 8008922:	4621      	mov	r1, r4
 8008924:	4638      	mov	r0, r7
 8008926:	f7ff fc29 	bl	800817c <_malloc_r>
 800892a:	4680      	mov	r8, r0
 800892c:	b908      	cbnz	r0, 8008932 <_realloc_r+0x44>
 800892e:	4645      	mov	r5, r8
 8008930:	e7ec      	b.n	800890c <_realloc_r+0x1e>
 8008932:	42b4      	cmp	r4, r6
 8008934:	4622      	mov	r2, r4
 8008936:	4629      	mov	r1, r5
 8008938:	bf28      	it	cs
 800893a:	4632      	movcs	r2, r6
 800893c:	f7ff ffca 	bl	80088d4 <memcpy>
 8008940:	4629      	mov	r1, r5
 8008942:	4638      	mov	r0, r7
 8008944:	f7ff fbae 	bl	80080a4 <_free_r>
 8008948:	e7f1      	b.n	800892e <_realloc_r+0x40>

0800894a <_malloc_usable_size_r>:
 800894a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800894e:	1f18      	subs	r0, r3, #4
 8008950:	2b00      	cmp	r3, #0
 8008952:	bfbc      	itt	lt
 8008954:	580b      	ldrlt	r3, [r1, r0]
 8008956:	18c0      	addlt	r0, r0, r3
 8008958:	4770      	bx	lr
	...

0800895c <_init>:
 800895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895e:	bf00      	nop
 8008960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008962:	bc08      	pop	{r3}
 8008964:	469e      	mov	lr, r3
 8008966:	4770      	bx	lr

08008968 <_fini>:
 8008968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896a:	bf00      	nop
 800896c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800896e:	bc08      	pop	{r3}
 8008970:	469e      	mov	lr, r3
 8008972:	4770      	bx	lr
